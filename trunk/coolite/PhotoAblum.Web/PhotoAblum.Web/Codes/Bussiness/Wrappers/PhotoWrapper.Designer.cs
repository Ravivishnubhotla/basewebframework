// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using Spring.Context.Support;
using Common.Logging;
using PhotoAblum.Web.Codes.Entity.Tables;
using PhotoAblum.Web.Codes.Bussiness.ServiceProxys.Tables.Container;
using PhotoAblum.Web.Codes.Bussiness.ServiceProxys.Tables;

namespace PhotoAblum.Web.Codes.Bussiness.Wrappers
{
    public partial class PhotoWrapper
    {
        #region Member

		internal static readonly IPhotoServiceProxy businessProxy = ((PhotoAblum.Web.Codes.Bussiness.ServiceProxys.Tables.Container.ServiceProxyContainer)(ContextRegistry.GetContext().GetObject("ServiceProxyContainerIocID", typeof(PhotoAblum.Web.Codes.Bussiness.ServiceProxys.Tables.Container.ServiceProxyContainer)))).PhotoServiceProxyInstance;
		//internal static readonly IPhotoServiceProxy businessProxy = ((ServiceProxyContainer)(ContextRegistry.GetContext().GetObject("ServiceProxyContainerIocID"))).PhotoServiceProxyInstance;

        internal PhotoEntity entity;
		
		private static ILog logger = null;

        public static ILog Logger
        {
            get
            {
                if (logger == null)
                    logger = LogManager.GetLogger(typeof(PhotoWrapper));
                return logger;
            }
        }

        #endregion

        #region Construtor
        public PhotoWrapper() : this(new PhotoEntity())
        {
            
        }

        internal PhotoWrapper(PhotoEntity entityObj)
        {
            entity = entityObj;
        }
		#endregion
		
		#region Equals 和 HashCode 方法覆盖
		public override bool Equals(object obj)
        {
            if (obj == null && entity!=null)
            {
                if (entity.Id == 0)
                    return true;

                return false;
            }
            return entity.Equals(obj);
        }

        public override int GetHashCode()
        {
            return entity.GetHashCode();
        }
		#endregion
		
        #region 公共常量

		public static readonly string CLASS_FULL_NAME = "PhotoAblum.Web.Codes.Entity.Tables.PhotoEntity";
		public static readonly string PROPERTY_NAME_ID = "Id";
		public static readonly string PROPERTY_NAME_ALBUMID = "AlbumID";
		public static readonly string PROPERTY_NAME_FULLIMAGE = "FullImage";
		public static readonly string PROPERTY_NAME_MIDDLEIMAGE = "MiddleImage";
		public static readonly string PROPERTY_NAME_THUMBIMAGE = "ThumbImage";
		public static readonly string PROPERTY_NAME_ORDERINDEX = "OrderIndex";
		public static readonly string PROPERTY_NAME_ISSHOW = "IsShow";
		
        #endregion


		#region Public Property
		/// <summary>
		/// 
		/// </summary>		
		public int Id
		{
			get
			{
				return entity.Id;
			}
			set
			{
				entity.Id = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public int AlbumID
		{
			get
			{
				return entity.AlbumID;
			}
			set
			{
				entity.AlbumID = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string FullImage
		{
			get
			{
				return entity.FullImage;
			}
			set
			{
				entity.FullImage = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string MiddleImage
		{
			get
			{
				return entity.MiddleImage;
			}
			set
			{
				entity.MiddleImage = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string ThumbImage
		{
			get
			{
				return entity.ThumbImage;
			}
			set
			{
				entity.ThumbImage = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public int? OrderIndex
		{
			get
			{
				return entity.OrderIndex;
			}
			set
			{
				entity.OrderIndex = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public bool? IsShow
		{
			get
			{
				return entity.IsShow;
			}
			set
			{
				entity.IsShow = value;
			}
		}
		#endregion 







        #region Static Common Data Operation
		
		internal static List<PhotoWrapper> ConvertToWrapperList(List<PhotoEntity> entitylist)
        {
            List<PhotoWrapper> list = new List<PhotoWrapper>();
            foreach (PhotoEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }

		internal static List<PhotoWrapper> ConvertToWrapperList(IList<PhotoEntity> entitylist)
        {
            List<PhotoWrapper> list = new List<PhotoWrapper>();
            foreach (PhotoEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }
		
		internal static List<PhotoEntity> ConvertToEntityList(List<PhotoWrapper> wrapperlist)
        {
            List<PhotoEntity> list = new List<PhotoEntity>();
            foreach (PhotoWrapper wrapper in wrapperlist)
            {
                list.Add(wrapper.entity);
            }
            return list;
        }

        internal static PhotoWrapper ConvertEntityToWrapper(PhotoEntity entity)
        {
            if (entity == null)
                return null;
				
            if (entity.Id == 0)
                return null;

            return new PhotoWrapper(entity);
        }
		
		#endregion

    }//End Class
}// End Namespace

