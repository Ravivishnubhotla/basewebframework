// Generated by MyGeneration Version # (1.3.0.9)
using System;
using NHibernate.Criterion;
using PhotoAblum.Web.Codes.Entity.Tables;
using Legendigital.Framework.Common.Data.NHibernate;


namespace PhotoAblum.Web.Codes.Data.Tables
{
    public partial class AlbumDataObject : BaseNHibernateDataObject<AlbumEntity>
    {
				#region Expression Query Property (标准查询字段)
		public static readonly Property PROPERTY_ID = Property.ForName(AlbumEntity.PROPERTY_NAME_ID);
		public static readonly Property PROPERTY_NAME = Property.ForName(AlbumEntity.PROPERTY_NAME_NAME);
		public static readonly Property PROPERTY_DESCRIPTION = Property.ForName(AlbumEntity.PROPERTY_NAME_DESCRIPTION);
		public static readonly Property PROPERTY_SHORTDESCRIPTION = Property.ForName(AlbumEntity.PROPERTY_NAME_SHORTDESCRIPTION);
		public static readonly Property PROPERTY_FILEPATH = Property.ForName(AlbumEntity.PROPERTY_NAME_FILEPATH);
		public static readonly Property PROPERTY_FULLIMAGE = Property.ForName(AlbumEntity.PROPERTY_NAME_FULLIMAGE);
		public static readonly Property PROPERTY_MIDDLEIMAGE = Property.ForName(AlbumEntity.PROPERTY_NAME_MIDDLEIMAGE);
		public static readonly Property PROPERTY_THUMBIMAGE = Property.ForName(AlbumEntity.PROPERTY_NAME_THUMBIMAGE);
		public static readonly Property PROPERTY_DIRNAME = Property.ForName(AlbumEntity.PROPERTY_NAME_DIRNAME);
		public static readonly Property PROPERTY_ORDERINDEX = Property.ForName(AlbumEntity.PROPERTY_NAME_ORDERINDEX);
		public static readonly Property PROPERTY_VIEWPASSWORD = Property.ForName(AlbumEntity.PROPERTY_NAME_VIEWPASSWORD);
		public static readonly Property PROPERTY_ISSHOW = Property.ForName(AlbumEntity.PROPERTY_NAME_ISSHOW);
      
		#region 子类集合字段查询字段
	
		#endregion

		#endregion

		
		public override string[] PkPropertyName
        {
            get { return new string[] { "Id" }; }
        }
		
		public override Type GetFieldTypeByFieldName(string fieldName)
        {
			switch (fieldName)
            {
                case "Id":
                    return typeof (int);
                    break;
                case "Name":
                    return typeof (string);
                    break;
                case "Description":
                    return typeof (string);
                    break;
                case "ShortDescription":
                    return typeof (string);
                    break;
                case "FilePath":
                    return typeof (string);
                    break;
                case "FullImage":
                    return typeof (string);
                    break;
                case "MiddleImage":
                    return typeof (string);
                    break;
                case "ThumbImage":
                    return typeof (string);
                    break;
                case "DirName":
                    return typeof (string);
                    break;
                case "OrderIndex":
                    return typeof (int);
                    break;
                case "ViewPassword":
                    return typeof (string);
                    break;
                case "IsShow":
                    return typeof (bool);
                    break;
          }
			return typeof(string);
        }
    }
}
