// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;

namespace PhotoAblum.Web.Codes.Entity.Tables
{
	/// <summary>
	///	
	/// </summary>
	[DataContract]
	public partial class AlbumEntity : ICloneable
	{
        #region 公共常量

		public static readonly string CLASS_FULL_NAME = "PhotoAblum.Web.Codes.Entity.Tables.AlbumEntity";
		public static readonly string PROPERTY_NAME_ID = "Id";
		public static readonly string PROPERTY_NAME_NAME = "Name";
		public static readonly string PROPERTY_NAME_DESCRIPTION = "Description";
		public static readonly string PROPERTY_NAME_SHORTDESCRIPTION = "ShortDescription";
		public static readonly string PROPERTY_NAME_FILEPATH = "FilePath";
		public static readonly string PROPERTY_NAME_FULLIMAGE = "FullImage";
		public static readonly string PROPERTY_NAME_MIDDLEIMAGE = "MiddleImage";
		public static readonly string PROPERTY_NAME_THUMBIMAGE = "ThumbImage";
		public static readonly string PROPERTY_NAME_DIRNAME = "DirName";
		public static readonly string PROPERTY_NAME_ORDERINDEX = "OrderIndex";
		public static readonly string PROPERTY_NAME_VIEWPASSWORD = "ViewPassword";
		public static readonly string PROPERTY_NAME_ISSHOW = "IsShow";
		
        #endregion
	
        #region 私有成员变量

		private bool _isChanged;		
		private bool _isDeleted;
		
		private int _id;
		private string _name;
		private string _description;
		private string _shortDescription;
		private string _filePath;
		private string _fullImage;
		private string _middleImage;
		private string _thumbImage;
		private string _dirName;
		private int? _orderIndex;
		private string _viewPassword;
		private bool? _isShow;
		
		#endregion

		#region 构造函数
		/// <summary>
		/// 默认构造函数
		/// </summary>
		public AlbumEntity()
		{
			_id = 0;
			_name = null;
			_description = null;
			_shortDescription = null;
			_filePath = null;
			_fullImage = null;
			_middleImage = null;
			_thumbImage = null;
			_dirName = null;
			_orderIndex = null;
			_viewPassword = null;
			_isShow = null;
		}
		#endregion

		#region 全构造函数
		/// <summary>
		/// 全构造函数
		/// </summary>
		public AlbumEntity( int id, string name, string description, string shortDescription, string filePath, string fullImage, string middleImage, string thumbImage, string dirName, int? orderIndex, string viewPassword, bool? isShow)
		{
			_id = id;
			_name = name;
			_description = description;
			_shortDescription = shortDescription;
			_filePath = filePath;
			_fullImage = fullImage;
			_middleImage = middleImage;
			_thumbImage = thumbImage;
			_dirName = dirName;
			_orderIndex = orderIndex;
			_viewPassword = viewPassword;
			_isShow = isShow;
		}
		#endregion     
	
	    #region 公共属性

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual int Id
		{
			get { return _id; }

			set	
			{
				_isChanged |= (_id != value); _id = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string Name
		{
			get { return _name; }

			set	
			{

				if( value != null && value.Length > 400)
					throw new ArgumentOutOfRangeException("Invalid value for Name", value, value.ToString());
				_isChanged |= (_name != value); _name = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string Description
		{
			get { return _description; }

			set	
			{

				if( value != null && value.Length > 4000)
					throw new ArgumentOutOfRangeException("Invalid value for Description", value, value.ToString());
				_isChanged |= (_description != value); _description = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string ShortDescription
		{
			get { return _shortDescription; }

			set	
			{

				if( value != null && value.Length > 400)
					throw new ArgumentOutOfRangeException("Invalid value for ShortDescription", value, value.ToString());
				_isChanged |= (_shortDescription != value); _shortDescription = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string FilePath
		{
			get { return _filePath; }

			set	
			{

				if( value != null && value.Length > 1000)
					throw new ArgumentOutOfRangeException("Invalid value for FilePath", value, value.ToString());
				_isChanged |= (_filePath != value); _filePath = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string FullImage
		{
			get { return _fullImage; }

			set	
			{

				if( value != null && value.Length > 1000)
					throw new ArgumentOutOfRangeException("Invalid value for FullImage", value, value.ToString());
				_isChanged |= (_fullImage != value); _fullImage = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string MiddleImage
		{
			get { return _middleImage; }

			set	
			{

				if( value != null && value.Length > 1000)
					throw new ArgumentOutOfRangeException("Invalid value for MiddleImage", value, value.ToString());
				_isChanged |= (_middleImage != value); _middleImage = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string ThumbImage
		{
			get { return _thumbImage; }

			set	
			{

				if( value != null && value.Length > 1000)
					throw new ArgumentOutOfRangeException("Invalid value for ThumbImage", value, value.ToString());
				_isChanged |= (_thumbImage != value); _thumbImage = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string DirName
		{
			get { return _dirName; }

			set	
			{

				if( value != null && value.Length > 400)
					throw new ArgumentOutOfRangeException("Invalid value for DirName", value, value.ToString());
				_isChanged |= (_dirName != value); _dirName = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual int? OrderIndex
		{
			get { return _orderIndex; }

			set	
			{
				_isChanged |= (_orderIndex != value); _orderIndex = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string ViewPassword
		{
			get { return _viewPassword; }

			set	
			{

				if( value != null && value.Length > 400)
					throw new ArgumentOutOfRangeException("Invalid value for ViewPassword", value, value.ToString());
				_isChanged |= (_viewPassword != value); _viewPassword = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual bool? IsShow
		{
			get { return _isShow; }

			set	
			{
				_isChanged |= (_isShow != value); _isShow = value;
			}
		}
		/// <summary>
		/// 返回对象是否被改变。
		/// </summary>
		public virtual bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public virtual bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 

        #region 公共方法
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public virtual void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion

		#region Equals 和 HashCode 方法覆盖
		/// <summary>
		/// local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals( object obj )
		{
			if( this == obj ) return true;
			
			if( ( obj == null ) || ( obj.GetType() != this.GetType() ) ) return false;
			
			AlbumEntity castObj = (AlbumEntity)obj;
			
			return ( castObj != null ) && ( this._id == castObj.Id );
		}
		
		/// <summary>
		/// local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			
			int hash = 57; 
			hash = 27 * hash * _id.GetHashCode();

			return hash; 
		}
		#endregion
	
		#region ICloneable methods
		
		public virtual object Clone()
		{
			return this.MemberwiseClone();
		}
		
		#endregion
	
	}
}
