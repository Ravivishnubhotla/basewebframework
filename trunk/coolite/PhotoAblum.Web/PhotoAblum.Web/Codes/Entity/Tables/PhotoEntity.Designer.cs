// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;

namespace PhotoAblum.Web.Codes.Entity.Tables
{
	/// <summary>
	///	
	/// </summary>
	[DataContract]
	public partial class PhotoEntity : ICloneable
	{
        #region 公共常量

		public static readonly string CLASS_FULL_NAME = "PhotoAblum.Web.Codes.Entity.Tables.PhotoEntity";
		public static readonly string PROPERTY_NAME_ID = "Id";
		public static readonly string PROPERTY_NAME_ALBUMID = "AlbumID";
		public static readonly string PROPERTY_NAME_FULLIMAGE = "FullImage";
		public static readonly string PROPERTY_NAME_MIDDLEIMAGE = "MiddleImage";
		public static readonly string PROPERTY_NAME_THUMBIMAGE = "ThumbImage";
		public static readonly string PROPERTY_NAME_ORDERINDEX = "OrderIndex";
		public static readonly string PROPERTY_NAME_ISSHOW = "IsShow";
		
        #endregion
	
        #region 私有成员变量

		private bool _isChanged;		
		private bool _isDeleted;
		
		private int _id;
		private int _albumID;
		private string _fullImage;
		private string _middleImage;
		private string _thumbImage;
		private int? _orderIndex;
		private bool? _isShow;
		
		#endregion

		#region 构造函数
		/// <summary>
		/// 默认构造函数
		/// </summary>
		public PhotoEntity()
		{
			_id = 0;
			_albumID = 0;
			_fullImage = null;
			_middleImage = null;
			_thumbImage = null;
			_orderIndex = null;
			_isShow = null;
		}
		#endregion

		#region 全构造函数
		/// <summary>
		/// 全构造函数
		/// </summary>
		public PhotoEntity( int id, int albumID, string fullImage, string middleImage, string thumbImage, int? orderIndex, bool? isShow)
		{
			_id = id;
			_albumID = albumID;
			_fullImage = fullImage;
			_middleImage = middleImage;
			_thumbImage = thumbImage;
			_orderIndex = orderIndex;
			_isShow = isShow;
		}
		#endregion     
	
	    #region 公共属性

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual int Id
		{
			get { return _id; }

			set	
			{
				_isChanged |= (_id != value); _id = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual int AlbumID
		{
			get { return _albumID; }

			set	
			{
				_isChanged |= (_albumID != value); _albumID = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string FullImage
		{
			get { return _fullImage; }

			set	
			{

				if( value != null && value.Length > 1000)
					throw new ArgumentOutOfRangeException("Invalid value for FullImage", value, value.ToString());
				_isChanged |= (_fullImage != value); _fullImage = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string MiddleImage
		{
			get { return _middleImage; }

			set	
			{

				if( value != null && value.Length > 1000)
					throw new ArgumentOutOfRangeException("Invalid value for MiddleImage", value, value.ToString());
				_isChanged |= (_middleImage != value); _middleImage = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string ThumbImage
		{
			get { return _thumbImage; }

			set	
			{

				if( value != null && value.Length > 1000)
					throw new ArgumentOutOfRangeException("Invalid value for ThumbImage", value, value.ToString());
				_isChanged |= (_thumbImage != value); _thumbImage = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual int? OrderIndex
		{
			get { return _orderIndex; }

			set	
			{
				_isChanged |= (_orderIndex != value); _orderIndex = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual bool? IsShow
		{
			get { return _isShow; }

			set	
			{
				_isChanged |= (_isShow != value); _isShow = value;
			}
		}
		/// <summary>
		/// 返回对象是否被改变。
		/// </summary>
		public virtual bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public virtual bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 

        #region 公共方法
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public virtual void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion

		#region Equals 和 HashCode 方法覆盖
		/// <summary>
		/// local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals( object obj )
		{
			if( this == obj ) return true;
			
			if( ( obj == null ) || ( obj.GetType() != this.GetType() ) ) return false;
			
			PhotoEntity castObj = (PhotoEntity)obj;
			
			return ( castObj != null ) && ( this._id == castObj.Id );
		}
		
		/// <summary>
		/// local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			
			int hash = 57; 
			hash = 27 * hash * _id.GetHashCode();

			return hash; 
		}
		#endregion
	
		#region ICloneable methods
		
		public virtual object Clone()
		{
			return this.MemberwiseClone();
		}
		
		#endregion
	
	}
}
