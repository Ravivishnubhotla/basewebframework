// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using NHibernate.Criterion;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;
using LD.SPPipeManage.Entity.Tables;
using Legendigital.Framework.Common.Data.NHibernate;


namespace LD.SPPipeManage.Data.Tables
{
    public partial class SPClientDataObject : BaseNHibernateDataObject<SPClientEntity>
    {
				#region Expression Query Property (标准查询字段)
		public static readonly Property PROPERTY_ID = Property.ForName(SPClientEntity.PROPERTY_NAME_ID);
		public static readonly Property PROPERTY_NAME = Property.ForName(SPClientEntity.PROPERTY_NAME_NAME);
		public static readonly Property PROPERTY_DESCRIPTION = Property.ForName(SPClientEntity.PROPERTY_NAME_DESCRIPTION);
		public static readonly Property PROPERTY_RECIEVEDATAURL = Property.ForName(SPClientEntity.PROPERTY_NAME_RECIEVEDATAURL);
		public static readonly Property PROPERTY_USERID = Property.ForName(SPClientEntity.PROPERTY_NAME_USERID);
		public static readonly Property PROPERTY_SYNCDATA = Property.ForName(SPClientEntity.PROPERTY_NAME_SYNCDATA);
		public static readonly Property PROPERTY_OKMESSAGE = Property.ForName(SPClientEntity.PROPERTY_NAME_OKMESSAGE);
		public static readonly Property PROPERTY_FAILEDMESSAGE = Property.ForName(SPClientEntity.PROPERTY_NAME_FAILEDMESSAGE);
		public static readonly Property PROPERTY_SYNCTYPE = Property.ForName(SPClientEntity.PROPERTY_NAME_SYNCTYPE);
		public static readonly Property PROPERTY_SPCLIENTGROUPID = Property.ForName(SPClientEntity.PROPERTY_NAME_SPCLIENTGROUPID);
		#region sPClientGroupID字段外键查询字段
        public static NHibernateDynamicQueryGenerator<SPClientEntity> InClude_SPClientGroupID_Query(NHibernateDynamicQueryGenerator<SPClientEntity> queryGenerator)
        {
            return queryGenerator.AddAlians(SPClientEntity.PROPERTY_NAME_SPCLIENTGROUPID, PROPERTY_SPCLIENTGROUPID_ALIAS_NAME);
        }
        public static readonly string PROPERTY_SPCLIENTGROUPID_ALIAS_NAME = "SPClientGroupID_SPClientEntity_Alias";
		public static readonly Property PROPERTY_SPCLIENTGROUPID_ID = Property.ForName(PROPERTY_SPCLIENTGROUPID_ALIAS_NAME + ".Id");
		public static readonly Property PROPERTY_SPCLIENTGROUPID_NAME = Property.ForName(PROPERTY_SPCLIENTGROUPID_ALIAS_NAME + ".Name");
		public static readonly Property PROPERTY_SPCLIENTGROUPID_DESCRIPTION = Property.ForName(PROPERTY_SPCLIENTGROUPID_ALIAS_NAME + ".Description");
		public static readonly Property PROPERTY_SPCLIENTGROUPID_USERID = Property.ForName(PROPERTY_SPCLIENTGROUPID_ALIAS_NAME + ".UserID");
		public static readonly Property PROPERTY_SPCLIENTGROUPID_DEFAULTSYCNMOURL = Property.ForName(PROPERTY_SPCLIENTGROUPID_ALIAS_NAME + ".DefaultSycnMoUrl");
		public static readonly Property PROPERTY_SPCLIENTGROUPID_DEFAULTSYCNMRURL = Property.ForName(PROPERTY_SPCLIENTGROUPID_ALIAS_NAME + ".DefaultSycnMRUrl");
		public static readonly Property PROPERTY_SPCLIENTGROUPID_DEFAULTINTERCEPTRATE = Property.ForName(PROPERTY_SPCLIENTGROUPID_ALIAS_NAME + ".DefaultInterceptRate");
		public static readonly Property PROPERTY_SPCLIENTGROUPID_DEFAULTNOINTERCEPTCOUNT = Property.ForName(PROPERTY_SPCLIENTGROUPID_ALIAS_NAME + ".DefaultNoInterceptCount");
		#endregion
		public static readonly Property PROPERTY_ISDEFAULTCLIENT = Property.ForName(SPClientEntity.PROPERTY_NAME_ISDEFAULTCLIENT);
		public static readonly Property PROPERTY_ALIAS = Property.ForName(SPClientEntity.PROPERTY_NAME_ALIAS);
      
		#region 子类集合字段查询字段
	
		#endregion

		#endregion

		
		public override string[] PkPropertyName
        {
            get { return new string[] { "Id" }; }
        }
		
		public override Type GetFieldTypeByFieldName(string fieldName)
        {
			switch (fieldName)
            {
                case "Id":
                    return typeof (int);
                case "Name":
                    return typeof (string);
                case "Description":
                    return typeof (string);
                case "RecieveDataUrl":
                    return typeof (string);
                case "UserID":
                    return typeof (int);
                case "SyncData":
                    return typeof (bool);
                case "OkMessage":
                    return typeof (string);
                case "FailedMessage":
                    return typeof (string);
                case "SyncType":
                    return typeof (string);
                case "SPClientGroupID":
                    return typeof (int);
                case "IsDefaultClient":
                    return typeof (bool);
                case "Alias":
                    return typeof (string);
          }
			return typeof(string);
        }
		
        public List<SPClientEntity> GetList_By_SPClientGroupEntity(SPClientGroupEntity fkentity)
		{
			NHibernateDynamicQueryGenerator<SPClientEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_SPCLIENTGROUPID.Eq(fkentity));

            return this.FindListByQueryBuilder(dynamicQueryGenerator);
		}
		
		
        public List<SPClientEntity> GetPageList_By_SPClientGroupEntity(string orderByColumnName, bool isDesc, int pageIndex, int pageSize, SPClientGroupEntity fkentity, out int recordCount)
        {
            NHibernateDynamicQueryGenerator<SPClientEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_SPCLIENTGROUPID.Eq(fkentity));

            AddDefaultOrderByToQueryGenerator(orderByColumnName, isDesc, dynamicQueryGenerator);

            dynamicQueryGenerator.SetFirstResult((pageIndex - 1) * pageSize);

            dynamicQueryGenerator.SetMaxResults(pageSize);

            return FindListByPageByQueryBuilder(dynamicQueryGenerator, out recordCount);
        }		
		

		
		
		
    }
}
