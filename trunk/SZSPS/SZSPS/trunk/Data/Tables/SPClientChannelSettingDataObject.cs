// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using NHibernate.Criterion;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;
using LD.SPPipeManage.Entity.Tables;
using Legendigital.Framework.Common.Data.NHibernate;

namespace LD.SPPipeManage.Data.Tables
{
    public partial class SPClientChannelSettingDataObject
    {
        public List<SPClientChannelSettingEntity> GetSettingByChannel(SPChannelEntity spChannelEntity)
        {
            NHibernateDynamicQueryGenerator<SPClientChannelSettingEntity> queryGenerator = this.GetNewQueryBuilder();

            queryGenerator.AddWhereClause(PROPERTY_CHANNELID.Eq(spChannelEntity));

            return this.FindListByQueryBuilder(queryGenerator);
        }

        public List<SPClientChannelSettingEntity> GetSettingByClient(SPClientEntity spClientEntity)
        {
            NHibernateDynamicQueryGenerator<SPClientChannelSettingEntity> queryGenerator = this.GetNewQueryBuilder();

            queryGenerator.AddWhereClause(PROPERTY_CLINETID.Eq(spClientEntity));

            return this.FindListByQueryBuilder(queryGenerator);
        }

        public List<SPClientChannelSettingEntity> GetAllNeedRendSetting()
        {
            NHibernateDynamicQueryGenerator<SPClientChannelSettingEntity> queryGenerator = this.GetNewQueryBuilder();

            queryGenerator.AddWhereClause(PROPERTY_SYNCDATA.Eq(true));

            queryGenerator.AddWhereClause(PROPERTY_SYNCDATAURL.IsNotNull());

            queryGenerator.AddWhereClause(Not(PROPERTY_SYNCDATAURL.Eq("")));

            return this.FindListByQueryBuilder(queryGenerator);
        }

        public List<SPClientChannelSettingEntity> FindAllByOrderByAndFilterAndChannelIDAndCodeAndPort(string sortFieldName, bool isDesc, SPChannelEntity channelEntity, string mo, string port, int pageIndex, int pageSize, out int recordCount)
        {
            NHibernateDynamicQueryGenerator<SPClientChannelSettingEntity> queryGenerator = this.GetNewQueryBuilder();

            if (channelEntity!=null)
                queryGenerator.AddWhereClause(PROPERTY_CHANNELID.Eq(channelEntity));

            queryGenerator.AddWhereClause(Or(PROPERTY_DISABLE.IsNull(), PROPERTY_DISABLE.Eq(false)));

            if (!string.IsNullOrEmpty(mo))
                queryGenerator.AddWhereClause(PROPERTY_COMMANDCODE.Like(mo,MatchMode.Anywhere));

            if (!string.IsNullOrEmpty(port))
                queryGenerator.AddWhereClause(PROPERTY_CHANNELCODE.Like(port, MatchMode.Anywhere));

            AddDefaultOrderByToQueryGenerator(sortFieldName, isDesc, queryGenerator);

            queryGenerator.SetFirstResult((pageIndex-1)*pageSize);

            queryGenerator.SetMaxResults(pageSize);

            List<SPClientChannelSettingEntity> results = FindListByPageByQueryBuilder(queryGenerator, out recordCount);

            return results;
        }
    }
}
