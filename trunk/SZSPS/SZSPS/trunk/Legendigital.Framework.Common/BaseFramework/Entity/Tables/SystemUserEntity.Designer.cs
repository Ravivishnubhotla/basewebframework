// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;


namespace Legendigital.Framework.Common.BaseFramework.Entity.Tables
{
	/// <summary>
	///	System User
	/// </summary>
	
	public partial class SystemUserEntity : ICloneable
	{
        #region 公共常量

		public static readonly string CLASS_FULL_NAME = "Legendigital.Framework.Common.BaseFramework.Entity.Tables.SystemUserEntity";
		public static readonly string PROPERTY_NAME_USERID = "UserID";
		public static readonly string PROPERTY_NAME_USERLOGINID = "UserLoginID";
		public static readonly string PROPERTY_NAME_USERNAME = "UserName";
		public static readonly string PROPERTY_NAME_USEREMAIL = "UserEmail";
		public static readonly string PROPERTY_NAME_USERPASSWORD = "UserPassword";
		public static readonly string PROPERTY_NAME_USERSTATUS = "UserStatus";
		public static readonly string PROPERTY_NAME_USERCREATEDATE = "UserCreateDate";
		public static readonly string PROPERTY_NAME_USERTYPE = "UserType";
		public static readonly string PROPERTY_NAME_DEPARTMENTID = "DepartmentID";
		public static readonly string PROPERTY_NAME_MOBILEPIN = "MobilePIN";
		public static readonly string PROPERTY_NAME_PASSWORDFORMAT = "PasswordFormat";
		public static readonly string PROPERTY_NAME_PASSWORDSALT = "PasswordSalt";
		public static readonly string PROPERTY_NAME_LOWEREDEMAIL = "LoweredEmail";
		public static readonly string PROPERTY_NAME_PASSWORDQUESTION = "PasswordQuestion";
		public static readonly string PROPERTY_NAME_PASSWORDANSWER = "PasswordAnswer";
		public static readonly string PROPERTY_NAME_COMMENTS = "Comments";
		public static readonly string PROPERTY_NAME_ISAPPROVED = "IsApproved";
		public static readonly string PROPERTY_NAME_ISLOCKEDOUT = "IsLockedOut";
		public static readonly string PROPERTY_NAME_LASTACTIVITYDATE = "LastActivityDate";
		public static readonly string PROPERTY_NAME_LASTLOGINDATE = "LastLoginDate";
		public static readonly string PROPERTY_NAME_LASTLOCKEDOUTDATE = "LastLockedOutDate";
		public static readonly string PROPERTY_NAME_LASTPASSWORDCHANGEDATE = "LastPasswordChangeDate";
		public static readonly string PROPERTY_NAME_FAILEDPWDATTEMPTCNT = "FailedPwdAttemptCnt";
		public static readonly string PROPERTY_NAME_FAILEDPWDATTEMPTWNDSTART = "FailedPwdAttemptWndStart";
		public static readonly string PROPERTY_NAME_FAILEDPWDANSATTEMPTCNT = "FailedPwdAnsAttemptCnt";
		public static readonly string PROPERTY_NAME_FAILEDPWDANSATTEMPTWNDSTART = "FailedPwdAnsAttemptWndStart";
		public static readonly string PROPERTY_NAME_ISNEEDCHGPWD = "IsNeedChgPwd";
		
        #endregion
	
        #region 私有成员变量

		private bool _isChanged;		
		private bool _isDeleted;
		
		private int _userID;
		private string _userLoginID;
		private string _userName;
		private string _userEmail;
		private string _userPassword;
		private string _userStatus;
		private DateTime _userCreateDate;
		private string _userType;
		private SystemDepartmentEntity _departmentID;
		private string _mobilePIN;
		private int _passwordFormat;
		private string _passwordSalt;
		private string _loweredEmail;
		private string _passwordQuestion;
		private string _passwordAnswer;
		private string _comments;
		private bool _isApproved;
		private bool _isLockedOut;
		private DateTime _lastActivityDate;
		private DateTime _lastLoginDate;
		private DateTime _lastLockedOutDate;
		private DateTime _lastPasswordChangeDate;
		private int _failedPwdAttemptCnt;
		private DateTime _failedPwdAttemptWndStart;
		private int _failedPwdAnsAttemptCnt;
		private DateTime _failedPwdAnsAttemptWndStart;
		private bool _isNeedChgPwd;
		
		#endregion

		#region 构造函数
		/// <summary>
		/// 默认构造函数
		/// </summary>
		public SystemUserEntity()
		{
			_userID = 0;
			_userLoginID = String.Empty;
			_userName = String.Empty;
			_userEmail = String.Empty;
			_userPassword = String.Empty;
			_userStatus = String.Empty;
			_userCreateDate = DateTime.MinValue;
			_userType = String.Empty;
			_departmentID = null;
			_mobilePIN = null;
			_passwordFormat = 0;
			_passwordSalt = String.Empty;
			_loweredEmail = null;
			_passwordQuestion = null;
			_passwordAnswer = null;
			_comments = null;
			_isApproved = false;
			_isLockedOut = false;
			_lastActivityDate = DateTime.MinValue;
			_lastLoginDate = DateTime.MinValue;
			_lastLockedOutDate = DateTime.MinValue;
			_lastPasswordChangeDate = DateTime.MinValue;
			_failedPwdAttemptCnt = 0;
			_failedPwdAttemptWndStart = DateTime.MinValue;
			_failedPwdAnsAttemptCnt = 0;
			_failedPwdAnsAttemptWndStart = DateTime.MinValue;
			_isNeedChgPwd = false;
		}
		#endregion

		#region 全构造函数
		/// <summary>
		/// 全构造函数
		/// </summary>
		public SystemUserEntity( int userID, string userLoginID, string userName, string userEmail, string userPassword, string userStatus, DateTime userCreateDate, string userType, SystemDepartmentEntity departmentID, string mobilePIN, int passwordFormat, string passwordSalt, string loweredEmail, string passwordQuestion, string passwordAnswer, string comments, bool isApproved, bool isLockedOut, DateTime lastActivityDate, DateTime lastLoginDate, DateTime lastLockedOutDate, DateTime lastPasswordChangeDate, int failedPwdAttemptCnt, DateTime failedPwdAttemptWndStart, int failedPwdAnsAttemptCnt, DateTime failedPwdAnsAttemptWndStart, bool isNeedChgPwd)
		{
			_userID = userID;
			_userLoginID = userLoginID;
			_userName = userName;
			_userEmail = userEmail;
			_userPassword = userPassword;
			_userStatus = userStatus;
			_userCreateDate = userCreateDate;
			_userType = userType;
			_departmentID = departmentID;
			_mobilePIN = mobilePIN;
			_passwordFormat = passwordFormat;
			_passwordSalt = passwordSalt;
			_loweredEmail = loweredEmail;
			_passwordQuestion = passwordQuestion;
			_passwordAnswer = passwordAnswer;
			_comments = comments;
			_isApproved = isApproved;
			_isLockedOut = isLockedOut;
			_lastActivityDate = lastActivityDate;
			_lastLoginDate = lastLoginDate;
			_lastLockedOutDate = lastLockedOutDate;
			_lastPasswordChangeDate = lastPasswordChangeDate;
			_failedPwdAttemptCnt = failedPwdAttemptCnt;
			_failedPwdAttemptWndStart = failedPwdAttemptWndStart;
			_failedPwdAnsAttemptCnt = failedPwdAnsAttemptCnt;
			_failedPwdAnsAttemptWndStart = failedPwdAnsAttemptWndStart;
			_isNeedChgPwd = isNeedChgPwd;
		}
		#endregion     
	
	    #region 公共属性

		/// <summary>
		/// Primary Key
		/// </summary>
		
		public virtual int UserID
		{
			get { return _userID; }

			set	
			{
				_isChanged |= (_userID != value); _userID = value;
			}
		}

		/// <summary>
		/// Login ID
		/// </summary>
		
		public virtual string UserLoginID
		{
			get { return _userLoginID; }

			set	
			{

				if( value != null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for UserLoginID", value, value.ToString());
				_isChanged |= (_userLoginID != value); _userLoginID = value;
			}
		}

		/// <summary>
		/// User Name
		/// </summary>
		
		public virtual string UserName
		{
			get { return _userName; }

			set	
			{

				if( value != null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for UserName", value, value.ToString());
				_isChanged |= (_userName != value); _userName = value;
			}
		}

		/// <summary>
		/// Email
		/// </summary>
		
		public virtual string UserEmail
		{
			get { return _userEmail; }

			set	
			{

				if( value != null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for UserEmail", value, value.ToString());
				_isChanged |= (_userEmail != value); _userEmail = value;
			}
		}

		/// <summary>
		/// Password
		/// </summary>
		
		public virtual string UserPassword
		{
			get { return _userPassword; }

			set	
			{

				if( value != null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for UserPassword", value, value.ToString());
				_isChanged |= (_userPassword != value); _userPassword = value;
			}
		}

		/// <summary>
		/// Status
		/// </summary>
		
		public virtual string UserStatus
		{
			get { return _userStatus; }

			set	
			{

				if( value != null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for UserStatus", value, value.ToString());
				_isChanged |= (_userStatus != value); _userStatus = value;
			}
		}

		/// <summary>
		/// Create Date
		/// </summary>
		
		public virtual DateTime UserCreateDate
		{
			get { return _userCreateDate; }

			set	
			{
				_isChanged |= (_userCreateDate != value); _userCreateDate = value;
			}
		}

		/// <summary>
		/// User Type
		/// </summary>
		
		public virtual string UserType
		{
			get { return _userType; }

			set	
			{

				if( value != null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for UserType", value, value.ToString());
				_isChanged |= (_userType != value); _userType = value;
			}
		}

		/// <summary>
		/// Department
		/// </summary>
		
		public virtual SystemDepartmentEntity DepartmentID
		{
			get { return _departmentID; }

			set	
			{
				_isChanged |= (_departmentID != value); _departmentID = value;
			}
		}

		/// <summary>
		/// MobilePIN
		/// </summary>
		
		public virtual string MobilePIN
		{
			get { return _mobilePIN; }

			set	
			{

				if( value != null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for MobilePIN", value, value.ToString());
				_isChanged |= (_mobilePIN != value); _mobilePIN = value;
			}
		}

		/// <summary>
		/// PasswordF ormat
		/// </summary>
		
		public virtual int PasswordFormat
		{
			get { return _passwordFormat; }

			set	
			{
				_isChanged |= (_passwordFormat != value); _passwordFormat = value;
			}
		}

		/// <summary>
		/// Password Salt
		/// </summary>
		
		public virtual string PasswordSalt
		{
			get { return _passwordSalt; }

			set	
			{

				if( value != null && value.Length > 256)
					throw new ArgumentOutOfRangeException("Invalid value for PasswordSalt", value, value.ToString());
				_isChanged |= (_passwordSalt != value); _passwordSalt = value;
			}
		}

		/// <summary>
		/// Lowered Email
		/// </summary>
		
		public virtual string LoweredEmail
		{
			get { return _loweredEmail; }

			set	
			{

				if( value != null && value.Length > 256)
					throw new ArgumentOutOfRangeException("Invalid value for LoweredEmail", value, value.ToString());
				_isChanged |= (_loweredEmail != value); _loweredEmail = value;
			}
		}

		/// <summary>
		/// Password Question
		/// </summary>
		
		public virtual string PasswordQuestion
		{
			get { return _passwordQuestion; }

			set	
			{

				if( value != null && value.Length > 510)
					throw new ArgumentOutOfRangeException("Invalid value for PasswordQuestion", value, value.ToString());
				_isChanged |= (_passwordQuestion != value); _passwordQuestion = value;
			}
		}

		/// <summary>
		/// Password Answer
		/// </summary>
		
		public virtual string PasswordAnswer
		{
			get { return _passwordAnswer; }

			set	
			{

				if( value != null && value.Length > 510)
					throw new ArgumentOutOfRangeException("Invalid value for PasswordAnswer", value, value.ToString());
				_isChanged |= (_passwordAnswer != value); _passwordAnswer = value;
			}
		}

		/// <summary>
		/// Comments
		/// </summary>
		
		public virtual string Comments
		{
			get { return _comments; }

			set	
			{

				if( value != null && value.Length > 6000)
					throw new ArgumentOutOfRangeException("Invalid value for Comments", value, value.ToString());
				_isChanged |= (_comments != value); _comments = value;
			}
		}

		/// <summary>
		/// Is Approved
		/// </summary>
		
		public virtual bool IsApproved
		{
			get { return _isApproved; }

			set	
			{
				_isChanged |= (_isApproved != value); _isApproved = value;
			}
		}

		/// <summary>
		/// Is Locked Out
		/// </summary>
		
		public virtual bool IsLockedOut
		{
			get { return _isLockedOut; }

			set	
			{
				_isChanged |= (_isLockedOut != value); _isLockedOut = value;
			}
		}

		/// <summary>
		/// Last Activity Date
		/// </summary>
		
		public virtual DateTime LastActivityDate
		{
			get { return _lastActivityDate; }

			set	
			{
				_isChanged |= (_lastActivityDate != value); _lastActivityDate = value;
			}
		}

		/// <summary>
		/// Last Login Date
		/// </summary>
		
		public virtual DateTime LastLoginDate
		{
			get { return _lastLoginDate; }

			set	
			{
				_isChanged |= (_lastLoginDate != value); _lastLoginDate = value;
			}
		}

		/// <summary>
		/// Last Locked Out Date
		/// </summary>
		
		public virtual DateTime LastLockedOutDate
		{
			get { return _lastLockedOutDate; }

			set	
			{
				_isChanged |= (_lastLockedOutDate != value); _lastLockedOutDate = value;
			}
		}

		/// <summary>
		/// Last Password Change Date
		/// </summary>
		
		public virtual DateTime LastPasswordChangeDate
		{
			get { return _lastPasswordChangeDate; }

			set	
			{
				_isChanged |= (_lastPasswordChangeDate != value); _lastPasswordChangeDate = value;
			}
		}

		/// <summary>
		/// Failed Password Attempt Count
		/// </summary>
		
		public virtual int FailedPwdAttemptCnt
		{
			get { return _failedPwdAttemptCnt; }

			set	
			{
				_isChanged |= (_failedPwdAttemptCnt != value); _failedPwdAttemptCnt = value;
			}
		}

		/// <summary>
		/// Failed Password Attempt DateTime
		/// </summary>
		
		public virtual DateTime FailedPwdAttemptWndStart
		{
			get { return _failedPwdAttemptWndStart; }

			set	
			{
				_isChanged |= (_failedPwdAttemptWndStart != value); _failedPwdAttemptWndStart = value;
			}
		}

		/// <summary>
		/// Failed Password Answer Attempt Count
		/// </summary>
		
		public virtual int FailedPwdAnsAttemptCnt
		{
			get { return _failedPwdAnsAttemptCnt; }

			set	
			{
				_isChanged |= (_failedPwdAnsAttemptCnt != value); _failedPwdAnsAttemptCnt = value;
			}
		}

		/// <summary>
		/// Failed Password Answer Attempt DateTime
		/// </summary>
		
		public virtual DateTime FailedPwdAnsAttemptWndStart
		{
			get { return _failedPwdAnsAttemptWndStart; }

			set	
			{
				_isChanged |= (_failedPwdAnsAttemptWndStart != value); _failedPwdAnsAttemptWndStart = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		
		public virtual bool IsNeedChgPwd
		{
			get { return _isNeedChgPwd; }

			set	
			{
				_isChanged |= (_isNeedChgPwd != value); _isNeedChgPwd = value;
			}
		}
		/// <summary>
		/// 返回对象是否被改变。
		/// </summary>
		public virtual bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public virtual bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 

        #region 公共方法
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public virtual void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion

		#region Equals 和 HashCode 方法覆盖
		/// <summary>
		/// local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals( object obj )
		{
			if( this == obj ) return true;
			
			if( ( obj == null ) || ( obj.GetType() != this.GetType() ) ) return false;
			
			SystemUserEntity castObj = (SystemUserEntity)obj;
			
			return ( castObj != null ) && ( this._userID == castObj.UserID );
		}
		
		/// <summary>
		/// local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			
			int hash = 57; 
			hash = 27 * hash * _userID.GetHashCode();

			return hash; 
		}
		#endregion
	
		#region ICloneable methods
		
		public virtual object Clone()
		{
			return this.MemberwiseClone();
		}
		
		#endregion
	
	}
}
