// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;


namespace Legendigital.Framework.Common.BaseFramework.Entity.Tables
{
	/// <summary>
	///	系统短消息
	/// </summary>
	
	public partial class SystemShortMessageEntity : ICloneable
	{
        #region 公共常量

		public static readonly string CLASS_FULL_NAME = "Legendigital.Framework.Common.BaseFramework.Entity.Tables.SystemShortMessageEntity";
		public static readonly string PROPERTY_NAME_SHORTMESSAGEID = "ShortMessageID";
		public static readonly string PROPERTY_NAME_SHORTMESSAGETITLE = "ShortMessageTitle";
		public static readonly string PROPERTY_NAME_SHORTMESSAGECATEGORY = "ShortMessageCategory";
		public static readonly string PROPERTY_NAME_SHORTMESSAGECONTENT = "ShortMessageContent";
		public static readonly string PROPERTY_NAME_SHORTMESSAGESENDER = "ShortMessageSender";
		public static readonly string PROPERTY_NAME_SHORTMESSAGESENDDATE = "ShortMessageSendDate";
		public static readonly string PROPERTY_NAME_SHORTMESSAGERECEIVERID = "ShortMessageReceiverID";
		public static readonly string PROPERTY_NAME_SHORTMESSAGEISREAD = "ShortMessageIsRead";
		
        #endregion
	
        #region 私有成员变量

		private bool _isChanged;		
		private bool _isDeleted;
		
		private int _shortMessageID;
		private string _shortMessageTitle;
		private string _shortMessageCategory;
		private string _shortMessageContent;
		private string _shortMessageSender;
		private DateTime _shortMessageSendDate;
		private int _shortMessageReceiverID;
		private bool _shortMessageIsRead;
		
		#endregion

		#region 构造函数
		/// <summary>
		/// 默认构造函数
		/// </summary>
		public SystemShortMessageEntity()
		{
			_shortMessageID = 0;
			_shortMessageTitle = String.Empty;
			_shortMessageCategory = null;
			_shortMessageContent = null;
			_shortMessageSender = null;
			_shortMessageSendDate = DateTime.MinValue;
			_shortMessageReceiverID = 0;
			_shortMessageIsRead = false;
		}
		#endregion

		#region 全构造函数
		/// <summary>
		/// 全构造函数
		/// </summary>
		public SystemShortMessageEntity( int shortMessageID, string shortMessageTitle, string shortMessageCategory, string shortMessageContent, string shortMessageSender, DateTime shortMessageSendDate, int shortMessageReceiverID, bool shortMessageIsRead)
		{
			_shortMessageID = shortMessageID;
			_shortMessageTitle = shortMessageTitle;
			_shortMessageCategory = shortMessageCategory;
			_shortMessageContent = shortMessageContent;
			_shortMessageSender = shortMessageSender;
			_shortMessageSendDate = shortMessageSendDate;
			_shortMessageReceiverID = shortMessageReceiverID;
			_shortMessageIsRead = shortMessageIsRead;
		}
		#endregion     
	
	    #region 公共属性

		/// <summary>
		/// 主键
		/// </summary>
		
		public virtual int ShortMessageID
		{
			get { return _shortMessageID; }

			set	
			{
				_isChanged |= (_shortMessageID != value); _shortMessageID = value;
			}
		}

		/// <summary>
		/// 标题
		/// </summary>
		
		public virtual string ShortMessageTitle
		{
			get { return _shortMessageTitle; }

			set	
			{

				if( value != null && value.Length > 400)
					throw new ArgumentOutOfRangeException("Invalid value for ShortMessageTitle", value, value.ToString());
				_isChanged |= (_shortMessageTitle != value); _shortMessageTitle = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		
		public virtual string ShortMessageCategory
		{
			get { return _shortMessageCategory; }

			set	
			{

				if( value != null && value.Length > 400)
					throw new ArgumentOutOfRangeException("Invalid value for ShortMessageCategory", value, value.ToString());
				_isChanged |= (_shortMessageCategory != value); _shortMessageCategory = value;
			}
		}

		/// <summary>
		/// 内容
		/// </summary>
		
		public virtual string ShortMessageContent
		{
			get { return _shortMessageContent; }

			set	
			{

				if( value != null && value.Length > 8000)
					throw new ArgumentOutOfRangeException("Invalid value for ShortMessageContent", value, value.ToString());
				_isChanged |= (_shortMessageContent != value); _shortMessageContent = value;
			}
		}

		/// <summary>
		/// 发送者ID
		/// </summary>
		
		public virtual string ShortMessageSender
		{
			get { return _shortMessageSender; }

			set	
			{

				if( value != null && value.Length > 400)
					throw new ArgumentOutOfRangeException("Invalid value for ShortMessageSender", value, value.ToString());
				_isChanged |= (_shortMessageSender != value); _shortMessageSender = value;
			}
		}

		/// <summary>
		/// 发送日期
		/// </summary>
		
		public virtual DateTime ShortMessageSendDate
		{
			get { return _shortMessageSendDate; }

			set	
			{
				_isChanged |= (_shortMessageSendDate != value); _shortMessageSendDate = value;
			}
		}

		/// <summary>
		/// 接受者ID
		/// </summary>
		
		public virtual int ShortMessageReceiverID
		{
			get { return _shortMessageReceiverID; }

			set	
			{
				_isChanged |= (_shortMessageReceiverID != value); _shortMessageReceiverID = value;
			}
		}

		/// <summary>
		/// 是否已读
		/// </summary>
		
		public virtual bool ShortMessageIsRead
		{
			get { return _shortMessageIsRead; }

			set	
			{
				_isChanged |= (_shortMessageIsRead != value); _shortMessageIsRead = value;
			}
		}
		/// <summary>
		/// 返回对象是否被改变。
		/// </summary>
		public virtual bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public virtual bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 

        #region 公共方法
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public virtual void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion

		#region Equals 和 HashCode 方法覆盖
		/// <summary>
		/// local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals( object obj )
		{
			if( this == obj ) return true;
			
			if( ( obj == null ) || ( obj.GetType() != this.GetType() ) ) return false;
			
			SystemShortMessageEntity castObj = (SystemShortMessageEntity)obj;
			
			return ( castObj != null ) && ( this._shortMessageID == castObj.ShortMessageID );
		}
		
		/// <summary>
		/// local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			
			int hash = 57; 
			hash = 27 * hash * _shortMessageID.GetHashCode();

			return hash; 
		}
		#endregion
	
		#region ICloneable methods
		
		public virtual object Clone()
		{
			return this.MemberwiseClone();
		}
		
		#endregion
	
	}
}
