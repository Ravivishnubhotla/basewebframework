// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using Spring.Context.Support;
using Common.Logging;
using Legendigital.Framework.Common.BaseFramework.Entity.Tables;
using Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables.Container;
using Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables;

namespace Legendigital.Framework.Common.BaseFramework.Bussiness.Wrappers
{
    public partial class SystemPersonalizationSettingsWrapper
    {
        #region Member

		internal static readonly ISystemPersonalizationSettingsServiceProxy businessProxy = ((Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables.Container.BaseFrameworkServiceProxyContainer)(ContextRegistry.GetContext().GetObject("BaseFrameworkServiceProxyContainerIocID", typeof(Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables.Container.BaseFrameworkServiceProxyContainer)))).SystemPersonalizationSettingsServiceProxyInstance;
		//internal static readonly ISystemPersonalizationSettingsServiceProxy businessProxy = ((ServiceProxyContainer)(ContextRegistry.GetContext().GetObject("ServiceProxyContainerIocID"))).SystemPersonalizationSettingsServiceProxyInstance;

        internal SystemPersonalizationSettingsEntity entity;
		
		private static ILog logger = null;

        public static ILog Logger
        {
            get
            {
                if (logger == null)
                    logger = LogManager.GetLogger(typeof(SystemPersonalizationSettingsWrapper));
                return logger;
            }
        }

        #endregion

        #region Construtor
        public SystemPersonalizationSettingsWrapper() : this(new SystemPersonalizationSettingsEntity())
        {
            
        }

        internal SystemPersonalizationSettingsWrapper(SystemPersonalizationSettingsEntity entityObj)
        {
            entity = entityObj;
        }
		#endregion
		
		#region Equals 和 HashCode 方法覆盖
		public override bool Equals(object obj)
        {
            if (obj == null && entity!=null)
            {
                if (entity.PersonalizationID == 0)
                    return true;

                return false;
            }
            return entity.Equals(obj);
        }

        public override int GetHashCode()
        {
            return entity.GetHashCode();
        }
		#endregion
		
        #region 公共常量

		public static readonly string CLASS_FULL_NAME = "Legendigital.Framework.Common.BaseFramework.Entity.Tables.SystemPersonalizationSettingsEntity";
		public static readonly string PROPERTY_NAME_PERSONALIZATIONID = "PersonalizationID";
		public static readonly string PROPERTY_NAME_APPLICATIONID = "ApplicationID";
		public static readonly string PROPERTY_NAME_USERID = "UserId";
		public static readonly string PROPERTY_NAME_PATH = "Path";
		public static readonly string PROPERTY_NAME_PAGESETTINGS = "PageSettings";
		public static readonly string PROPERTY_NAME_LASTUPDATEDDATE = "LastUpdatedDate";
		
        #endregion


		#region Public Property
		/// <summary>
		/// 
		/// </summary>		
		public int PersonalizationID
		{
			get
			{
				return entity.PersonalizationID;
			}
			set
			{
				entity.PersonalizationID = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public SystemApplicationWrapper ApplicationID
		{
			get
			{
				return SystemApplicationWrapper.ConvertEntityToWrapper(entity.ApplicationID) ;
			}
			set
			{
				entity.ApplicationID = ((value == null) ? null : value.entity);
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public SystemUserWrapper UserId
		{
			get
			{
				return SystemUserWrapper.ConvertEntityToWrapper(entity.UserId) ;
			}
			set
			{
				entity.UserId = ((value == null) ? null : value.entity);
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string Path
		{
			get
			{
				return entity.Path;
			}
			set
			{
				entity.Path = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public byte[] PageSettings
		{
			get
			{
				return entity.PageSettings;
			}
			set
			{
				entity.PageSettings = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public DateTime? LastUpdatedDate
		{
			get
			{
				return entity.LastUpdatedDate;
			}
			set
			{
				entity.LastUpdatedDate = value;
			}
		}
		#endregion 







        #region Static Common Data Operation
		
		internal static List<SystemPersonalizationSettingsWrapper> ConvertToWrapperList(List<SystemPersonalizationSettingsEntity> entitylist)
        {
            List<SystemPersonalizationSettingsWrapper> list = new List<SystemPersonalizationSettingsWrapper>();
            foreach (SystemPersonalizationSettingsEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }

		internal static List<SystemPersonalizationSettingsWrapper> ConvertToWrapperList(IList<SystemPersonalizationSettingsEntity> entitylist)
        {
            List<SystemPersonalizationSettingsWrapper> list = new List<SystemPersonalizationSettingsWrapper>();
            foreach (SystemPersonalizationSettingsEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }
		
		internal static List<SystemPersonalizationSettingsEntity> ConvertToEntityList(List<SystemPersonalizationSettingsWrapper> wrapperlist)
        {
            List<SystemPersonalizationSettingsEntity> list = new List<SystemPersonalizationSettingsEntity>();
            foreach (SystemPersonalizationSettingsWrapper wrapper in wrapperlist)
            {
                list.Add(wrapper.entity);
            }
            return list;
        }

        internal static SystemPersonalizationSettingsWrapper ConvertEntityToWrapper(SystemPersonalizationSettingsEntity entity)
        {
            if (entity == null)
                return null;
				
            if (entity.PersonalizationID == 0)
                return null;

            return new SystemPersonalizationSettingsWrapper(entity);
        }
		
		#endregion

    }//End Class
}// End Namespace

