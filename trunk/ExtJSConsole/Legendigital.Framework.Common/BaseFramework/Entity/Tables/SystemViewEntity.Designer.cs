// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;

namespace Legendigital.Framework.Common.BaseFramework.Entity.Tables
{
	/// <summary>
	///	
	/// </summary>
	[DataContract]
	public partial class SystemViewEntity : ICloneable
	{
        #region 公共常量

		public static readonly string CLASS_FULL_NAME = "Legendigital.Framework.Common.BaseFramework.Entity.Tables.SystemViewEntity";
		public static readonly string PROPERTY_NAME_SYSTEMVIEWID = "SystemViewID";
		public static readonly string PROPERTY_NAME_SYSTEMVIEWNAMECN = "SystemViewNameCn";
		public static readonly string PROPERTY_NAME_SYSTEMVIEWNAMEEN = "SystemViewNameEn";
		public static readonly string PROPERTY_NAME_APPLICATIONID = "ApplicationID";
		public static readonly string PROPERTY_NAME_SYSTEMVIEWDESCRIPTION = "SystemViewDescription";
		
        #endregion
	
        #region 私有成员变量

		private bool _isChanged;		
		private bool _isDeleted;
		
		private int _systemViewID;
		private string _systemViewNameCn;
		private string _systemViewNameEn;
		private SystemApplicationEntity _applicationID;
		private string _systemViewDescription;
		
		#endregion

		#region 构造函数
		/// <summary>
		/// 默认构造函数
		/// </summary>
		public SystemViewEntity()
		{
			_systemViewID = 0;
			_systemViewNameCn = null;
			_systemViewNameEn = null;
			_applicationID = null;
			_systemViewDescription = null;
		}
		#endregion

		#region 全构造函数
		/// <summary>
		/// 全构造函数
		/// </summary>
		public SystemViewEntity( int systemViewID, string systemViewNameCn, string systemViewNameEn, SystemApplicationEntity applicationID, string systemViewDescription)
		{
			_systemViewID = systemViewID;
			_systemViewNameCn = systemViewNameCn;
			_systemViewNameEn = systemViewNameEn;
			_applicationID = applicationID;
			_systemViewDescription = systemViewDescription;
		}
		#endregion     
	
	    #region 公共属性

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual int SystemViewID
		{
			get { return _systemViewID; }

			set	
			{
				_isChanged |= (_systemViewID != value); _systemViewID = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string SystemViewNameCn
		{
			get { return _systemViewNameCn; }

			set	
			{

				if( value != null && value.Length > 800)
					throw new ArgumentOutOfRangeException("Invalid value for SystemViewNameCn", value, value.ToString());
				_isChanged |= (_systemViewNameCn != value); _systemViewNameCn = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string SystemViewNameEn
		{
			get { return _systemViewNameEn; }

			set	
			{

				if( value != null && value.Length > 800)
					throw new ArgumentOutOfRangeException("Invalid value for SystemViewNameEn", value, value.ToString());
				_isChanged |= (_systemViewNameEn != value); _systemViewNameEn = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual SystemApplicationEntity ApplicationID
		{
			get { return _applicationID; }

			set	
			{
				_isChanged |= (_applicationID != value); _applicationID = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string SystemViewDescription
		{
			get { return _systemViewDescription; }

			set	
			{

				if( value != null && value.Length > 8000)
					throw new ArgumentOutOfRangeException("Invalid value for SystemViewDescription", value, value.ToString());
				_isChanged |= (_systemViewDescription != value); _systemViewDescription = value;
			}
		}
		/// <summary>
		/// 返回对象是否被改变。
		/// </summary>
		public virtual bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public virtual bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 

        #region 公共方法
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public virtual void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion

		#region Equals 和 HashCode 方法覆盖
		/// <summary>
		/// local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals( object obj )
		{
			if( this == obj ) return true;
			
			if( ( obj == null ) || ( obj.GetType() != this.GetType() ) ) return false;
			
			SystemViewEntity castObj = (SystemViewEntity)obj;
			
			return ( castObj != null ) && ( this._systemViewID == castObj.SystemViewID );
		}
		
		/// <summary>
		/// local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			
			int hash = 57; 
			hash = 27 * hash * _systemViewID.GetHashCode();

			return hash; 
		}
		#endregion
	
		#region ICloneable methods
		
		public virtual object Clone()
		{
			return this.MemberwiseClone();
		}
		
		#endregion
	
	}
}
