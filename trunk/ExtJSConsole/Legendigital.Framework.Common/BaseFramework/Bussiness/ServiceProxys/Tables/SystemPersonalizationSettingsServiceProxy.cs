// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using Legendigital.Framework.Common.Bussiness.Interfaces;
using Legendigital.Framework.Common.Data.Interfaces;
using Legendigital.Framework.Common.Bussiness.NHibernate;
using Legendigital.Framework.Common.BaseFramework.Data.Tables;
using Legendigital.Framework.Common.BaseFramework.Entity.Tables;
using Spring.Transaction.Interceptor;


namespace Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables
{
	public interface ISystemPersonalizationSettingsServiceProxy : IBaseSpringNHibernateEntityServiceProxy<SystemPersonalizationSettingsEntity>
    {
        void LoadPersonalizationBlobs(string path, string userName, ref byte[] userDataBlob);
        void ResetPersonalizationBlob(string path, string userName);
        void SavePersonalizationBlob(string path, string userName, byte[] dataBlob);
    }

    public partial class SystemPersonalizationSettingsServiceProxy : ISystemPersonalizationSettingsServiceProxy
    {
        public void LoadPersonalizationBlobs(string path, string userName, ref byte[] userDataBlob)
        {
            SystemUserEntity userEntity =
                this.DataObjectsContainerIocID.SystemUserDataObjectInstance.GetUserByLoginID(userName);

            if (userEntity == null)
                throw new ArgumentException("User name '" + userName + "' not existed. ", "userName");

            SystemPersonalizationSettingsEntity systemPersonalizationSettingsEntity = this.SelfDataObj.FindByUserAndPath(userEntity, path);

            if (systemPersonalizationSettingsEntity != null)
                userDataBlob = systemPersonalizationSettingsEntity.PageSettings;
            else
                userDataBlob = null;
        }

        [Transaction(ReadOnly = false)]
        public void ResetPersonalizationBlob(string path, string userName)
        {
            SystemUserEntity userEntity =
               this.DataObjectsContainerIocID.SystemUserDataObjectInstance.GetUserByLoginID(userName);

            if (userEntity == null)
                throw new ArgumentException("User name '" + userName + "' not existed. ", "userName");

            SystemPersonalizationSettingsEntity systemPersonalizationSettingsEntity = this.SelfDataObj.FindByUserAndPath(userEntity, path);

            if (systemPersonalizationSettingsEntity != null)
                this.SelfDataObj.Delete(systemPersonalizationSettingsEntity);
        }

        [Transaction(ReadOnly = false)]
        public void SavePersonalizationBlob(string path, string userName, byte[] dataBlob)
        {
            SystemUserEntity userEntity =
                this.DataObjectsContainerIocID.SystemUserDataObjectInstance.GetUserByLoginID(userName);

            if (userEntity == null)
                throw new ArgumentException("User name '" + userName + "' not existed. ", "userName");

            SystemPersonalizationSettingsEntity systemPersonalizationSettingsEntity = this.SelfDataObj.FindByUserAndPath(userEntity, path);

            if (systemPersonalizationSettingsEntity != null)
            {
                systemPersonalizationSettingsEntity.PageSettings = dataBlob;
                systemPersonalizationSettingsEntity.LastUpdatedDate = System.DateTime.Now;
                this.SelfDataObj.Update(systemPersonalizationSettingsEntity);
            }
            else
            {
                systemPersonalizationSettingsEntity = new SystemPersonalizationSettingsEntity();
                systemPersonalizationSettingsEntity.LastUpdatedDate = System.DateTime.Now;
                systemPersonalizationSettingsEntity.UserId = userEntity;
                systemPersonalizationSettingsEntity.Path = path;
                systemPersonalizationSettingsEntity.PageSettings = dataBlob;
                this.SelfDataObj.Save(systemPersonalizationSettingsEntity);
            }

        }
    }
}
