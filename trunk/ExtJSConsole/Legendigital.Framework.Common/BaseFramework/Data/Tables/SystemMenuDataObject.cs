// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using Legendigital.Framework.Common.Data.NHibernate.Extend;
using NHibernate.Criterion;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;
using Legendigital.Framework.Common.BaseFramework.Entity.Tables;
using Legendigital.Framework.Common.Data.NHibernate;

namespace Legendigital.Framework.Common.BaseFramework.Data.Tables
{
    public partial class SystemMenuDataObject
    {
        public List<SystemMenuEntity> GetMenuByApplication(SystemApplicationEntity app)
        {
            NHibernateDynamicQueryGenerator<SystemMenuEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            //指定查询条件
            dynamicQueryGenerator.AddWhereClause(SystemMenuDataObject.PROPERTY_APPLICATIONID.Eq(app));
            //指定排序规则
            dynamicQueryGenerator.AddOrderBy(SystemMenuDataObject.PROPERTY_MENUORDER.Asc());
            dynamicQueryGenerator.AddOrderBy(SystemMenuDataObject.PROPERTY_MENUID.Desc());

            return this.FindListByQueryBuilder(dynamicQueryGenerator);
        }




        public SystemMenuEntity GetNewMaxMenuByParentMenuAndApplication(SystemMenuEntity entity, SystemApplicationEntity applicationEntity)
        {
            NHibernateDynamicQueryGenerator<SystemMenuEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            //指定查询条件
            dynamicQueryGenerator.AddWhereClause(SystemMenuDataObject.PROPERTY_APPLICATIONID.Eq(applicationEntity));
            if (entity != null)
                dynamicQueryGenerator.AddWhereClause(SystemMenuDataObject.PROPERTY_PARENTMENUID.Eq(entity));
            else
                dynamicQueryGenerator.AddWhereClause(SystemMenuDataObject.PROPERTY_PARENTMENUID.IsNull());
            //指定排序规则
            dynamicQueryGenerator.AddOrderBy(SystemMenuDataObject.PROPERTY_MENUORDER.Desc());

            return this.FindSingleEntityByQueryBuilder(dynamicQueryGenerator);
        }

        public List<SystemMenuEntity> GetMenuByParentID(SystemMenuEntity menuEntity)
        {
            NHibernateDynamicQueryGenerator<SystemMenuEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            //指定查询条件
            if (menuEntity != null)
                dynamicQueryGenerator.AddWhereClause(SystemMenuDataObject.PROPERTY_PARENTMENUID.Eq(menuEntity));
            else
                dynamicQueryGenerator.AddWhereClause(SystemMenuDataObject.PROPERTY_PARENTMENUID.IsNull());
            //指定排序规则
            dynamicQueryGenerator.AddOrderBy(SystemMenuDataObject.PROPERTY_MENUORDER.Asc());

            return this.FindListByQueryBuilder(dynamicQueryGenerator);
        }

        /// <summary>
        /// 对Menu进行排序处理，按照父菜单
        /// </summary>
        /// <param name="menuIDs"></param>
        /// <returns></returns>
        public List<SystemMenuEntity> SortMenu(List<int> menuIDs)
        {
            NHibernateDynamicQueryGenerator<SystemMenuEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_MENUID.In(menuIDs));

            dynamicQueryGenerator.AddOrderBy(PROPERTY_PARENTMENUID.Asc());

            dynamicQueryGenerator.AddOrderBy(PROPERTY_MENUORDER.Asc());

            return this.FindListByQueryBuilder(dynamicQueryGenerator);
        }

        /// <summary>
        /// 查找所有的可用的菜单
        /// </summary>
        /// <returns></returns>
        public IList<SystemMenuEntity> GetAllAviableMenu()
        {
            NHibernateDynamicQueryGenerator<SystemMenuEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_MENUISENABLE.Eq(true));

            dynamicQueryGenerator.AddOrderBy(PROPERTY_MENUORDER.Asc());

            return this.FindListByQueryBuilder(dynamicQueryGenerator);
        }
    }
}
