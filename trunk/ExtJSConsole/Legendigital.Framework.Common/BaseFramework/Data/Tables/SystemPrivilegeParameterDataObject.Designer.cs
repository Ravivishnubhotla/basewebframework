// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using NHibernate.Criterion;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;
using Legendigital.Framework.Common.BaseFramework.Entity.Tables;
using Legendigital.Framework.Common.Data.NHibernate;


namespace Legendigital.Framework.Common.BaseFramework.Data.Tables
{
    public partial class SystemPrivilegeParameterDataObject : BaseNHibernateDataObject<SystemPrivilegeParameterEntity>
    {
				#region Expression Query Property (标准查询字段)
		public static readonly Property PROPERTY_PRIVILEGEPARAMETERID = Property.ForName(SystemPrivilegeParameterEntity.PROPERTY_NAME_PRIVILEGEPARAMETERID);
		public static readonly Property PROPERTY_ROLEID = Property.ForName(SystemPrivilegeParameterEntity.PROPERTY_NAME_ROLEID);
		#region roleID字段外键查询字段
        public static NHibernateDynamicQueryGenerator<SystemPrivilegeParameterEntity> InClude_RoleID_Query(NHibernateDynamicQueryGenerator<SystemPrivilegeParameterEntity> queryGenerator)
        {
            return queryGenerator.AddAlians(SystemPrivilegeParameterEntity.PROPERTY_NAME_ROLEID, PROPERTY_ROLEID_ALIAS_NAME);
        }
        public static readonly string PROPERTY_ROLEID_ALIAS_NAME = "RoleID_SystemPrivilegeParameterEntity_Alias";
		public static readonly Property PROPERTY_ROLEID_ROLEID = Property.ForName(PROPERTY_ROLEID_ALIAS_NAME + ".RoleID");
		public static readonly Property PROPERTY_ROLEID_ROLENAME = Property.ForName(PROPERTY_ROLEID_ALIAS_NAME + ".RoleName");
		public static readonly Property PROPERTY_ROLEID_ROLEDESCRIPTION = Property.ForName(PROPERTY_ROLEID_ALIAS_NAME + ".RoleDescription");
		public static readonly Property PROPERTY_ROLEID_ROLEISSYSTEMROLE = Property.ForName(PROPERTY_ROLEID_ALIAS_NAME + ".RoleIsSystemRole");
		#endregion
		public static readonly Property PROPERTY_PRIVILEGEID = Property.ForName(SystemPrivilegeParameterEntity.PROPERTY_NAME_PRIVILEGEID);
		#region privilegeID字段外键查询字段
        public static NHibernateDynamicQueryGenerator<SystemPrivilegeParameterEntity> InClude_PrivilegeID_Query(NHibernateDynamicQueryGenerator<SystemPrivilegeParameterEntity> queryGenerator)
        {
            return queryGenerator.AddAlians(SystemPrivilegeParameterEntity.PROPERTY_NAME_PRIVILEGEID, PROPERTY_PRIVILEGEID_ALIAS_NAME);
        }
        public static readonly string PROPERTY_PRIVILEGEID_ALIAS_NAME = "PrivilegeID_SystemPrivilegeParameterEntity_Alias";
		public static readonly Property PROPERTY_PRIVILEGEID_PRIVILEGEID = Property.ForName(PROPERTY_PRIVILEGEID_ALIAS_NAME + ".PrivilegeID");
		public static readonly Property PROPERTY_PRIVILEGEID_OPERATIONID = Property.ForName(PROPERTY_PRIVILEGEID_ALIAS_NAME + ".OperationID");
		public static readonly Property PROPERTY_PRIVILEGEID_RESOURCESID = Property.ForName(PROPERTY_PRIVILEGEID_ALIAS_NAME + ".ResourcesID");
		public static readonly Property PROPERTY_PRIVILEGEID_PRIVILEGECNNAME = Property.ForName(PROPERTY_PRIVILEGEID_ALIAS_NAME + ".PrivilegeCnName");
		public static readonly Property PROPERTY_PRIVILEGEID_PRIVILEGEENNAME = Property.ForName(PROPERTY_PRIVILEGEID_ALIAS_NAME + ".PrivilegeEnName");
		public static readonly Property PROPERTY_PRIVILEGEID_DEFAULTVALUE = Property.ForName(PROPERTY_PRIVILEGEID_ALIAS_NAME + ".DefaultValue");
		public static readonly Property PROPERTY_PRIVILEGEID_DESCRIPTION = Property.ForName(PROPERTY_PRIVILEGEID_ALIAS_NAME + ".Description");
		public static readonly Property PROPERTY_PRIVILEGEID_PRIVILEGEORDER = Property.ForName(PROPERTY_PRIVILEGEID_ALIAS_NAME + ".PrivilegeOrder");
		public static readonly Property PROPERTY_PRIVILEGEID_PRIVILEGECATEGORY = Property.ForName(PROPERTY_PRIVILEGEID_ALIAS_NAME + ".PrivilegeCategory");
		#endregion
		public static readonly Property PROPERTY_BIZPARAMETER = Property.ForName(SystemPrivilegeParameterEntity.PROPERTY_NAME_BIZPARAMETER);
      
		#region 子类集合字段查询字段
	
		#endregion

		#endregion

		
		public override string[] PkPropertyName
        {
            get { return new string[] { "PrivilegeParameterID" }; }
        }
		
		public override Type GetFieldTypeByFieldName(string fieldName)
        {
			switch (fieldName)
            {
                case "PrivilegeParameterID":
                    return typeof (int);
                case "RoleID":
                    return typeof (int);
                case "PrivilegeID":
                    return typeof (int);
                case "BizParameter":
                    return typeof (string);
          }
			return typeof(string);
        }
    }
}
