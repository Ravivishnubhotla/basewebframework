// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using NHibernate.Criterion;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;
using Legendigital.Framework.Common.BaseFramework.Entity.Tables;
using Legendigital.Framework.Common.Data.NHibernate;


namespace Legendigital.Framework.Common.BaseFramework.Data.Tables
{
    public partial class SystemViewDataObject : BaseNHibernateDataObject<SystemViewEntity>
    {
				#region Expression Query Property (标准查询字段)
		public static readonly Property PROPERTY_SYSTEMVIEWID = Property.ForName(SystemViewEntity.PROPERTY_NAME_SYSTEMVIEWID);
		public static readonly Property PROPERTY_SYSTEMVIEWNAMECN = Property.ForName(SystemViewEntity.PROPERTY_NAME_SYSTEMVIEWNAMECN);
		public static readonly Property PROPERTY_SYSTEMVIEWNAMEEN = Property.ForName(SystemViewEntity.PROPERTY_NAME_SYSTEMVIEWNAMEEN);
		public static readonly Property PROPERTY_APPLICATIONID = Property.ForName(SystemViewEntity.PROPERTY_NAME_APPLICATIONID);
		#region applicationID字段外键查询字段
        public static NHibernateDynamicQueryGenerator<SystemViewEntity> InClude_ApplicationID_Query(NHibernateDynamicQueryGenerator<SystemViewEntity> queryGenerator)
        {
            return queryGenerator.AddAlians(SystemViewEntity.PROPERTY_NAME_APPLICATIONID, PROPERTY_APPLICATIONID_ALIAS_NAME);
        }
        public static readonly string PROPERTY_APPLICATIONID_ALIAS_NAME = "ApplicationID_SystemViewEntity_Alias";
		public static readonly Property PROPERTY_APPLICATIONID_SYSTEMAPPLICATIONID = Property.ForName(PROPERTY_APPLICATIONID_ALIAS_NAME + ".SystemApplicationID");
		public static readonly Property PROPERTY_APPLICATIONID_SYSTEMAPPLICATIONNAME = Property.ForName(PROPERTY_APPLICATIONID_ALIAS_NAME + ".SystemApplicationName");
		public static readonly Property PROPERTY_APPLICATIONID_SYSTEMAPPLICATIONDESCRIPTION = Property.ForName(PROPERTY_APPLICATIONID_ALIAS_NAME + ".SystemApplicationDescription");
		public static readonly Property PROPERTY_APPLICATIONID_SYSTEMAPPLICATIONURL = Property.ForName(PROPERTY_APPLICATIONID_ALIAS_NAME + ".SystemApplicationUrl");
		public static readonly Property PROPERTY_APPLICATIONID_SYSTEMAPPLICATIONISSYSTEMAPPLICATION = Property.ForName(PROPERTY_APPLICATIONID_ALIAS_NAME + ".SystemApplicationIsSystemApplication");
		#endregion
		public static readonly Property PROPERTY_SYSTEMVIEWDESCRIPTION = Property.ForName(SystemViewEntity.PROPERTY_NAME_SYSTEMVIEWDESCRIPTION);
		public static readonly Property PROPERTY_SYSTEMMOUDLEID = Property.ForName(SystemViewEntity.PROPERTY_NAME_SYSTEMMOUDLEID);
		#region systemMoudleID字段外键查询字段
        public static NHibernateDynamicQueryGenerator<SystemViewEntity> InClude_SystemMoudleID_Query(NHibernateDynamicQueryGenerator<SystemViewEntity> queryGenerator)
        {
            return queryGenerator.AddAlians(SystemViewEntity.PROPERTY_NAME_SYSTEMMOUDLEID, PROPERTY_SYSTEMMOUDLEID_ALIAS_NAME);
        }
        public static readonly string PROPERTY_SYSTEMMOUDLEID_ALIAS_NAME = "SystemMoudleID_SystemViewEntity_Alias";
		public static readonly Property PROPERTY_SYSTEMMOUDLEID_MOUDLEID = Property.ForName(PROPERTY_SYSTEMMOUDLEID_ALIAS_NAME + ".MoudleID");
		public static readonly Property PROPERTY_SYSTEMMOUDLEID_MOUDLENAMECN = Property.ForName(PROPERTY_SYSTEMMOUDLEID_ALIAS_NAME + ".MoudleNameCn");
		public static readonly Property PROPERTY_SYSTEMMOUDLEID_MOUDLENAMEEN = Property.ForName(PROPERTY_SYSTEMMOUDLEID_ALIAS_NAME + ".MoudleNameEn");
		public static readonly Property PROPERTY_SYSTEMMOUDLEID_MOUDLENAMEDB = Property.ForName(PROPERTY_SYSTEMMOUDLEID_ALIAS_NAME + ".MoudleNameDb");
		public static readonly Property PROPERTY_SYSTEMMOUDLEID_MOUDLEDESCRIPTION = Property.ForName(PROPERTY_SYSTEMMOUDLEID_ALIAS_NAME + ".MoudleDescription");
		public static readonly Property PROPERTY_SYSTEMMOUDLEID_APPLICATIONID = Property.ForName(PROPERTY_SYSTEMMOUDLEID_ALIAS_NAME + ".ApplicationID");
		public static readonly Property PROPERTY_SYSTEMMOUDLEID_MOUDLEISSYSTEMMOUDLE = Property.ForName(PROPERTY_SYSTEMMOUDLEID_ALIAS_NAME + ".MoudleIsSystemMoudle");
		#endregion
      
		#region 子类集合字段查询字段
	
		#endregion

		#endregion

		
		public override string[] PkPropertyName
        {
            get { return new string[] { "SystemViewID" }; }
        }
		
		public override Type GetFieldTypeByFieldName(string fieldName)
        {
			switch (fieldName)
            {
                case "SystemViewID":
                    return typeof (int);
                case "SystemViewNameCn":
                    return typeof (string);
                case "SystemViewNameEn":
                    return typeof (string);
                case "ApplicationID":
                    return typeof (int);
                case "SystemViewDescription":
                    return typeof (string);
                case "SystemMoudleID":
                    return typeof (int);
          }
			return typeof(string);
        }
    }
}
