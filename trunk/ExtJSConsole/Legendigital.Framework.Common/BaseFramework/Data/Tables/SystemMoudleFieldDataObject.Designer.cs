// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using NHibernate.Criterion;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;
using Legendigital.Framework.Common.BaseFramework.Entity.Tables;
using Legendigital.Framework.Common.Data.NHibernate;


namespace Legendigital.Framework.Common.BaseFramework.Data.Tables
{
    public partial class SystemMoudleFieldDataObject : BaseNHibernateDataObject<SystemMoudleFieldEntity>
    {
				#region Expression Query Property (标准查询字段)
		public static readonly Property PROPERTY_SYSTEMMOUDLEFIELDID = Property.ForName(SystemMoudleFieldEntity.PROPERTY_NAME_SYSTEMMOUDLEFIELDID);
		public static readonly Property PROPERTY_SYSTEMMOUDLEFIELDNAMEEN = Property.ForName(SystemMoudleFieldEntity.PROPERTY_NAME_SYSTEMMOUDLEFIELDNAMEEN);
		public static readonly Property PROPERTY_SYSTEMMOUDLEFIELDNAMECN = Property.ForName(SystemMoudleFieldEntity.PROPERTY_NAME_SYSTEMMOUDLEFIELDNAMECN);
		public static readonly Property PROPERTY_SYSTEMMOUDLEFIELDNAMEDB = Property.ForName(SystemMoudleFieldEntity.PROPERTY_NAME_SYSTEMMOUDLEFIELDNAMEDB);
		public static readonly Property PROPERTY_SYSTEMMOUDLEFIELDTYPE = Property.ForName(SystemMoudleFieldEntity.PROPERTY_NAME_SYSTEMMOUDLEFIELDTYPE);
		public static readonly Property PROPERTY_SYSTEMMOUDLEFIELDISREQUIRED = Property.ForName(SystemMoudleFieldEntity.PROPERTY_NAME_SYSTEMMOUDLEFIELDISREQUIRED);
		public static readonly Property PROPERTY_SYSTEMMOUDLEFIELDDEFAULTVALUE = Property.ForName(SystemMoudleFieldEntity.PROPERTY_NAME_SYSTEMMOUDLEFIELDDEFAULTVALUE);
		public static readonly Property PROPERTY_SYSTEMMOUDLEFIELDISKEYFIELD = Property.ForName(SystemMoudleFieldEntity.PROPERTY_NAME_SYSTEMMOUDLEFIELDISKEYFIELD);
		public static readonly Property PROPERTY_SYSTEMMOUDLEFIELDSIZE = Property.ForName(SystemMoudleFieldEntity.PROPERTY_NAME_SYSTEMMOUDLEFIELDSIZE);
		public static readonly Property PROPERTY_SYSTEMMOUDLEFIELDDESCRIPTION = Property.ForName(SystemMoudleFieldEntity.PROPERTY_NAME_SYSTEMMOUDLEFIELDDESCRIPTION);
		public static readonly Property PROPERTY_SYSTEMMOUDLEID = Property.ForName(SystemMoudleFieldEntity.PROPERTY_NAME_SYSTEMMOUDLEID);
		#region systemMoudleID字段外键查询字段
        public static NHibernateDynamicQueryGenerator<SystemMoudleFieldEntity> InClude_SystemMoudleID_Query(NHibernateDynamicQueryGenerator<SystemMoudleFieldEntity> queryGenerator)
        {
            return queryGenerator.AddAlians(SystemMoudleFieldEntity.PROPERTY_NAME_SYSTEMMOUDLEID, PROPERTY_SYSTEMMOUDLEID_ALIAS_NAME);
        }
        public static readonly string PROPERTY_SYSTEMMOUDLEID_ALIAS_NAME = "SystemMoudleID_SystemMoudleFieldEntity_Alias";
		public static readonly Property PROPERTY_SYSTEMMOUDLEID_MOUDLEID = Property.ForName(PROPERTY_SYSTEMMOUDLEID_ALIAS_NAME + ".MoudleID");
		public static readonly Property PROPERTY_SYSTEMMOUDLEID_MOUDLENAMECN = Property.ForName(PROPERTY_SYSTEMMOUDLEID_ALIAS_NAME + ".MoudleNameCn");
		public static readonly Property PROPERTY_SYSTEMMOUDLEID_MOUDLENAMEEN = Property.ForName(PROPERTY_SYSTEMMOUDLEID_ALIAS_NAME + ".MoudleNameEn");
		public static readonly Property PROPERTY_SYSTEMMOUDLEID_MOUDLENAMEDB = Property.ForName(PROPERTY_SYSTEMMOUDLEID_ALIAS_NAME + ".MoudleNameDb");
		public static readonly Property PROPERTY_SYSTEMMOUDLEID_MOUDLEDESCRIPTION = Property.ForName(PROPERTY_SYSTEMMOUDLEID_ALIAS_NAME + ".MoudleDescription");
		public static readonly Property PROPERTY_SYSTEMMOUDLEID_APPLICATIONID = Property.ForName(PROPERTY_SYSTEMMOUDLEID_ALIAS_NAME + ".ApplicationID");
		public static readonly Property PROPERTY_SYSTEMMOUDLEID_MOUDLEISSYSTEMMOUDLE = Property.ForName(PROPERTY_SYSTEMMOUDLEID_ALIAS_NAME + ".MoudleIsSystemMoudle");
		#endregion
      
		#region 子类集合字段查询字段
	
		#endregion

		#endregion

		
		public override string[] PkPropertyName
        {
            get { return new string[] { "SystemMoudleFieldID" }; }
        }
		
		public override Type GetFieldTypeByFieldName(string fieldName)
        {
			switch (fieldName)
            {
                case "SystemMoudleFieldID":
                    return typeof (int);
                    break;
                case "SystemMoudleFieldNameEn":
                    return typeof (string);
                    break;
                case "SystemMoudleFieldNameCn":
                    return typeof (string);
                    break;
                case "SystemMoudleFieldNameDb":
                    return typeof (string);
                    break;
                case "SystemMoudleFieldType":
                    return typeof (string);
                    break;
                case "SystemMoudleFieldIsRequired":
                    return typeof (bool);
                    break;
                case "SystemMoudleFieldDefaultValue":
                    return typeof (string);
                    break;
                case "SystemMoudleFieldIsKeyField":
                    return typeof (bool);
                    break;
                case "SystemMoudleFieldSize":
                    return typeof (int);
                    break;
                case "SystemMoudleFieldDescription":
                    return typeof (string);
                    break;
                case "SystemMoudleID":
                    return typeof (int);
                    break;
          }
			return typeof(string);
        }
    }
}
