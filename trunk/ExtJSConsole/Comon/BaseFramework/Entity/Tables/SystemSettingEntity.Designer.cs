// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;

namespace Legendigital.Framework.Common.BaseFramework.Entity.Tables
{
	/// <summary>
	///	系统设置
	/// </summary>
	public partial class SystemSettingEntity : ICloneable
	{
        #region 公共常量

		public static readonly string CLASS_FULL_NAME = "Legendigital.Framework.Common.BaseFramework.Entity.Tables.SystemSettingEntity";
		public static readonly string PROPERTY_NAME_ID = "Id";
		public static readonly string PROPERTY_NAME_SYSTEMNAME = "SystemName";
		public static readonly string PROPERTY_NAME_SYSTEMDESCRIPTION = "SystemDescription";
		public static readonly string PROPERTY_NAME_SYSTEMURL = "SystemUrl";
		public static readonly string PROPERTY_NAME_SYSTEMVERSION = "SystemVersion";
		public static readonly string PROPERTY_NAME_SYSTEMLISENCE = "SystemLisence";
		
        #endregion
	
        #region 私有成员变量

		private bool _isChanged;		
		private bool _isDeleted;
		
		private int _id;
		private string _systemName;
		private string _systemDescription;
		private string _systemUrl;
		private string _systemVersion;
		private string _systemLisence;
		
		#endregion

		#region 构造函数
		/// <summary>
		/// 默认构造函数
		/// </summary>
		public SystemSettingEntity()
		{
			_id = 0;
			_systemName = String.Empty;
			_systemDescription = null;
			_systemUrl = null;
			_systemVersion = String.Empty;
			_systemLisence = String.Empty;
		}
		#endregion

		#region 全构造函数
		/// <summary>
		/// 全构造函数
		/// </summary>
		public SystemSettingEntity( int id, string systemName, string systemDescription, string systemUrl, string systemVersion, string systemLisence)
		{
			_id = id;
			_systemName = systemName;
			_systemDescription = systemDescription;
			_systemUrl = systemUrl;
			_systemVersion = systemVersion;
			_systemLisence = systemLisence;
		}
		#endregion     
	
	    #region 公共属性

		/// <summary>
		/// 主键
		/// </summary>
		[DataMember]
		public virtual int Id
		{
			get { return _id; }

			set	
			{
				_isChanged |= (_id != value); _id = value;
			}
		}

		/// <summary>
		/// 系统名称
		/// </summary>
		[DataMember]
		public virtual string SystemName
		{
			get { return _systemName; }

			set	
			{

				if( value != null && value.Length > 400)
					throw new ArgumentOutOfRangeException("Invalid value for SystemName", value, value.ToString());
				_isChanged |= (_systemName != value); _systemName = value;
			}
		}

		/// <summary>
		/// 系统描述
		/// </summary>
		[DataMember]
		public virtual string SystemDescription
		{
			get { return _systemDescription; }

			set	
			{

				if( value != null && value.Length > 4000)
					throw new ArgumentOutOfRangeException("Invalid value for SystemDescription", value, value.ToString());
				_isChanged |= (_systemDescription != value); _systemDescription = value;
			}
		}

		/// <summary>
		/// 系统URL
		/// </summary>
		[DataMember]
		public virtual string SystemUrl
		{
			get { return _systemUrl; }

			set	
			{

				if( value != null && value.Length > 400)
					throw new ArgumentOutOfRangeException("Invalid value for SystemUrl", value, value.ToString());
				_isChanged |= (_systemUrl != value); _systemUrl = value;
			}
		}

		/// <summary>
		/// 系统版本
		/// </summary>
		[DataMember]
		public virtual string SystemVersion
		{
			get { return _systemVersion; }

			set	
			{

				if( value != null && value.Length > 400)
					throw new ArgumentOutOfRangeException("Invalid value for SystemVersion", value, value.ToString());
				_isChanged |= (_systemVersion != value); _systemVersion = value;
			}
		}

		/// <summary>
		/// 系统版权声明
		/// </summary>
		[DataMember]
		public virtual string SystemLisence
		{
			get { return _systemLisence; }

			set	
			{

				if( value != null && value.Length > 4000)
					throw new ArgumentOutOfRangeException("Invalid value for SystemLisence", value, value.ToString());
				_isChanged |= (_systemLisence != value); _systemLisence = value;
			}
		}
		/// <summary>
		/// 返回对象是否被改变。
		/// </summary>
		public virtual bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public virtual bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 

        #region 公共方法
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public virtual void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion

		#region Equals 和 HashCode 方法覆盖
		/// <summary>
		/// local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals( object obj )
		{
			if( this == obj ) return true;
			
			if( ( obj == null ) || ( obj.GetType() != this.GetType() ) ) return false;
			
			SystemSettingEntity castObj = (SystemSettingEntity)obj;
			
			return ( castObj != null ) && ( this._id == castObj.Id );
		}
		
		/// <summary>
		/// local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			
			int hash = 57; 
			hash = 27 * hash * _id.GetHashCode();

			return hash; 
		}
		#endregion
	
		#region ICloneable methods
		
		public virtual object Clone()
		{
			return this.MemberwiseClone();
		}
		
		#endregion
	
	}
}
