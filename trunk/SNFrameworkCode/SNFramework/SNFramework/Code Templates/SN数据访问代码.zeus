##|TYPE Template
##|UNIQUEID 2787bb9d-3b21-461c-b4d7-a4cb8a51db92
##|TITLE SN数据访问代码1.0
##|NAMESPACE 
##|SOURCE_TYPE Source
##|OUTPUT_LANGUAGE None
##|GUI_ENGINE .Net Script
##|GUI_LANGUAGE C#
##|GUI_BEGIN
<%#REFERENCE Legendigital.Code.MyGenAddin.dll , System.Windows.Forms.dll, System.Drawing.dll %>
<%#NAMESPACE System.Windows.Forms, System.Drawing ,Legendigital.Code.MyGenAddin.NHibernateFramework %>

public class GeneratedGui : DotNetScriptGui
{
	public GeneratedGui(ZeusContext context) : base(context) {}

	//-----------------------------------------
	// The User Interface Entry Point
	//-----------------------------------------
	public override void Setup()
	{
	
		NHibernateFrameworkTableCodeGenerateForm form = new NHibernateFrameworkTableCodeGenerateForm(MyMeta, input); 
		
		form.Text = "Nhibernate架构业表代码模版";

		if (form.ShowDialog() != DialogResult.OK) 
		{
			ui.IsCanceled = true;
		}
	
	}
	
	
}
##|GUI_END
##|BODY_MODE Markup
##|BODY_ENGINE .Net Script
##|BODY_LANGUAGE C#
##|BODY_TAG_START <%
##|BODY_TAG_END %>
##|BODY_BEGIN
<%#REFERENCE Legendigital.Code.MyGenAddin.dll, System.Windows.Forms.dll,System.Web.dll %><%#NAMESPACE System,System.IO,System.Collections.Generic, System.Text, System.Text.RegularExpressions, System.Globalization, System.Collections, Zeus, Zeus.UserInterface, Zeus.DotNetScript, Microsoft.Win32 ,Dnp.Utils ,Legendigital.Code.MyGenAddin.NHibernateFramework,Legendigital.Code.MyGenAddin,System.Collections.Generic %><%
public class GeneratedTemplate : DotNetScriptTemplate
{
	public GeneratedTemplate(ZeusContext context) : base(context) {}
	
	private Utils utils = new Utils();
	private static readonly string filterClassNameChar = "";
	private bool IsSupportAdo = true;

	//---------------------------------------------------
	// Render() is where you want to write your logic    
	//---------------------------------------------------
	public override void Render()
	{		
		NHibernateFrameworkTableCodeGenerateConfig config = (NHibernateFrameworkTableCodeGenerateConfig)input["codeGenerationSetting"];
		

		
		
		ITable[] selectTables = (ITable[])input["selectObjects"];
		
		IDatabase dataBase = (IDatabase)input["database"];
		
		Dnp.Utils.ProgressDialog pd = CodeGenerateUIHelper.GetNewProgressDialog(selectTables.Length);
		
		pd.Show();
			
		int itbNumber = 0;
		
		List<string> noGenerationTables = new List<string>();
		
		List<ITable> generationTablesArray = new List<ITable>();
				
		foreach( ITable table in selectTables )
		{
			pd.Text = "代码生成中，正在处理“" + table.Alias + "”表...";
			
			List<IColumn> tbPks = config.GetAllPkColumn(table);
			
			if(tbPks.Count<=0 && tbPks.Count>1)
			{
				noGenerationTables.Add(table.Name);
				CodeGenerateUIHelper.ProgressDialogProcessStep(pd);				
				continue;
			}
			
			generationTablesArray.Add(table);
			
			if(config.IsEnbaleEntityCode)
			{
				if(config.IsCreateEntityClassFile)
				{
					CreateEntityClassFile(table,config);
					CreateEntityDesignerClassFile(table,config);
				}
				if(config.IsCreateMappingFile)
				{
					CreateMappingFile(table,config);				
				}
				if(config.IsCreateCollection)
				{
					CreateCollectionFile(table,config);				
				}	
			}
			
			if(config.IsEnbaleDataCode)
			{
				if(config.IsCreateDataObjectClassFile)
				{
					CreateDataObjectClassFile(table,config);
					CreateDataObjectDesignerClassFile(table,config);
				}			
			}
			
			if(config.IsEnbaleBussniessCode)
			{
				if(config.IsCreateServiceProxyClassFile)
				{
					CreateServiceProxyClassFile(table,config);
					CreateServiceProxyDesignerClassFile(table,config);					
				}

				
				if(config.IsGenerateBussinessEncapsulationClass)
				{
					CreateBussinessClassFile(table,config);	
					CreateBussinessDesignerClassFile(table,config);
				}
			}


			
			itbNumber++;
			
			CodeGenerateUIHelper.ProgressDialogProcessStep(pd);		

		}
		
		if(config.IsEnbaleDataCode)
		{
			if(config.IsEnbaleGenerateBaseCode)
			{
				foreach( ITable table in config.GetAllBaseTable(dataBase) )
				{
					CreateBaseDataObjectClassFile(table,config);
				}				
			}
			if(config.IsCreateDataObjectContainerIoCClass)
			{
				GenerateSpringIocDaoClassFile(generationTablesArray.ToArray(),config);
				GenerateSpringIocDaoDesignerClassFile(generationTablesArray.ToArray(),config,dataBase);
			}
			
			if(config.IsCreateDataObjectIocXmlFileName)
			{
				GenerateSpringIocDaoXmlFile(generationTablesArray.ToArray(),config,dataBase);
			}		
			
		}
		
		
		if(config.IsEnbaleBussniessCode && config.IsGenerateServiceProxyContainerClass)
		{
			if(config.IsEnbaleGenerateBaseCode)
			{
				foreach( ITable table in config.GetAllBaseTable(dataBase) )
				{
					//System.Windows.Forms.MessageBox.Show(table.Name);
					CreateBaseServiceProxyClassFile(table,config);
					CreateBaseBussinessClassFile(table,config);
					CreateBaseBussinessDesignerClassFile(table,config);
					
					//CreateBaseBussinessClassFile(table,config);
				}				
			}
			CreateServiceProxyContainerClassFile(config);
			CreateServiceProxyContainerDesignerClassFile(generationTablesArray.ToArray(),config,dataBase);
			GenerateSpringIocBussinessXmlFile(generationTablesArray.ToArray(),config,dataBase);
			GenerateWCFSpringIocBussinessXmlFile(generationTablesArray.ToArray(),config,dataBase);
			GenerateWCFSpringIocWebConfigRefrence(generationTablesArray.ToArray(),config,dataBase);
			GenerateWCFSpringIocWCFSVC(generationTablesArray.ToArray(),config,dataBase);
			
			
		}
		
		pd.Close();
		
		
		
		
%>		一共生成 <%= itbNumber.ToString() %> 个表的代码。
<%			
			if(noGenerationTables.Count>0)
			{
				output.writeln("		以下表未包含主键,或者包含多个主键，代码生成机无法生成：");
				for(int i=0;i<noGenerationTables.Count;i++)
				{
					output.writeln("		"+(i+1).ToString()+". "+noGenerationTables[i]);
				}
			}
			
	}
	
	private void GenerateFileHead()
	{
%>// Generated by MyGeneration Version # (<%= input["__version"].ToString() %>)
<%	
	}
	
	
 	

	
	//生成实体类
	private void CreateEntityClassFile(ITable table ,NHibernateFrameworkTableCodeGenerateConfig config )
	{
		GenerateFileHead(); 
%>using System;

namespace <%= config.EntityNameSpace %>
{
	[Serializable]
	<% if (config.EntityIsInternal) {%>internal<%}else{%>public<%}%> partial class <%= config.GenerateEntityClassName(table) %>
	{
	
	}
}
<%
	output.saveEnc(config.GenerateEntityClassFilePath(table),"d","uft8");
	output.clear();
	}
	
	
	//生成实体设计类
	private void CreateEntityDesignerClassFile(ITable table ,NHibernateFrameworkTableCodeGenerateConfig config )
	{
		GenerateFileHead(); 
%>using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Legendigital.Framework.Common.Entity;

namespace <%= config.EntityNameSpace %>
{
	/// <summary>
	///	<%= config.GenerateClassDescription(table) %>
	/// </summary>
	[DataContract]
	<% if (config.EntityIsInternal) {%>internal<%}else{%>public<%}%> partial class <%= config.GenerateEntityClassName(table) %>  : BaseTableEntity<%if (config.IsimplementICloneable) {%>,ICloneable<%}%>
	{
<% 		BuildPublicConst(table,config); 		
%>	
<% 		BuildPrivateMembers(table,config); 		
%>
<% 		BuildDefaultConstructor(table,config); 		
%>
<% 		BuildFullConstructor(table,config); 		
%>	
<% 		BuildPublicAccessors(table,config); 		
%>
<% 		BuildPublicFunctions(table,config); 
%>
<% 		if( config.IsCreateEqualsAndGetHashCodeFunction ) BuildEqualsHashCodeOverrides(table,config); 
%>	
<% 		if( config.IsimplementICloneable ) ImplementationICloneableFunction(table,config);
%>	
<% 		if( config.IsCreateSubClassListrefence ) CreateSubClassListrefence(table,config);
%>	}
}
<%
	output.saveEnc(config.GenerateEntityDesignerClassFilePath(table),"o","uft8");
	output.clear();
	}
	
	
	
	//生成实体自定义集合类
	private void CreateCollectionFile(ITable table ,NHibernateFrameworkTableCodeGenerateConfig config )
	{
		GenerateFileHead(); 
%>using System;
using System.Collections.Generic;
using <%= config.EntityNameSpace %>;

namespace <%= config.EntityCollectionNameSpace %>
{
	[Serializable]
	public class <%= config.GenerateCollectionClassName(table) %> : List<<%= config.GenerateEntityClassName(table) %>>
	{
	
	}
}
<%  output.saveEnc(config.GenerateEntityCollectioClassFilePath(table),"d","uft8");
	output.clear();
	}	
	
	//生成实体映射文件
	private void CreateMappingFile(ITable table ,NHibernateFrameworkTableCodeGenerateConfig config )
	{
%><?xml version="1.0" encoding="utf-8" ?>
<hibernate-mapping xmlns="urn:nhibernate-mapping-<% if (config.IsUseNHibernte2Config) {%>2.2<%}else{%>2.0<%}%>">

<%= config.GenerateNhibernateMappingFileClassTag(table) %>

<%= config.GenerateEntityNHibernatePrimaryKeysTag(table) %>

<% BuildNHibernateProperties(table,config); 
%>

<% if(config.IsCreateSubClassListrefence) GenerateSubListMapping(table,config); 
%>

</class>
</hibernate-mapping>
<%  output.saveEnc(config.GenerateEntityMappingFilePath(table),"o","uft8");
	output.clear();
	}
	
	
		 private void CreateDataObjectDesignerClassFile( ITable table ,NHibernateFrameworkTableCodeGenerateConfig config )
	    {		GenerateFileHead(); 
%><% output.writeln(config.ImportNameSpace); 
%>using <%= config.EntityNameSpace %>;
using <%= config.RootDataObjectNameSpace %>;


namespace <%= config.DataObjectNameSpace %>
{
    <% if (config.DataObjectIsInternal) {%>internal<%}else{%>public<%}%> partial class <%= config.GenerateDataObjectClassName(table) %> : <%= config.RootDataObjectName %><<%= config.GenerateEntityClassName(table) %>>
    {
<% 		BuildStaticProperty(table,config); 
%>
		
		public override string[] PkPropertyName
        {
            get { return new string[] { "<%= config.GenerateEntityPorpertyName(table.PrimaryKeys[0]) %>" }; }
        }
		
		public override Type GetFieldTypeByFieldName(string fieldName)
        {
			switch (fieldName)
            {
<%			foreach( IColumn field in table.Columns )
			{
%>                case "<%= config.GenerateEntityPorpertyName(field) %>":
                    return typeof (<%= field.LanguageType %>);
<%			}
%>          }
			return typeof(string);
        }
		
        public override void InClude_Parent_Table(string parent_alias, NHibernateDynamicQueryGenerator<<%= config.GenerateEntityClassName(table) %>> queryGenerator)
        {
            switch (parent_alias)
            {
<%			foreach( IColumn field in table.Columns ){
			if(field.IsInForeignKey)
				{
					ITable pTable = field.ForeignKeys[0].PrimaryTable;
					if(pTable.Name != table.Name){
%>	            case "<%= config.GenerateEntityPorpertyName(field) %>_<%= config.GenerateEntityClassName(table) %>_Alias":
                    queryGenerator.AddAlians(<%= config.GenerateEntityClassName(table) %>.PROPERTY_NAME_<%= config.GenerateEntityPorpertyName(field).ToUpper() %>, PROPERTY_<%= config.GenerateEntityPorpertyName(field).ToUpper() %>_ALIAS_NAME);
                    break;
<%					}			
				}
				}
%>                default:
                    break;
 
            }
        }
		
		
		
<%			foreach( IColumn field in table.Columns ){
			if(field.IsInForeignKey)
				{
					ITable pTable = field.ForeignKeys[0].PrimaryTable;
					if(pTable.Name != table.Name){
%>		public List<<%= config.GenerateEntityClassName(table) %>> GetList_By_<%= config.GenerateEntityPorpertyName(field) %>_<%= config.GenerateEntityClassName(pTable) %>(<%= config.GenerateEntityClassName(pTable) %> fkentity)
		{
			NHibernateDynamicQueryGenerator<<%= config.GenerateEntityClassName(table) %>> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_<%= config.GenerateEntityPorpertyName(field).ToUpper() %>.Eq(fkentity));

            return this.FindListByQueryBuilder(dynamicQueryGenerator);
		}
		
		
        public List<<%= config.GenerateEntityClassName(table) %>> GetPageList_By_<%= config.GenerateEntityPorpertyName(field) %>_<%= config.GenerateEntityClassName(pTable) %>(string orderByColumnName, bool isDesc, <%= config.GenerateEntityClassName(pTable) %> fkentity, PageQueryParams pageQueryParams)
        {
            NHibernateDynamicQueryGenerator<<%= config.GenerateEntityClassName(table) %>> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_<%= config.GenerateEntityPorpertyName(field).ToUpper() %>.Eq(fkentity));

            AddDefaultOrderByToQueryGenerator(orderByColumnName, isDesc, dynamicQueryGenerator);

            return FindListByPageByQueryBuilder(dynamicQueryGenerator, pageQueryParams);
        }		
		
<%					}			
				}
				}
%>
		
		
    }
}
<%	    output.saveEnc(config.GenerateeDataObjectDesignerClassFilePath(table),"o","uft8");
	    output.clear();
		}
		
		
		
	    private void CreateDataObjectClassFile( ITable table ,NHibernateFrameworkTableCodeGenerateConfig config )
	    {		GenerateFileHead(); 
%><% output.writeln(config.ImportNameSpace); 
%>using <%= config.EntityNameSpace %>;
using <%= config.RootDataObjectNameSpace %>;

namespace <%= config.DataObjectNameSpace %>
{
    <% if (config.DataObjectIsInternal) {%>internal<%}else{%>public<%}%> partial class <%= config.GenerateDataObjectClassName(table) %>
    {
    }
}
<%	    output.saveEnc(config.GenerateDataObjectClassFilePath(table),"d","uft8");
			output.clear();
		}
		
	
	private void CreateBaseDataObjectClassFile(ITable table ,NHibernateFrameworkTableCodeGenerateConfig config )
	{
		GenerateFileHead(); 
%><% output.writeln(config.ImportNameSpace); 
%>using <%= config.BaseEntityObjectNameSpace %>;
using <%= config.BaseDataObjectNameSpace %>;

namespace <%= config.DataObjectNameSpace %>
{
    public class <%= config.GenerateBaseDataObjectClassName(table) %> : <%= config.GenerateDataObjectClassName(table) %>
    {
    }
}
<%	output.saveEnc(config.GenerateBaseDataObjectClassFilePath(table),"o","uft8");
	output.clear();
	}
		

		private void BuildStaticProperty(ITable table ,NHibernateFrameworkTableCodeGenerateConfig config)
		{
%>		#region Expression Query Property (标准查询字段)
<%			foreach( IColumn field in table.Columns )
			{
				if(config.IsCreateFKeyClassrefence && field.IsInForeignKey && !field.IsInPrimaryKey)
				{
%>		public static readonly EntityProperty<<%= config.GenerateEntityPorpertyType(field) %>> PROPERTY_<%= config.GenerateEntityPorpertyName(field).ToUpper() %> = new EntityProperty<<%= config.GenerateEntityPorpertyType(field) %>>(Property.ForName(<%=config.GenerateEntityClassName(table)%>.PROPERTY_NAME_<%= config.GenerateEntityPorpertyName(field).ToUpper() %>));
<%				}
				else
				{
%>		public static readonly <%=GetTypeProperty(field)%> PROPERTY_<%= config.GenerateEntityPorpertyName(field).ToUpper() %> = new <%=GetTypeProperty(field)%>(Property.ForName(<%=config.GenerateEntityClassName(table)%>.PROPERTY_NAME_<%= config.GenerateEntityPorpertyName(field).ToUpper() %>));		
<%				}
				if(config.IsCreateFKeyClassrefence && field.IsInForeignKey)
				{
					ITable pTable = field.ForeignKeys[0].PrimaryTable;
					if(pTable.Name != table.Name){
%>		#region <%= utils.SetCamelCase(field.Name) %>字段外键查询字段
        public static NHibernateDynamicQueryGenerator<<%= config.GenerateEntityClassName(table) %>> InClude_<%= config.GenerateEntityPorpertyName(field) %>_Query(NHibernateDynamicQueryGenerator<<%= config.GenerateEntityClassName(table) %>> queryGenerator)
        {
            return queryGenerator.AddAlians(<%= config.GenerateEntityClassName(table) %>.PROPERTY_NAME_<%= config.GenerateEntityPorpertyName(field).ToUpper() %>, PROPERTY_<%= config.GenerateEntityPorpertyName(field).ToUpper() %>_ALIAS_NAME);
        }
        public static readonly string PROPERTY_<%= config.GenerateEntityPorpertyName(field).ToUpper() %>_ALIAS_NAME = "<%= config.GenerateEntityPorpertyName(field) %>_<%= config.GenerateEntityClassName(table) %>_Alias";
<%					foreach( IColumn pfield in pTable.Columns ){ 
						if(config.IsCreateFKeyClassrefence && pfield.IsInForeignKey && !pfield.IsInPrimaryKey)
						{
%>		public static readonly EntityProperty<<%= config.GenerateEntityPorpertyType(pfield) %>> PROPERTY_<%= config.GenerateEntityPorpertyName(field).ToUpper() %>_<%= config.GenerateEntityPorpertyName(pfield).ToUpper() %> = new EntityProperty<<%= config.GenerateEntityPorpertyType(pfield) %>>(Property.ForName(PROPERTY_<%= config.GenerateEntityPorpertyName(field).ToUpper() %>_ALIAS_NAME + ".<%= config.GenerateEntityPorpertyName(pfield) %>"));
<%						}
						else
						{
%>		public static readonly <%=GetTypeProperty(pfield)%> PROPERTY_<%= config.GenerateEntityPorpertyName(field).ToUpper() %>_<%= config.GenerateEntityPorpertyName(pfield).ToUpper() %> = new <%=GetTypeProperty(pfield)%>(Property.ForName(PROPERTY_<%= config.GenerateEntityPorpertyName(field).ToUpper() %>_ALIAS_NAME + ".<%= config.GenerateEntityPorpertyName(pfield) %>"));
<%						}
					}
%>		#endregion
<%					}
				}
			}
%>      
		#region 子类集合字段查询字段
<%			if( config.IsCreateSubClassListrefence ){
			foreach( IForeignKey fkcolumn in table.ForeignKeys )
			{
				if(fkcolumn.PrimaryTable.Name==table.Name){
				string propertyName = TableColumnGenerationHelper.GenerateFkListPropertyName(fkcolumn,"{0}{1}{2}List");
				ITable fTable = fkcolumn.ForeignTable;
%>		public static readonly string PROPERTY_<%= propertyName.ToUpper() %>_ALIAS_NAME = "<%= propertyName %>_<%= config.GenerateEntityClassName(table) %>_Alias";	
        public static NHibernateDynamicQueryGenerator<<%= config.GenerateEntityClassName(table) %>> InClude_<%= propertyName %>_Query(NHibernateDynamicQueryGenerator<<%= config.GenerateEntityClassName(table) %>> queryGenerator)
        {
            return queryGenerator.AddAlians(<%= config.GenerateEntityClassName(table) %>.PROPERTY_NAME_<%= propertyName.ToUpper() %>, PROPERTY_<%= propertyName.ToUpper() %>_ALIAS_NAME);
        }
<%					foreach( IColumn ffield in fTable.Columns ){ 
%>		public static readonly Property PROPERTY_<%= propertyName.ToUpper() %>_<%= config.GenerateEntityPorpertyName(ffield).ToUpper() %> = Property.ForName(PROPERTY_<%= propertyName.ToUpper() %>_ALIAS_NAME + ".<%= config.GenerateEntityPorpertyName(ffield) %>");
<%					}
%>
<%				}
			}
			}
%>	
		#endregion

		#endregion
<%	


		}
	
	
	
	
	
	
		 private void CreateServiceProxyClassFile( ITable table ,NHibernateFrameworkTableCodeGenerateConfig config )
	    {
			GenerateFileHead(); 
			output.writeln(config.ImportServiceProxyNameSpace);
%>using <%= config.RootServiceProxyClassNameSpace %>;
using <%= config.DataObjectNameSpace %>;
using <%= config.EntityNameSpace %>;


namespace <%= config.ServiceProxyNameSpace %>
{
	public interface <%= config.GenerateServiceProxyInterfaceClassName(table) %> : IBaseSpringNHibernateEntityServiceProxy<<%= config.GenerateEntityClassName(table) %>> ,<%= config.GenerateServiceProxyInterfaceClassName(table) %>Designer
    {


    }

    <% if (config.ServiceProxyClassIsInternal) {%>internal<%}else{%>public<%}%> partial class <%= config.GenerateServiceProxyClassName(table) %> : <%= config.GenerateServiceProxyInterfaceClassName(table) %>
    {


    }
}
<%	    output.saveEnc(config.GenerateServiceProxyClassFilePath(table),"d","uft8");
			output.clear();
		}
		
		
		 private void CreateBaseServiceProxyClassFile( ITable table ,NHibernateFrameworkTableCodeGenerateConfig config )
	    {
			GenerateFileHead(); 
			output.writeln(config.ImportServiceProxyNameSpace);
%>using <%= config.BaseServiceProxyNameSpace %>;
using <%= config.BaseDataObjectNameSpace%>;
using <%= config.BaseEntityObjectNameSpace %>;


namespace <%= config.ServiceProxyNameSpace %>
{
    [ServiceContract(Namespace = "http://<%= config.ServiceProxyNameSpace %>")]
	public interface <%= config.GenerateBaseServiceProxyInterfaceClassName(table) %> : IBaseSpringNHibernateEntityServiceProxy<<%= config.GenerateEntityClassName(table) %>> ,<%= config.GenerateServiceProxyInterfaceClassName(table) %>Designer
    {


    }

    internal class <%= config.GenerateBaseServiceProxyClassName(table) %> : <%= config.GenerateServiceProxyClassName(table) %>
    {


    }
}
<%	    output.saveEnc(config.GenerateBaseServiceProxyClassFilePath(table),"o","uft8");
			output.clear();
		}
	

		 private void CreateServiceProxyDesignerClassFile( ITable table ,NHibernateFrameworkTableCodeGenerateConfig config )
	    {
			GenerateFileHead(); 
			output.writeln(config.ImportServiceProxyNameSpace);
%>using <%= config.RootServiceProxyClassNameSpace %>;
using <%= config.DataObjectNameSpace %>;
using <%= config.EntityNameSpace %>;
using <%= config.DataObjectContainerIoCClassNameSpace %>;
<%=		if(this.IsSupportAdo){
%>using <%= config.DataObjectAssembleName %>.AdoNet;
<%}
%>



namespace <%= config.ServiceProxyNameSpace %>
{

    public interface <%= config.GenerateServiceProxyInterfaceClassName(table) %>Designer
    {
<%			foreach( IColumn field in table.Columns ){
			if(field.IsInForeignKey)
				{
					ITable pTable = field.ForeignKeys[0].PrimaryTable;
					if(pTable.Name != table.Name){
%>		List<<%= config.GenerateEntityClassName(table) %>> FindAllByOrderByAndFilterAnd<%= config.GenerateEntityPorpertyName(field) %>(string orderByColumnName, bool isDesc,   <%= config.GenerateEntityPorpertyType(field) %> <%= config.GenerateEntityMemberName(field) %>, PageQueryParams pageQueryParams);
		List<<%= config.GenerateEntityClassName(table) %>> FindAllBy<%= config.GenerateEntityPorpertyName(field) %>(<%= config.GenerateEntityPorpertyType(field) %> <%= config.GenerateEntityMemberName(field) %>);
<%					}			
				}
				}
%>    }

    <% if (config.ServiceProxyClassIsInternal) {%>internal<%}else{%>public<%}%> partial class <%= config.GenerateServiceProxyClassName(table) %> : <%= config.RootServiceProxyClassName %><<%= config.GenerateEntityClassName(table) %>>
    {
		public <%= config.DataObjectContainerIoCClassName %> DataObjectsContainerIocID { set; get; }
	
        public <%= config.GenerateDataObjectClassName(table) %> SelfDataObj
        {
            set
            {
                selfDataObject = value;
            }
			get
            {
                return (<%= config.GenerateDataObjectClassName(table) %>)selfDataObject;
            }
        }
<%			foreach( IColumn field in table.Columns ){
			if(field.IsInForeignKey)
				{
					ITable pTable = field.ForeignKeys[0].PrimaryTable;
					if(pTable.Name != table.Name){
%>	
		public List<<%= config.GenerateEntityClassName(table) %>> FindAllByOrderByAndFilterAnd<%= config.GenerateEntityPorpertyName(field) %>(string orderByColumnName, bool isDesc,  <%= config.GenerateEntityPorpertyType(field) %> <%= config.GenerateEntityMemberName(field) %>, PageQueryParams pageQueryParams)
        {
			return this.SelfDataObj.GetPageList_By_<%= config.GenerateEntityPorpertyName(field) %>_<%= config.GenerateEntityClassName(pTable) %>(orderByColumnName, isDesc,<%= config.GenerateEntityMemberName(field) %>, pageQueryParams);
        }
		
		public List<<%= config.GenerateEntityClassName(table) %>> FindAllBy<%= config.GenerateEntityPorpertyName(field) %>(<%= config.GenerateEntityPorpertyType(field) %> <%= config.GenerateEntityMemberName(field) %>)
        {
			return this.SelfDataObj.GetList_By_<%= config.GenerateEntityPorpertyName(field) %>_<%= config.GenerateEntityClassName(pTable) %>(<%= config.GenerateEntityMemberName(field) %>);
        }
<%					}			
				}
				}
%>



<%=		if(this.IsSupportAdo){
%>        public AdoNetDataObject AdoNetDb { set; get; }		
<%}
%>
		
    }
}
<%	    output.saveEnc(config.GenerateServiceProxyDesignerClassFilePath(table),"o","uft8");
			output.clear();
		}
	
	
		 private void CreateBussinessClassFile( ITable table ,NHibernateFrameworkTableCodeGenerateConfig config )
	    {
%>
using System;
using System.Collections.Generic;
using System.Configuration;
using Legendigital.Framework.Common.Bussiness.NHibernate;
using <%= config.EntityNameSpace %>;
using <%= config.ServiceProxyNameSpace %>;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;


namespace <%= config.GenerateBussinessEncapsulationClassNameSpace %> 
{
	[Serializable]
    public partial class <%= config.GenerateBussinessEncapsulationClassName(table) %>  : BaseSpringNHibernateWrapper<<%= config.GenerateEntityClassName(table) %>, <%= config.GenerateServiceProxyInterfaceClassName(table) %>, <%= config.GenerateBussinessEncapsulationClassName(table) %>>
    { 
        #region Static Common Data Operation
		
		public static void Save(<%= config.GenerateBussinessEncapsulationClassName(table) %> obj)
        {
            Save(obj, businessProxy);
        }

        public static void Update(<%= config.GenerateBussinessEncapsulationClassName(table) %> obj)
        {
            Update(obj, businessProxy);
        }

        public static void SaveOrUpdate(<%= config.GenerateBussinessEncapsulationClassName(table) %> obj)
        {
            SaveOrUpdate(obj, businessProxy);
        }

        public static void DeleteAll()
        {
            DeleteAll(businessProxy);
        }

        public static void DeleteByID(object id)
        {
            DeleteByID(id, businessProxy);
        }

        public static void PatchDeleteByIDs(object[] ids)
        {

            PatchDeleteByIDs(ids, businessProxy);
        }

        public static void Delete(<%= config.GenerateBussinessEncapsulationClassName(table) %> instance)
        {
            Delete(instance, businessProxy);
        }

        public static void Refresh(<%= config.GenerateBussinessEncapsulationClassName(table) %> instance)
        {
            Refresh(instance, businessProxy);
        }

        public static <%= config.GenerateBussinessEncapsulationClassName(table) %> FindById(object id)
        {
            return ConvertEntityToWrapper(FindById(id, businessProxy));
        }

        public static List<<%= config.GenerateBussinessEncapsulationClassName(table) %>> FindAll()
        {
            return ConvertToWrapperList(businessProxy.FindAll());
        }

        public static List<<%= config.GenerateBussinessEncapsulationClassName(table) %>> FindAllByPage(PageQueryParams pageQueryParams)
        {
            return ConvertToWrapperList(FindAll(businessProxy));
        }
		
		public static List<<%= config.GenerateBussinessEncapsulationClassName(table) %>> FindAllByOrderBy(string orderByColumnName, bool isDesc, PageQueryParams pageQueryParams)
        {
            return ConvertToWrapperList(FindAllByPage(pageQueryParams, businessProxy));
        }


        public static List<<%= config.GenerateBussinessEncapsulationClassName(table) %>> FindAllByOrderByAndFilter(List<QueryFilter> filters, string orderByColumnName, bool isDesc, PageQueryParams pageQueryParams)
        {
            orderByColumnName = ProcessColumnName(orderByColumnName);

            return FindAllByOrderByAndFilter(new List<QueryFilter>(), orderByColumnName, isDesc, pageQueryParams);
        }
		

        public static List<<%= config.GenerateBussinessEncapsulationClassName(table) %>> FindAllByOrderByAndFilter(List<QueryFilter> filters, string orderByFieldName, bool isDesc)
        {
		    List<<%= config.GenerateBussinessEncapsulationClassName(table) %>> results = null;

	        ProcessQueryFilters(filters);

            results = ConvertToWrapperList(
                    FindAllByOrderByAndFilter(filters, orderByFieldName, isDesc,  businessProxy));

            return results;
        }
			
		#endregion

    }
}
<%	    output.saveEnc(config.GenerateBussinessEncapsulationClassFilePath(table),"d","uft8");
		 output.clear();
		}
		
		private void CreateBussinessDesignerClassFile( ITable table ,NHibernateFrameworkTableCodeGenerateConfig config )
	    {
		
		List<IColumn> pks = config.GetAllPkColumn(table);
		string pkProname = config.GenerateEntityPorpertyName(pks[0]);
%>// Generated by MyGeneration Version # (<%= input["__version"].ToString() %>)
using System;
using System.Collections.Generic;
using System.Text;
using Spring.Context.Support;
using Common.Logging;
using Legendigital.Framework.Common.Bussiness.NHibernate;
using <%= config.EntityNameSpace %>;
using <%= config.GenerateServiceProxyContainerClassNameSpace %>;
using <%= config.ServiceProxyNameSpace %>;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;

namespace <%= config.GenerateBussinessEncapsulationClassNameSpace %>
{
    public partial class <%= config.GenerateBussinessEncapsulationClassName(table) %>   
    {
        #region Member

		internal static readonly <%= config.GenerateServiceProxyInterfaceClassName(table) %> businessProxy = ((<%= config.GenerateServiceProxyContainerClassNameSpace %>.<%= config.GenerateServiceProxyContainerClassName %>)(ContextRegistry.GetContext().GetObject("<%= config.GenerateServiceProxyContainerClassName %>IocID", typeof(<%= config.GenerateServiceProxyContainerClassNameSpace %>.<%= config.GenerateServiceProxyContainerClassName %>)))).<%= config.GenerateServiceProxyClassName(table) %>Instance;
		
		
		internal <%= config.GenerateEntityClassName(table) %> Entity
        {
            get { return this.entity; }
        }
		
        #endregion

        #region Construtor
		public <%= config.GenerateBussinessEncapsulationClassName(table) %>() : base(new <%= config.GenerateEntityClassName(table) %>())
        {
            
        }

        internal <%= config.GenerateBussinessEncapsulationClassName(table) %>(<%= config.GenerateEntityClassName(table) %> entityObj)
            : base(entityObj)
        {
        }
		#endregion

        #region Process Column Name
        private static string ProcessColumnName(string columnName)
        {
            switch (columnName)
            {
<%			foreach( IColumn field in table.Columns )
			{
				if(config.IsCreateFKeyClassrefence && field.IsInForeignKey)
				{
					ITable pTable = field.ForeignKeys[0].PrimaryTable;
					if(pTable.Name != table.Name){
					foreach( IColumn pfield in pTable.Columns ){ 
					string type = ((pfield.IsInForeignKey && !pfield.IsInPrimaryKey) ? config.GenerateBussinessEncapsulationClassName(pfield.ForeignKeys[0].PrimaryTable) : config.GenerateEntityPorpertyType(pfield));
					if(type.ToLower()!="string" && !type.EndsWith("?") && !type.EndsWith("Wrapper"))
					{
						type = type+"?";
					}
%>		        case "<%= config.GenerateEntityPorpertyName(field) %>_<%= config.GenerateEntityPorpertyName(pfield) %>":
					return PROPERTY_<%= config.GenerateEntityPorpertyName(field).ToUpper() %>_<%= config.GenerateEntityPorpertyName(pfield).ToUpper() %>;
<%						 
					}
					}
				}
			}
%>              default:
                    return columnName;
            }
        }

        private static void ProcessQueryFilters(List<QueryFilter> filters)
        {
            foreach (QueryFilter queryFilter in filters)
            {
                queryFilter.FilterFieldName = ProcessColumnName(queryFilter.FilterFieldName);
            }
        }
		#endregion
		
<% 		BuildPublicConst(table,config); 		
%>

<% BuildBusinessPublicAccessors(table,config);

%>

		#region Query Property
		
		
<%			foreach( IColumn field in table.Columns )
			{
				if(config.IsCreateFKeyClassrefence && field.IsInForeignKey)
				{
					ITable pTable = field.ForeignKeys[0].PrimaryTable;
					if(pTable.Name != table.Name){
%>		#region <%= utils.SetCamelCase(field.Name) %>字段外键查询字段
<%					foreach( IColumn pfield in pTable.Columns ){ 
					string type = ((pfield.IsInForeignKey && !pfield.IsInPrimaryKey) ? config.GenerateBussinessEncapsulationClassName(pfield.ForeignKeys[0].PrimaryTable) : config.GenerateEntityPorpertyType(pfield));
					if(type.ToLower()!="string" && !type.EndsWith("?") && !type.EndsWith("Wrapper"))
					{
						type = type+"?";
					}
%>		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_<%= config.GenerateEntityPorpertyName(field).ToUpper() %>_<%= config.GenerateEntityPorpertyName(pfield).ToUpper() %>)]
        public <%= type %> <%= config.GenerateEntityPorpertyName(field) %>_<%= config.GenerateEntityPorpertyName(pfield) %>
        {
            get
            {
                if (this. <%= config.GenerateEntityPorpertyName(field) %> == null)
                    return null;
                return  <%= config.GenerateEntityPorpertyName(field) %>.<%= config.GenerateEntityPorpertyName(pfield) %>;
            }
        }
<%						 
					}
%>		#endregion
<%					}
				}
			}
%>      	
   
		#endregion


        #region "FKQuery"
<%			foreach( IColumn field in table.Columns ){
			if(field.IsInForeignKey)
				{
					ITable pTable = field.ForeignKeys[0].PrimaryTable;
					if(pTable.Name != table.Name){
%>		
        public static List<<%= config.GenerateBussinessEncapsulationClassName(table) %>> FindAllByOrderByAndFilterAnd<%= config.GenerateEntityPorpertyName(field) %>(string orderByColumnName, bool isDesc,   <%= config.GenerateBussinessEncapsulationClassName(pTable) %> <%= config.GenerateEntityParamsName(field) %>,  PageQueryParams pageQueryParams)
        {
            return ConvertToWrapperList(businessProxy.FindAllByOrderByAndFilterAnd<%= config.GenerateEntityPorpertyName(field) %>(orderByColumnName, isDesc,   <%= config.GenerateEntityParamsName(field) %>.Entity, pageQueryParams));
        }

        public static List<<%= config.GenerateBussinessEncapsulationClassName(table) %>> FindAllBy<%= config.GenerateEntityPorpertyName(field) %>(<%= config.GenerateBussinessEncapsulationClassName(pTable) %> <%= config.GenerateEntityParamsName(field) %>)
        {
            return ConvertToWrapperList(businessProxy.FindAllBy<%= config.GenerateEntityPorpertyName(field) %>(<%= config.GenerateEntityParamsName(field) %>.Entity));
        }
		
<%					}			
				}
				}
%>


        #endregion



<% 
if( config.IsCreateSubClassListrefence )
{
	BuildBusinessSubListAccessors(table,config);
}


%>




        #region Static Common Data Operation
		
		internal static List<<%= config.GenerateBussinessEncapsulationClassName(table) %>> ConvertToWrapperList(List<<%= config.GenerateEntityClassName(table) %>> entitylist)
        {
            List<<%= config.GenerateBussinessEncapsulationClassName(table) %>> list = new List<<%= config.GenerateBussinessEncapsulationClassName(table) %>>();
            foreach (<%= config.GenerateEntityClassName(table) %> lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }

		internal static List<<%= config.GenerateBussinessEncapsulationClassName(table) %>> ConvertToWrapperList(IList<<%= config.GenerateEntityClassName(table) %>> entitylist)
        {
            List<<%= config.GenerateBussinessEncapsulationClassName(table) %>> list = new List<<%= config.GenerateBussinessEncapsulationClassName(table) %>>();
            foreach (<%= config.GenerateEntityClassName(table) %> lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }
		
		internal static List<<%= config.GenerateEntityClassName(table) %>> ConvertToEntityList(List<<%= config.GenerateBussinessEncapsulationClassName(table) %>> wrapperlist)
        {
            List<<%= config.GenerateEntityClassName(table) %>> list = new List<<%= config.GenerateEntityClassName(table) %>>();
            foreach (<%= config.GenerateBussinessEncapsulationClassName(table) %> wrapper in wrapperlist)
            {
                list.Add(wrapper.entity);
            }
            return list;
        }

        internal static <%= config.GenerateBussinessEncapsulationClassName(table) %> ConvertEntityToWrapper(<%= config.GenerateEntityClassName(table) %> entity)
        {
            if (entity == null)
                return null;
				
            if (entity.<%= pkProname %> == 0)
                return null;

            return new <%= config.GenerateBussinessEncapsulationClassName(table) %>(entity);
        }
		
		#endregion

    }//End Class
}// End Namespace

<%	    output.saveEnc(config.GenerateBussinessEncapsulationDesignerClassFilePath(table),"o","uft8");
		 output.clear();
		}
		
		
		
		
		
		 private void CreateBaseBussinessClassFile( ITable table ,NHibernateFrameworkTableCodeGenerateConfig config )
	    {
%>
using System;
using System.Collections.Generic;
using System.Configuration;
using Legendigital.Framework.Common.Bussiness.NHibernate;
using <%= config.BaseEntityObjectNameSpace %>;
using <%= config.ServiceProxyNameSpace %>;


namespace <%= config.GenerateBussinessEncapsulationClassNameSpace %>
{
	[Serializable]
    public partial class <%= config.GenerateBaseBussinessEncapsulationClassName(table) %>
    {
        #region Static Common Data Operation
		
		public static void Save(<%= config.GenerateBaseBussinessEncapsulationClassName(table) %> obj)
        {
            businessProxy.Save(obj.entity);
        }

        public static void Update(<%= config.GenerateBaseBussinessEncapsulationClassName(table) %> obj)
        {
            businessProxy.Update(obj.entity);
        }

        public static void SaveOrUpdate(<%= config.GenerateBaseBussinessEncapsulationClassName(table) %> obj)
        {
            businessProxy.SaveOrUpdate(obj.entity);
        }

        public static void DeleteAll()
        {
            businessProxy.DeleteAll();
        }

        public static void DeleteByID(object id)
        {
            businessProxy.DeleteByID(id);
        }

        public static void PatchDeleteByIDs(object[] ids)
        {

            businessProxy.PatchDeleteByIDs(ids);
        }

        public static void Delete(<%= config.GenerateBaseBussinessEncapsulationClassName(table) %> instance)
        {
            businessProxy.Delete(instance.entity);
        }

        public static void Refresh(<%= config.GenerateBaseBussinessEncapsulationClassName(table) %> instance)
        {
            businessProxy.Refresh(instance.entity);
        }

        public static <%= config.GenerateBaseBussinessEncapsulationClassName(table) %> FindById(object id)
        {
            return ConvertEntityToWrapper(businessProxy.FindById(id));
        }

        public static List<<%= config.GenerateBaseBussinessEncapsulationClassName(table) %>> FindAll()
        {
            return ConvertToWrapperList(businessProxy.FindAll());
        }

        public static List<<%= config.GenerateBaseBussinessEncapsulationClassName(table) %>> FindAllBypage(PageQueryParams pageQueryParams)
        {
            List<<%= config.GenerateEntityClassName(table) %>> list = businessProxy.FindAllBypage(pageQueryParams);
            return ConvertToWrapperList(list);
        }
		
		public static List<<%= config.GenerateBaseBussinessEncapsulationClassName(table) %>> FindAllByOrderBy(string orderByColumnName, bool isDesc, PageQueryParams pageQueryParams)
        {
            return FindAllByOrderByAndFilter(new List<QueryFilter>(), orderByColumnName, isDesc, pageQueryParams);
        }


        public static List<<%= config.GenerateBaseBussinessEncapsulationClassName(table) %>> FindAllByOrderByAndFilter(List<QueryFilter> filters, string orderByColumnName, bool isDesc, PageQueryParams pageQueryParams)
        {
            List<<%= config.GenerateBaseBussinessEncapsulationClassName(table) %>> results = null;

            results = ConvertToWrapperList(
                    businessProxy.FindAllByOrderByAndFilter(filters, orderByColumnName, isDesc,pageQueryParams));

            return results;
        }
		

        public static List<<%= config.GenerateBaseBussinessEncapsulationClassName(table) %>> FindAllByOrderByAndFilter(List<QueryFilter> filters, string orderByFieldName, bool isDesc)
        {
            return ConvertToWrapperList(businessProxy.FindAllByOrderByAndFilter(filters, orderByFieldName, isDesc));
        }
			
		#endregion

    }
}
<%	    output.saveEnc(config.GenerateBaseBussinessEncapsulationClassFilePath(table),"d","uft8");
		 output.clear();
		}
		
		private void CreateBaseBussinessDesignerClassFile( ITable table ,NHibernateFrameworkTableCodeGenerateConfig config )
	    {
		
		List<IColumn> pks = config.GetAllPkColumn(table);
		string pkProname = config.GenerateEntityPorpertyName(pks[0]);
%>// Generated by MyGeneration Version # (<%= input["__version"].ToString() %>)
using System;
using System.Collections.Generic;
using System.Text;
using Spring.Context.Support;
using Common.Logging;
using <%= config.BaseEntityObjectNameSpace %>;
using <%= config.GenerateServiceProxyContainerClassNameSpace %>;
using <%= config.ServiceProxyNameSpace %>;

namespace <%= config.GenerateBussinessEncapsulationClassNameSpace %>
{
    public partial class <%= config.GenerateBaseBussinessEncapsulationClassName(table) %>
    {
        #region Member

		internal static readonly <%= config.GenerateBaseServiceProxyInterfaceClassName(table) %> businessProxy = ((<%= config.GenerateServiceProxyContainerClassNameSpace %>.<%= config.GenerateServiceProxyContainerClassName %>)(ContextRegistry.GetContext().GetObject("<%= config.GenerateServiceProxyContainerClassName %>IocID", typeof(<%= config.GenerateServiceProxyContainerClassNameSpace %>.<%= config.GenerateServiceProxyContainerClassName %>)))).<%= config.GenerateBaseServiceProxyClassName(table) %>Instance;

        internal <%= config.GenerateEntityClassName(table) %> entity;
		
		private static ILog logger = null;

        public static ILog Logger
        {
            get
            {
                if (logger == null)
                    logger = LogManager.GetLogger(typeof(<%= config.GenerateBaseBussinessEncapsulationClassName(table) %>));
                return logger;
            }
        }

        #endregion

        #region Construtor
        public <%= config.GenerateBaseBussinessEncapsulationClassName(table) %>() : this(new <%= config.GenerateEntityClassName(table) %>())
        {
            
        }

        internal <%= config.GenerateBaseBussinessEncapsulationClassName(table) %>(<%= config.GenerateEntityClassName(table) %> entityObj)
        {
            entity = entityObj;
        }
		#endregion
		
		#region Equals 和 HashCode 方法覆盖
		public override bool Equals(object obj)
        {
            if (obj == null && entity!=null)
            {
                if (entity.<%= pkProname %> == 0)
                    return true;

                return false;
            }
            return entity.Equals(obj);
        }

        public override int GetHashCode()
        {
            return entity.GetHashCode();
        }
		#endregion
		
<% 		BuildPublicConst(table,config); 		
%>

<% BuildBaseBusinessPublicAccessors(table,config);

%>






        #region Static Common Data Operation
		
		internal static List<<%= config.GenerateBaseBussinessEncapsulationClassName(table) %>> ConvertToWrapperList(List<<%= config.GenerateEntityClassName(table) %>> entitylist)
        {
            List<<%= config.GenerateBaseBussinessEncapsulationClassName(table) %>> list = new List<<%= config.GenerateBaseBussinessEncapsulationClassName(table) %>>();
            foreach (<%= config.GenerateEntityClassName(table) %> lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }

		internal static List<<%= config.GenerateBaseBussinessEncapsulationClassName(table) %>> ConvertToWrapperList(IList<<%= config.GenerateEntityClassName(table) %>> entitylist)
        {
            List<<%= config.GenerateBaseBussinessEncapsulationClassName(table) %>> list = new List<<%= config.GenerateBaseBussinessEncapsulationClassName(table) %>>();
            foreach (<%= config.GenerateEntityClassName(table) %> lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }
		
		internal static List<<%= config.GenerateEntityClassName(table) %>> ConvertToEntityList(List<<%= config.GenerateBaseBussinessEncapsulationClassName(table) %>> wrapperlist)
        {
            List<<%= config.GenerateEntityClassName(table) %>> list = new List<<%= config.GenerateEntityClassName(table) %>>();
            foreach (<%= config.GenerateBaseBussinessEncapsulationClassName(table) %> wrapper in wrapperlist)
            {
                list.Add(wrapper.entity);
            }
            return list;
        }

        internal static <%= config.GenerateBaseBussinessEncapsulationClassName(table) %> ConvertEntityToWrapper(<%= config.GenerateEntityClassName(table) %> entity)
        {
            if (entity == null)
                return null;
				
            if (entity.<%= pkProname %> == 0)
                return null;

            return new <%= config.GenerateBaseBussinessEncapsulationClassName(table) %>(entity);
        }
		
		#endregion

    }//End Class
}// End Namespace

<%	    output.saveEnc(config.GenerateBaseBussinessEncapsulationDesignerClassFilePath(table),"o","uft8");
		 output.clear();
		}
	

		 private void CreateServiceProxyContainerClassFile( NHibernateFrameworkTableCodeGenerateConfig config )
	    {
%>using System;
using System.Collections.Generic;
using System.Text;
using <%= config.ServiceProxyNameSpace %>;


namespace <%= config.GenerateServiceProxyContainerClassNameSpace %>{
    public partial class <%= config.GenerateServiceProxyContainerClassName %>
    {
	
	}
}
<%	    output.saveEnc(config.GenerateServiceProxyClassFilePath(),"d","uft8");
		 output.clear();
		}



		 private void CreateServiceProxyContainerDesignerClassFile( ITable[] tables ,NHibernateFrameworkTableCodeGenerateConfig config ,IDatabase dataBase)
	    {
%>using System;
using System.Collections.Generic;
using System.Text;
using <%= config.ServiceProxyNameSpace %>;



namespace <%= config.GenerateServiceProxyContainerClassNameSpace %>{
    public partial class <%= config.GenerateServiceProxyContainerClassName %>
    {		
<%     foreach(ITable table in tables){
%>		public <%= config.GenerateServiceProxyInterfaceClassName(table) %> <%= config.GenerateServiceProxyClassName(table) %>Instance
        {get; set;}
<%     }
%>

<%	if(config.IsEnbaleGenerateBaseCode) {
		foreach(ITable table in config.GetAllBaseTable(dataBase)) {
%>      public <%= config.GenerateBaseServiceProxyInterfaceClassName(table) %> <%= config.GenerateBaseServiceProxyClassName(table) %>Instance { set; get; }
<%		}
	}
%>

	}
}
<%	    output.saveEnc(config.GenerateServiceProxyDesignerClassFilePath(),"o","uft8");
		 output.clear();
		}

	private void BuildBusinessSubListAccessors(ITable table,NHibernateFrameworkTableCodeGenerateConfig config)
	{
%>		#region Sub List Property
<%			foreach( IForeignKey fkcolumn in table.ForeignKeys )
			{
				if(fkcolumn.PrimaryTable.Name==table.Name){
				string propertyName = TableColumnGenerationHelper.GenerateFkListPropertyName(fkcolumn,"{0}{1}{2}List");
				ITable fTable = fkcolumn.ForeignTable;
%>		public static readonly string PROPERTY_NAME_<%= propertyName.ToUpper() %> = "<%= propertyName %>";
		
		public virtual List<<%= config.GenerateBussinessEncapsulationClassName(fkcolumn.ForeignColumns[0].Table)  %>> <%= propertyName  %>
		{
			get
			{
				return <%= config.GenerateBussinessEncapsulationClassName(fkcolumn.ForeignColumns[0].Table)  %>.ConvertToWrapperList(entity.<%= propertyName %>);
			}
			//set
			//{
			//	entity.<%= propertyName %> = <%= config.GenerateBussinessEncapsulationClassName(fkcolumn.ForeignColumns[0].Table)  %>.ConvertToEntityList(value);
			//}
		}
<%				}
			}
%>		#endregion 
<%	
	}



	private void BuildBaseBusinessPublicAccessors(ITable table,NHibernateFrameworkTableCodeGenerateConfig config)
	{
%>		#region Public Property
<%			
			foreach(IColumn column in table.Columns)
			{
			
%>		/// <summary>
		/// <%= column.Description %>
		/// </summary>		
		public <%=  ((column.IsInForeignKey && !column.IsInPrimaryKey) ? config.GenerateBaseBussinessEncapsulationClassName(column.ForeignKeys[0].PrimaryTable) : config.GenerateEntityPorpertyType(column)) %> <%= config.GenerateEntityPorpertyName(column) %>
		{
			get
			{
<%   			if (!column.IsInForeignKey || column.IsInPrimaryKey) {
%>				return entity.<%= config.GenerateEntityPorpertyName(column) %>;
<%   			} else {
%>				return <%= config.GenerateBaseBussinessEncapsulationClassName(column.ForeignKeys[0].PrimaryTable) %>.ConvertEntityToWrapper(entity.<%= config.GenerateEntityPorpertyName(column) %>) ;
<%   			} 
%>			}
			set
			{
<%   			if (!column.IsInForeignKey || column.IsInPrimaryKey) {
%>				entity.<%= config.GenerateEntityPorpertyName(column) %> = value;
<%   			} else {
%>				entity.<%= config.GenerateEntityPorpertyName(column) %> = ((value == null) ? null : value.Entity);
<%   			} 
%>			}
		}
<%			}
%>		#endregion 
<%	}	



	private void BuildBusinessPublicAccessors(ITable table,NHibernateFrameworkTableCodeGenerateConfig config)
	{
%>		#region Public Property
<%			
			foreach(IColumn column in table.Columns)
			{
			
%>		/// <summary>
		/// <%= column.Description %>
		/// </summary>		
		public <%=  ((column.IsInForeignKey && !column.IsInPrimaryKey) ? config.GenerateBussinessEncapsulationClassName(column.ForeignKeys[0].PrimaryTable) : config.GenerateEntityPorpertyType(column)) %> <%= config.GenerateEntityPorpertyName(column) %>
		{
			get
			{
<%   			if (!column.IsInForeignKey || column.IsInPrimaryKey) {
%>				return entity.<%= config.GenerateEntityPorpertyName(column) %>;
<%   			} else {
%>				return <%= config.GenerateBussinessEncapsulationClassName(column.ForeignKeys[0].PrimaryTable) %>.ConvertEntityToWrapper(entity.<%= config.GenerateEntityPorpertyName(column) %>) ;
<%   			} 
%>			}
			set
			{
<%   			if (!column.IsInForeignKey || column.IsInPrimaryKey) {
%>				entity.<%= config.GenerateEntityPorpertyName(column) %> = value;
<%   			} else {
%>				entity.<%= config.GenerateEntityPorpertyName(column) %> = ((value == null) ? null : value.Entity);
<%   			} 
%>			}
		}
<%			}
%>		#endregion 
<%	}	
	
	
		    //生成Spring的xml容器类文件
	private void GenerateSpringIocDaoClassFile( ITable[] tables ,NHibernateFrameworkTableCodeGenerateConfig config )
	{
%>using System;
using System.Collections.Generic;
using System.Text;

namespace <%= config.DataObjectContainerIoCClassNameSpace %>
{
    public partial class <%= config.DataObjectContainerIoCClassName %>
    {
    }
}
<%		string savefilepath = Path.Combine(config.DataObjectContainerIocClassFilePath,config.DataObjectContainerIoCClassName + ".cs");
	    output.saveEnc(savefilepath,"o","uft8");
		output.clear();
	}
	
	
	    //生成Spring的xml容器类文件
	private void GenerateSpringIocDaoDesignerClassFile( ITable[] tables ,NHibernateFrameworkTableCodeGenerateConfig config ,IDatabase dataBase)
	{
%>using System;
using System.Collections.Generic;
using System.Text;

namespace <%= config.DataObjectContainerIoCClassNameSpace %>
{
    public partial class <%= config.DataObjectContainerIoCClassName %>
    {
        public <%= config.DataObjectContainerIoCClassName %>()
        {
        }

<%foreach(ITable table in tables) {
%>      public <%= config.GenerateDataObjectClassName(table) %> <%= config.GenerateDataObjectClassName(table) %>Instance { set; get; }
<%}
%>
<%	if(config.IsEnbaleGenerateBaseCode) {
		foreach(ITable table in config.GetAllBaseTable(dataBase)) {
%>      public <%= config.GenerateBaseDataObjectClassName(table) %> <%= config.GenerateBaseDataObjectClassName(table) %>Instance { set; get; }
<%		}
	}
%>
	}
}
<%		string savefilepath = Path.Combine(config.DataObjectContainerIocClassFilePath,config.DataObjectContainerIoCClassName + ".Designer.cs");
	    output.saveEnc(savefilepath,"o","uft8");
		output.clear();
	}
	
	
		//生成Spring的xml容器配置文件
	private void GenerateSpringIocDaoXmlFile( ITable[] tables ,NHibernateFrameworkTableCodeGenerateConfig config,IDatabase dataBase )
	{
%><?xml version="1.0" encoding="utf-8" ?>
<objects xmlns="http://www.springframework.net"
         xmlns:db="http://www.springframework.net/database">
  <!-- 供主程序配置文件引用 -->
  <description>
    Spring.Net框架数据访问层容器配置文件
  </description>
  <!-- 数据访问类 -->
<%foreach(ITable table in tables) {
%> <object id="<%= config.GenerateDataObjectClassName(table) %>IocID" type="<%= config.DataObjectNameSpace %>.<%= config.GenerateDataObjectClassName(table) %>, <%= config.DataObjectAssembleName %>">
    <property name="HibernateTemplate" ref="HibernateTemplate"/>
  </object>
<%}
%>

<%	if(config.IsEnbaleGenerateBaseCode) {
		foreach(ITable table in config.GetAllBaseTable(dataBase)) {
%> <object id="<%= config.GenerateBaseDataObjectClassName(table) %>IocID" type="<%= config.DataObjectNameSpace %>.<%= config.GenerateBaseDataObjectClassName(table) %>, <%= config.DataObjectAssembleName %>">
    <property name="HibernateTemplate" ref="HibernateTemplate"/>
  </object>
<%		}
	}
%>



<object id="<%= config.DataObjectContainerIoCClassName %>IocID" type="<%= config.DataObjectContainerIoCClassNameSpace %>.<%= config.DataObjectContainerIoCClassName %>, <%= config.DataObjectAssembleName %>">
<%foreach(ITable table in tables) {
%>    <property name="<%= config.GenerateDataObjectClassName(table) %>Instance" ref="<%= config.GenerateDataObjectClassName(table) %>IocID"/>
<%}%> 
<%	if(config.IsEnbaleGenerateBaseCode) {
		foreach(ITable table in config.GetAllBaseTable(dataBase)) {
%>    <property name="<%= config.GenerateBaseDataObjectClassName(table) %>Instance" ref="<%= config.GenerateBaseDataObjectClassName(table) %>IocID"/>
<%		}
	}
%>

</object>
</objects>
<%		string savefilepath = Path.Combine(config.DataObjectIocXmlFilePath,config.DataObjectIocXmlFileName + ".xml");
	    output.saveEnc(savefilepath,"o","uft8");
		output.clear();
	}
	
	
		//生成Spring的xml容器配置文件
	private void GenerateSpringIocBussinessXmlFile( ITable[] tables ,NHibernateFrameworkTableCodeGenerateConfig config ,IDatabase dataBase)
	{
%><?xml version="1.0" encoding="utf-8" ?>
<objects xmlns="http://www.springframework.net"
         xmlns:tx="http://www.springframework.net/tx">
  <!-- 供主程序配置文件引用 -->
  <description>
    Spring.Net框架服务层容器配置文件
  </description>
  <!-- 服务层类 -->
<%foreach(ITable table in tables) {
%>  <object id="<%= config.GenerateServiceProxyClassName(table) %>IocID" type="<%= config.ServiceProxyNameSpace %>.<%= config.GenerateServiceProxyClassName(table) %>, <%= config.BussinessAssembleName %>">
    <property name="SelfDataObj" ref="<%= config.GenerateDataObjectClassName(table) %>IocID"/>
<%=		if(this.IsSupportAdo){
%>	<property name="AdoNetDb" ref="AdoNetDataObjectIocID"/>		
<%}
%>	<property name="DataObjectsContainerIocID" ref="<%= config.DataObjectContainerIoCClassName %>IocID"/>
  </object>
<%}
%>

<%	if(config.IsEnbaleGenerateBaseCode) {
		foreach(ITable table in config.GetAllBaseTable(dataBase)) {
%>  <object id="<%= config.GenerateBaseServiceProxyClassName(table) %>IocID" type="<%= config.ServiceProxyNameSpace %>.<%= config.GenerateBaseServiceProxyClassName(table) %>, <%= config.BussinessAssembleName %>">
    <property name="SelfDataObj" ref="<%= config.GenerateBaseDataObjectClassName(table) %>IocID"/>
	<property name="DataObjectsContainerIocID" ref="<%= config.DataObjectContainerIoCClassName %>IocID"/>
  </object>
<%		}
	}
%>

<object id="<%= config.GenerateServiceProxyContainerClassName %>IocID" type="<%= config.GenerateServiceProxyContainerClassNameSpace %>.<%= config.GenerateServiceProxyContainerClassName %>, <%= config.BussinessAssembleName %>">
<%foreach(ITable table in tables) {
%>    <property name="<%= config.GenerateServiceProxyClassName(table) %>Instance" ref="<%= config.GenerateServiceProxyClassName(table) %>IocID"/>
<%}%>
<%	if(config.IsEnbaleGenerateBaseCode) {
		foreach(ITable table in config.GetAllBaseTable(dataBase)) {
%>    <property name="<%= config.GenerateBaseServiceProxyClassName(table) %>Instance" ref="<%= config.GenerateBaseServiceProxyClassName(table) %>IocID"/>
<%		}
	}
%>

</object>

<tx:attribute-driven />
</objects>
<%
		string savefilepath = Path.Combine(config.SelectGenerateServiceProxyContainerClassXmlFilePath,config.GenerateServiceProxyContainerXMLFileName + ".xml");
	    output.saveEnc(savefilepath,"o","uft8");
		output.clear();
	}
	
	
	
			//生成Spring的xml容器配置文件
	private void GenerateWCFSpringIocBussinessXmlFile( ITable[] tables ,NHibernateFrameworkTableCodeGenerateConfig config ,IDatabase dataBase)
	{
%><?xml version="1.0" encoding="utf-8" ?>
<objects xmlns="http://www.springframework.net">
  <!-- 供主程序配置文件引用 -->
  <description>
    Spring.Net框架WCF服务层容器配置文件
  </description>
  <!-- 服务层类 -->
<%foreach(ITable table in tables) {
%> <object id="<%= config.GenerateServiceProxyClassName(table) %>IocID"
			type="<%= config.ServiceProxyNameSpace %>.<%= config.GenerateServiceProxyInterfaceClassName(table) %>, <%= config.BussinessAssembleName %>"
			factory-object="<%= config.GenerateServiceProxyClassName(table) %>ChannelFactory"
			factory-method="CreateChannel" />
	<object id="<%= config.GenerateServiceProxyClassName(table) %>ChannelFactory"
			type="System.ServiceModel.ChannelFactory&lt;<%= config.ServiceProxyNameSpace %>.<%= config.GenerateServiceProxyInterfaceClassName(table) %>>, System.ServiceModel">
		<constructor-arg name="endpointConfigurationName" value="WCF<%= config.GenerateServiceProxyClassName(table) %>Endpoint" />
	</object>
<%}
%>

<object id="<%= config.GenerateServiceProxyContainerClassName %>IocID" type="<%= config.GenerateServiceProxyContainerClassNameSpace %>.<%= config.GenerateServiceProxyContainerClassName %>, <%= config.BussinessAssembleName %>">
<%foreach(ITable table in tables) {
%>    <property name="<%= config.GenerateServiceProxyClassName(table) %>Instance" ref="<%= config.GenerateServiceProxyClassName(table) %>IocID"/>
<%}%>
<%	if(config.IsEnbaleGenerateBaseCode) {
		foreach(ITable table in config.GetAllBaseTable(dataBase)) {
%>    <property name="<%= config.GenerateBaseServiceProxyClassName(table) %>Instance" ref="<%= config.GenerateBaseServiceProxyClassName(table) %>IocID"/>
<%		}
	}
%>
</object>
</objects>
<%
		string savefilepath = Path.Combine(config.SelectGenerateServiceProxyContainerClassXmlFilePath,"WCF"+config.GenerateServiceProxyContainerXMLFileName + ".xml");
	    output.saveEnc(savefilepath,"o","uft8");
		output.clear();
	}
	
	
	
		private void GenerateWCFSpringIocWebConfigRefrence( ITable[] tables ,NHibernateFrameworkTableCodeGenerateConfig config ,IDatabase dataBase)
	{
%><%foreach(ITable table in tables) {
%> 			<endpoint name="WCF<%= config.GenerateServiceProxyClassName(table) %>Endpoint"
				address="http://localhost:2306/<%= config.GenerateServiceProxyClassName(table) %>IocID.svc"
				binding="basicHttpBinding" bindingConfiguration="basicHttpBinding1"
				contract="<%= config.ServiceProxyNameSpace %>.<%= config.GenerateServiceProxyInterfaceClassName(table) %>" />		
<%}
%>









<%		
		foreach(ITable table in tables) {
%> 			<service name="<%= config.GenerateServiceProxyClassName(table) %>IocID" behaviorConfiguration="DefaultBehavior">
				<endpoint address="" binding="basicHttpBinding" contract="<%= config.ServiceProxyNameSpace %>.<%= config.GenerateServiceProxyInterfaceClassName(table) %>"/>
				<endpoint address="mex" binding="mexHttpBinding" contract="IMetadataExchange"/>
			</service>				
<%}
%><%		string savefilepath = Path.Combine(config.SelectGenerateServiceProxyContainerClassXmlFilePath,"WCFWebConfig.xml");
	    output.saveEnc(savefilepath,"o","uft8");
		output.clear();
	}
	
	

		private void GenerateWCFSpringIocWCFSVC( ITable[] tables ,NHibernateFrameworkTableCodeGenerateConfig config ,IDatabase dataBase)
	{
				string BindBeginTag = "<"+"%";
			string BindEndTag =  "%"+">";
	
	
%>
<%foreach(ITable table in tables) {
%><%=BindBeginTag%>@ ServiceHost Language="C#" Debug="true" Service="<%= config.GenerateServiceProxyClassName(table) %>IocID" Factory="Spring.ServiceModel.Activation.ServiceHostFactory" <%=BindEndTag%> 
<% string savefilepath = Path.Combine(config.SelectGenerateServiceProxyContainerClassXmlFilePath,config.GenerateServiceProxyClassName(table)+"IocID.svc");
	output.saveEnc(savefilepath,"o","uft8");
	output.clear();
}
%>
<%
		
	    
	}
	
	
	private void BuildNHibernateProperties(ITable table, NHibernateFrameworkTableCodeGenerateConfig config)
	{
		List<IColumn> npks = config.GetAllNotPkColumn(table);
		
		foreach( IColumn column in npks )
		{
				if( column.IsInForeignKey  && config.IsCreateFKeyClassrefence)
				{
					if(column.ForeignKeys.Count > 1)
					{
%>		<!-- more than one foreign column is mapped to <%= column.Alias %> - you're on your own. -->		
<%  				}
					else
					{												
%>		<many-to-one column="<%= column.Alias %>" name="<%= config.GenerateEntityPorpertyName(column) %>" class="<%= config.EntityNameSpace %>.<%= config.GenerateEntityClassName(column.ForeignKeys[0].PrimaryTable) %>,<%= config.EntityAssembleName %>" />		
<%  				}
				}
				else
				{
%>		<property column="<%= column.Alias %>" type="<%= config.GenerateEntityNHibernateType(column) %>"<% if (config.IsReadOnlyClass) {%> access="field" name="<%= config.GenerateEntityMemberName(column) %>"<%}else{%> name="<%= config.GenerateEntityPorpertyName(column) %>" <%}%> <% if (!column.IsNullable) {%> not-null="true" <%}%><% if (column.CharacterOctetLength > 0 ) {%> length="<%= column.CharacterOctetLength.ToString() %>"<%}%> />	
<%  			}

		}
	}	
	
	
	
	private void GenerateSubListMapping(ITable table, NHibernateFrameworkTableCodeGenerateConfig config)
	{
		List<IColumn> pks = config.GetAllPkColumn(table);
	
		foreach( IForeignKey fkcolumn in table.ForeignKeys )
		{
			if(fkcolumn.PrimaryTable.Name==table.Name){
			string memberName = TableColumnGenerationHelper.GenerateFkListPrivateMembername(fkcolumn,"_{0}{1}{2}List");
			string propertyName = TableColumnGenerationHelper.GenerateFkListPropertyName(fkcolumn,"{0}{1}{2}List");
			Dnp.Utils.TableRelation tr = new Dnp.Utils.TableRelation(table, fkcolumn);
%>    <bag name="<%= propertyName %>" inverse="false" lazy="true" cascade="none" generic="true">
      <key column="<%= fkcolumn.ForeignColumns[0].Name %>" />
      <one-to-many class="<%= config.EntityNameSpace %>.<%= config.GenerateEntityClassName(fkcolumn.ForeignColumns[0].Table) %>,<%= config.EntityAssembleName %>" />
	  </bag>
<%			}
		}
	}	
	
	
	
	
	
	
	
	
	
	
	
	
	
	private void BuildPublicConst(ITable table, NHibernateFrameworkTableCodeGenerateConfig config)
	{
%>      #region 公共常量

		public static readonly string CLASS_FULL_NAME = "<%= config.EntityNameSpace %>.<%= config.GenerateEntityClassName(table) %>";
<%		foreach( IColumn column in table.Columns )
		{	
%>		public static readonly string PROPERTY_NAME_<%= config.GenerateEntityPorpertyName(column).ToUpper() %> = "<%= config.GenerateEntityPorpertyName(column) %>";
<%		}
%>		
        #endregion
	
 
<%			foreach( IColumn field in table.Columns )
			{
				if(config.IsCreateFKeyClassrefence && field.IsInForeignKey)
				{
					ITable pTable = field.ForeignKeys[0].PrimaryTable;
					if(pTable.Name != table.Name){
%>		#region <%= utils.SetCamelCase(field.Name) %>字段外键查询字段
        public const string PROPERTY_<%= config.GenerateEntityPorpertyName(field).ToUpper() %>_ALIAS_NAME = "<%= config.GenerateEntityPorpertyName(field) %>_<%= config.GenerateEntityClassName(table) %>_Alias";
<%					foreach( IColumn pfield in pTable.Columns ){ 
%>		public const string PROPERTY_<%= config.GenerateEntityPorpertyName(field).ToUpper() %>_<%= config.GenerateEntityPorpertyName(pfield).ToUpper() %> = "<%= config.GenerateEntityPorpertyName(field) %>_<%= config.GenerateEntityClassName(table) %>_Alias.<%= config.GenerateEntityPorpertyName(pfield) %>";
<%						 
					}
%>		#endregion
<%					}
				}
			}
%>      	
	
	
		 
		
		
		
		
<%	}

 
	private void CreateSubClassListrefence(ITable table, NHibernateFrameworkTableCodeGenerateConfig config)
	{
%>        #region 子类列表引用
<%		foreach( IForeignKey fkcolumn in table.ForeignKeys )
		{
			if(fkcolumn.PrimaryTable.Name==table.Name){
			string memberName = TableColumnGenerationHelper.GenerateFkListPrivateMembername(fkcolumn,"_{0}{1}{2}List");
			string propertyName = TableColumnGenerationHelper.GenerateFkListPropertyName(fkcolumn,"{0}{1}{2}List");
%>		
		public static readonly string PROPERTY_NAME_<%= propertyName.ToUpper() %> = "<%= propertyName %>";

		private IList<<%= config.GenerateEntityClassName(fkcolumn.ForeignColumns[0].Table)  %>> <%= memberName %>;
		
		public virtual IList<<%= config.GenerateEntityClassName(fkcolumn.ForeignColumns[0].Table)  %>> <%= propertyName  %>
		{
			get
			{
				return <%= memberName %>;
			}
			set
			{
				_isChanged |= (<%= memberName %> != value); <%= memberName %> = value;
			}
		}
<%		}}
%>		
        #endregion
<%	}

	private void BuildPrivateMembers(ITable table, NHibernateFrameworkTableCodeGenerateConfig config)
	{
		if( table.Columns.Count > 0 )
		{
%>        #region 私有成员变量

 
		
<%		
		foreach( IColumn column in table.Columns )
		{
%>		private <%= config.GenerateEntityMemberType(column) %> <%= config.GenerateEntityMemberName(column) %>;
<%		}	
%>		
		#endregion
<%		}  
   }
   
   
    
   private string ParseDefaultValue(string value)
   {
		if(value.ToUpper()=="GETDATE")
		{
			return "System.DateTime.Now";
		}
		return value;
   }
   
	private void BuildDefaultConstructor(ITable table, NHibernateFrameworkTableCodeGenerateConfig config)
	{
%>		#region 构造函数
		/// <summary>
		/// 默认构造函数
		/// </summary>
		public <%= config.GenerateEntityClassName(table) %>()
		{
<%		foreach( IColumn column in table.Columns )
		{
%>			<%= config.GenerateEntityMemberName(column) %> = <%= ParseDefaultValue(config.GenerateEntityDefaultValue(column)) %>;
<%		}
%>		}
		#endregion
<%	}

 
   

	private void BuildPublicAccessors(ITable table, NHibernateFrameworkTableCodeGenerateConfig config)
	{
		if( table.Columns.Count > 0 )
		{
%>	    #region 公共属性
<%			
			foreach( IColumn column in table.Columns )
			{
			%>
		/// <summary>
		/// <%= column.Description %>
		/// </summary>
		[DataMember]
		public <%=(config.IsLazyLoad ? "virtual" : "")%> <%= config.GenerateEntityPorpertyType(column) %> <%= config.GenerateEntityPorpertyName(column) %>
		{
			get { return <%= config.GenerateEntityMemberName(column) %>; }
<%				if( !config.IsReadOnlyClass )
				{
%>
			set	
			{
<%             if ( column.CharacterOctetLength > 0 && !( config.IsCreateFKeyClassrefence && column.IsInForeignKey ))  {                                           %>
				if( value != null && value.Length > <%= column.CharacterOctetLength.ToString() %>)
					throw new ArgumentOutOfRangeException("Invalid value for <%= config.GenerateEntityPorpertyName(column) %>", value, value.ToString());
<%				}
%>				<%= config.MemberPrefix %>isChanged |= (<%= config.GenerateEntityMemberName(column) %> != value); <%= config.GenerateEntityMemberName(column) %> = value;
			}
<%				}
%>		}
<%				}
%>	

		#endregion 
<%		}
	}
	
	
	
	
	
	
 

	private void BuildEqualsHashCodeOverrides(ITable table, NHibernateFrameworkTableCodeGenerateConfig config)
	{
		
%>		#region Equals 和 HashCode 方法覆盖
		/// <summary>
		/// local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals( object obj )
		{
			 return this.CheckEquals(obj as <%= config.GenerateEntityClassName(table)%>);
		}
		
		/// <summary>
		/// local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			return GetEntityHashCode();
		}
		#endregion
<%      List<IColumn> pks = config.GetAllPkColumn(table);

		IColumn pk = null;

		if(pks.Count>0)
			pk = pks[0];
		else
			pk = table.Columns[0];

%>		
		public override object GetDataEntityKey()
	    {
	        return this.<%= config.GenerateEntityMemberName(pk) %>;
	    }
		
		
<%	}



	private void ImplementationICloneableFunction(ITable table, NHibernateFrameworkTableCodeGenerateConfig config)
	{
		
%>		#region ICloneable methods
		
		public virtual object Clone()
		{
			return this.MemberwiseClone();
		}
		
		#endregion
<%	}
	
	
	
	private void BuildPublicFunctions(ITable table, NHibernateFrameworkTableCodeGenerateConfig config)
	{
%>        
<%	}


	private void BuildFullConstructor(ITable table, NHibernateFrameworkTableCodeGenerateConfig config)
	{
%>		#region 全构造函数
		/// <summary>
		/// 全构造函数
		/// </summary>
		public <%= config.GenerateEntityClassName(table) %>(<%= config.GenerateNhibernateAllColumnParams(table) %>)
		{
<%		foreach( IColumn column in table.Columns )
		{
%>			<%= config.GenerateEntityMemberName(column) %> = <%= config.GenerateEntityParamsName(column) %>;
<%		}
%>		}
		#endregion     
<%	}

	
	
	
		private void BuildWCFFullConstructor(ITable table, NHibernateFrameworkTableCodeGenerateConfig config)
	{
%>		#region 全构造函数
		/// <summary>
		/// 全构造函数
		/// </summary>
		public <%= config.GenerateEntityClassName(table) %>(<%= config.GenerateNhibernateAllColumnParams(table) %>)
		{
<%		foreach( IColumn column in table.Columns )
		{
%>			<%= config.GenerateEntityMemberName(column) %> = <%= config.GenerateEntityParamsName(column) %>;
<%		}
%>		}
		#endregion     
<%	}

	
	
	
	    private string GetTypeProperty(IColumn col)
		{		
			switch(col.LanguageType)
			{
				case "string":
					return "StringProperty";
				case "int":
					return "IntProperty";
				case "bool":
					return "BoolProperty";
				case "DateTime":
					return "DateTimeProperty";
				case "decimal":
					return "DecimalProperty";
				case "double":
					return "DoubleProperty";
				case "byte[]":
					return "ByteArrayProperty";
			}
			
			return "StringProperty";
		
		}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

}
%>
##|BODY_END
