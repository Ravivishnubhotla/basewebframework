##|TYPE Template
##|UNIQUEID 98451047-c7ef-497b-a490-f43e8c53ddf0
##|TITLE 辅助代码生成工具
##|NAMESPACE Tutorials.C#.Chapter 2
##|SOURCE_TYPE Source
##|OUTPUT_LANGUAGE None
##|GUI_ENGINE .Net Script
##|GUI_LANGUAGE C#
##|GUI_BEGIN
<%#REFERENCE Legendigital.Code.MyGenAddin.dll , System.Windows.Forms.dll, System.Drawing.dll %>
<%#NAMESPACE System.Windows.Forms, System.Drawing ,Legendigital.Code.MyGenAddin %>

public class GeneratedGui : DotNetScriptGui
{
	public GeneratedGui(ZeusContext context) : base(context) {}
	
	public override void Setup() 
	{
		BaseDatabaseSelectForm form = new BaseDatabaseSelectForm(MyMeta, input);
		
		form.Text = "辅助代码生成工具";

		if (form.ShowDialog() != DialogResult.OK) 
		{
			ui.IsCanceled = true;
		}
	}


}
##|GUI_END
##|BODY_MODE Markup
##|BODY_ENGINE .Net Script
##|BODY_LANGUAGE C#
##|BODY_TAG_START <%
##|BODY_TAG_END %>
##|BODY_BEGIN
<%#REFERENCE Legendigital.Code.MyGenAddin.dll, System.Windows.Forms.dll,System.Web.dll,System.Data.dll,System.Xml.dll %><%#NAMESPACE System,System.Xml,System.IO,System.Collections.Generic, System.Text, System.Data,System.Text.RegularExpressions, System.Globalization, System.Collections, Zeus, Zeus.UserInterface, Zeus.DotNetScript, Microsoft.Win32 ,Dnp.Utils ,Legendigital.Code.MyGenAddin.NHibernateFramework,Legendigital.Code.MyGenAddin,System.Collections.Generic %><%
public class GeneratedTemplate : DotNetScriptTemplate
{
	public GeneratedTemplate(ZeusContext context) : base(context) {}

	private Utils utils = new Utils();

	public override void Render()
	{
		string databaseName = input["databaseName"].ToString();
		
		IDatabase database = MyMeta.Databases[databaseName];
		
		DataSet dsRoles = DataAccessHelper.GetDataSetBySql("Select * from SystemRole");
		
		GenerateRoleNameClass(dsRoles.Tables[0]);
		
	    DataSet dsPermisions = DataAccessHelper.GetDataSetBySql("SELECT     dbo.SystemResources.Resources_NameEn, dbo.SystemResources.Resources_NameCn, dbo.SystemPrivilege.* FROM         dbo.SystemPrivilege INNER JOIN  dbo.SystemResources ON dbo.SystemPrivilege.Resources_ID = dbo.SystemResources.Resources_ID order by dbo.SystemPrivilege.Resources_ID asc,dbo.SystemPrivilege.PrivilegeOrder asc");
		
		GeneratePermissinNameClass(dsPermisions.Tables[0]);
		
		DataSet dsDictionaryCategory = DataAccessHelper.GetDataSetBySql("SELECT * FROM [SystemDictionaryGroup]");
		
		GenerateDictionaryWrapperClass(dsDictionaryCategory.Tables[0]);
		
		DataSet dsConfigData = DataAccessHelper.GetDataSetBySql("SELECT    dbo.SystemConfig.*, ISNULL(dbo.SystemConfigGroup.Name, '') AS GroupName,  ISNULL(dbo.SystemConfigGroup.Code, '') AS GroupCode FROM dbo.SystemConfig LEFT OUTER JOIN dbo.SystemConfigGroup ON dbo.SystemConfig.Config_GroupID = dbo.SystemConfigGroup.ID ORDER BY GroupName");
		
		GenerateConfigWrapperClass(dsConfigData.Tables[0]);
		
	}
	
	private void GenerateRoleNameClass(DataTable dt)
	{
%>    public static class RoleCodeList
    {
<%		foreach(DataRow dr in dt.Rows){
%>		/// <summary>
        /// <%= dr["Role_Name"].ToString() %>
        /// </summary>
		public const string ROLE_CODE_<%= utils.SetPascalCase(dr["Role_Code"].ToString()).ToUpper() %>	= "<%= dr["Role_Code"].ToString() %>";
<%     }

%>   }
<%
    }
	
	private string GetDataType(string dataTypeValue)
	{
		if(dataTypeValue=="1")
		{
			return "string";
		}
		else if(dataTypeValue=="2")
		{
			return "int";
		}
		else if(dataTypeValue=="3")
		{
			return "decimal";
		}
		else if(dataTypeValue=="4")
		{
			return "datetime";
		}
		else if(dataTypeValue=="5")
		{
			return "bool";
		}
		return "string";
	}
	private void GenerateConfigWrapperClass(DataTable dt)
	{
%>    public static class SystemConfigConst
    {
<%		foreach(DataRow dr in dt.Rows){
%>				public const string CFG_DEFAULT_VALUE_<%= utils.SetPascalCase(dr["Config_Key"].ToString()).ToUpper() %>	= "<%= dr["Config_Value"].ToString() %>";
<%     }

%>  

<%		foreach(DataRow dr in dt.Rows){
%>				public const string CFG_KEY_<%= utils.SetPascalCase(dr["Config_Key"].ToString()).ToUpper() %>	= "<%= dr["Config_Key"].ToString() %>";
<%     }

%>  

<%		foreach(DataRow dr in dt.Rows){
%>		public static <%= GetDataType(dr["Config_DataType"].ToString()) %> Config_<%= utils.SetPascalCase(dr["Config_Key"].ToString()) %>
        {
            get 
            {
<% if(dr["Config_DataType"].ToString()=="1") {
%>				return SystemConfigWrapper.GetValueByConfigKey(CFG_KEY_<%= utils.SetPascalCase(dr["Config_Key"].ToString()).ToUpper() %>, CFG_DEFAULT_VALUE_<%= utils.SetPascalCase(dr["Config_Key"].ToString()).ToUpper() %>);
<%} else {
%>				return <%= GetDataType(dr["Config_DataType"].ToString()) %>.Parse(SystemConfigWrapper.GetValueByConfigKey(CFG_KEY_<%= utils.SetPascalCase(dr["Config_Key"].ToString()).ToUpper() %>, CFG_DEFAULT_VALUE_<%= utils.SetPascalCase(dr["Config_Key"].ToString()).ToUpper() %>));
<%} 
%> }
        }
<%     }

%>  


}
<%
    }
	
	
		private void GenerateDictionaryWrapperClass(DataTable dt)
	{
%>    public static class DictionaryConst
    {
<%		foreach(DataRow dr in dt.Rows){
%>        public const string Dictionary_GroupCode_<%= dr["Code"].ToString() %> = "<%= dr["Code"].ToString() %>";

        public static List<SystemDictionaryWrapper> <%= dr["Code"].ToString() %>Dictionary
        {
            get
            {
                return SystemDictionaryWrapper.GetDictionaryByGroupCode(Dictionary_GroupCode_<%= dr["Code"].ToString() %>);
            }
        }

        public static string Parse<%= dr["Code"].ToString() %>DictionaryKey(string key)
        {
            return SystemDictionaryWrapper.ParseDictionaryValueByGroupCodeAndKey(Dictionary_GroupCode_<%= dr["Code"].ToString() %>, key); 
        }
		#region KeyList
<%      DataSet dsDictionaryItems = DataAccessHelper.GetDataSetBySql("SELECT *  FROM SystemDictionary where SystemDictionary_GroupID = '"+dr["ID"].ToString()+"'");
		 foreach(DataRow dr1 in dsDictionaryItems.Tables[0].Rows){
%>			///<%= dr1["SystemDictionary_Value"].ToString() %>
			public const string Dictionary_<%=dr["Code"].ToString() %>_<%= dr1["SystemDictionary_Code"].ToString() %>_Key = "<%= dr1["SystemDictionary_Key"].ToString() %>";
<%		}
%>		#endregion 
		
<%     }

%>      

}
<%
    }
	
	
			private void GeneratePermissinNameClass(DataTable dt)
	{
%>    public static class PermissinNameList
    {
<%		foreach(DataRow dr in dt.Rows){
%>		/// <summary>
        /// <%= dr["PrivilegeEnName"].ToString() %>
        /// </summary>
		public const string PERMISSION_NAME_<%= utils.SetPascalCase(dr["Resources_NameEn"].ToString()).ToUpper() %>_<%= utils.SetPascalCase(dr["PrivilegeEnName"].ToString()).ToUpper() %>	= "<%= dr["PrivilegeEnName"].ToString() %>";
<%     }

%>   }
	

<%
    }

}
%>
##|BODY_END
