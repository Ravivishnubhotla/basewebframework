// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using NHibernate.Criterion;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery.Propertys;
using SPS.Entity.Tables;
using Legendigital.Framework.Common.Data.NHibernate;


namespace SPS.Data.Tables
{
    public partial class SPRecordDataObject : BaseNHibernateDataObject<SPRecordEntity>
    {
				#region Expression Query Property (标准查询字段)
		public static readonly Property PROPERTY_ID = Property.ForName(SPRecordEntity.PROPERTY_NAME_ID);
		public static readonly Property PROPERTY_LINKID = Property.ForName(SPRecordEntity.PROPERTY_NAME_LINKID);
		public static readonly Property PROPERTY_MO = Property.ForName(SPRecordEntity.PROPERTY_NAME_MO);
		public static readonly Property PROPERTY_MOBILE = Property.ForName(SPRecordEntity.PROPERTY_NAME_MOBILE);
		public static readonly Property PROPERTY_SPNUMBER = Property.ForName(SPRecordEntity.PROPERTY_NAME_SPNUMBER);
		public static readonly Property PROPERTY_PROVINCE = Property.ForName(SPRecordEntity.PROPERTY_NAME_PROVINCE);
		public static readonly Property PROPERTY_CITY = Property.ForName(SPRecordEntity.PROPERTY_NAME_CITY);
		public static readonly Property PROPERTY_OPERATORTYPE = Property.ForName(SPRecordEntity.PROPERTY_NAME_OPERATORTYPE);
		public static readonly Property PROPERTY_CREATEDATE = Property.ForName(SPRecordEntity.PROPERTY_NAME_CREATEDATE);
		public static readonly Property PROPERTY_ISREPORT = Property.ForName(SPRecordEntity.PROPERTY_NAME_ISREPORT);
		public static readonly Property PROPERTY_ISINTERCEPT = Property.ForName(SPRecordEntity.PROPERTY_NAME_ISINTERCEPT);
		public static readonly Property PROPERTY_ISSYCNTOCLIENT = Property.ForName(SPRecordEntity.PROPERTY_NAME_ISSYCNTOCLIENT);
		public static readonly Property PROPERTY_ISSYCNSUCCESSED = Property.ForName(SPRecordEntity.PROPERTY_NAME_ISSYCNSUCCESSED);
		public static readonly Property PROPERTY_ISSTATOK = Property.ForName(SPRecordEntity.PROPERTY_NAME_ISSTATOK);
		public static readonly Property PROPERTY_SYCNRETRYTIMES = Property.ForName(SPRecordEntity.PROPERTY_NAME_SYCNRETRYTIMES);
		public static readonly Property PROPERTY_CHANNELID = Property.ForName(SPRecordEntity.PROPERTY_NAME_CHANNELID);
		#region channelID字段外键查询字段
        public static NHibernateDynamicQueryGenerator<SPRecordEntity> InClude_ChannelID_Query(NHibernateDynamicQueryGenerator<SPRecordEntity> queryGenerator)
        {
            return queryGenerator.AddAlians(SPRecordEntity.PROPERTY_NAME_CHANNELID, PROPERTY_CHANNELID_ALIAS_NAME);
        }
        public static readonly string PROPERTY_CHANNELID_ALIAS_NAME = "ChannelID_SPRecordEntity_Alias";
		public static readonly Property PROPERTY_CHANNELID_ID = Property.ForName(PROPERTY_CHANNELID_ALIAS_NAME + ".Id");
		public static readonly Property PROPERTY_CHANNELID_NAME = Property.ForName(PROPERTY_CHANNELID_ALIAS_NAME + ".Name");
		public static readonly Property PROPERTY_CHANNELID_CODE = Property.ForName(PROPERTY_CHANNELID_ALIAS_NAME + ".Code");
		public static readonly Property PROPERTY_CHANNELID_DATAOKMESSAGE = Property.ForName(PROPERTY_CHANNELID_ALIAS_NAME + ".DataOkMessage");
		public static readonly Property PROPERTY_CHANNELID_DATAFAILEDMESSAGE = Property.ForName(PROPERTY_CHANNELID_ALIAS_NAME + ".DataFailedMessage");
		public static readonly Property PROPERTY_CHANNELID_DESCRIPTION = Property.ForName(PROPERTY_CHANNELID_ALIAS_NAME + ".Description");
		public static readonly Property PROPERTY_CHANNELID_DATAADAPTERTYPE = Property.ForName(PROPERTY_CHANNELID_ALIAS_NAME + ".DataAdapterType");
		public static readonly Property PROPERTY_CHANNELID_DATAADAPTERURL = Property.ForName(PROPERTY_CHANNELID_ALIAS_NAME + ".DataAdapterUrl");
		public static readonly Property PROPERTY_CHANNELID_CHANNELTYPE = Property.ForName(PROPERTY_CHANNELID_ALIAS_NAME + ".ChannelType");
		public static readonly Property PROPERTY_CHANNELID_IVRFEETIMETYPE = Property.ForName(PROPERTY_CHANNELID_ALIAS_NAME + ".IVRFeeTimeType");
		public static readonly Property PROPERTY_CHANNELID_IVRTIMEFORMAT = Property.ForName(PROPERTY_CHANNELID_ALIAS_NAME + ".IVRTimeFormat");
		public static readonly Property PROPERTY_CHANNELID_ISSTATEREPORT = Property.ForName(PROPERTY_CHANNELID_ALIAS_NAME + ".IsStateReport");
		public static readonly Property PROPERTY_CHANNELID_STATEREPORTTYPE = Property.ForName(PROPERTY_CHANNELID_ALIAS_NAME + ".StateReportType");
		public static readonly Property PROPERTY_CHANNELID_REPORTOKMESSAGE = Property.ForName(PROPERTY_CHANNELID_ALIAS_NAME + ".ReportOkMessage");
		public static readonly Property PROPERTY_CHANNELID_REPORTFAILEDMESSAGE = Property.ForName(PROPERTY_CHANNELID_ALIAS_NAME + ".ReportFailedMessage");
		public static readonly Property PROPERTY_CHANNELID_STATEREPORTPARAMNAME = Property.ForName(PROPERTY_CHANNELID_ALIAS_NAME + ".StateReportParamName");
		public static readonly Property PROPERTY_CHANNELID_STATEREPORTPARAMVALUE = Property.ForName(PROPERTY_CHANNELID_ALIAS_NAME + ".StateReportParamValue");
		public static readonly Property PROPERTY_CHANNELID_REQUESTTYPEPARAMNAME = Property.ForName(PROPERTY_CHANNELID_ALIAS_NAME + ".RequestTypeParamName");
		public static readonly Property PROPERTY_CHANNELID_REQUESTTYPEPARAMSTATEREPORTVALUE = Property.ForName(PROPERTY_CHANNELID_ALIAS_NAME + ".RequestTypeParamStateReportValue");
		public static readonly Property PROPERTY_CHANNELID_REQUESTTYPEPARAMDATAREPORTVALUE = Property.ForName(PROPERTY_CHANNELID_ALIAS_NAME + ".RequestTypeParamDataReportValue");
		public static readonly Property PROPERTY_CHANNELID_HASFILTERS = Property.ForName(PROPERTY_CHANNELID_ALIAS_NAME + ".HasFilters");
		public static readonly Property PROPERTY_CHANNELID_ISMONITORREQUEST = Property.ForName(PROPERTY_CHANNELID_ALIAS_NAME + ".IsMonitorRequest");
		public static readonly Property PROPERTY_CHANNELID_ISLOGREQUEST = Property.ForName(PROPERTY_CHANNELID_ALIAS_NAME + ".IsLogRequest");
		public static readonly Property PROPERTY_CHANNELID_ISPARAMSCONVERT = Property.ForName(PROPERTY_CHANNELID_ALIAS_NAME + ".IsParamsConvert");
		public static readonly Property PROPERTY_CHANNELID_ISAUTOLINKID = Property.ForName(PROPERTY_CHANNELID_ALIAS_NAME + ".IsAutoLinkID");
		public static readonly Property PROPERTY_CHANNELID_AUTOLINKIDFIELDS = Property.ForName(PROPERTY_CHANNELID_ALIAS_NAME + ".AutoLinkIDFields");
		public static readonly Property PROPERTY_CHANNELID_LOGREQUESTTYPE = Property.ForName(PROPERTY_CHANNELID_ALIAS_NAME + ".LogRequestType");
		public static readonly Property PROPERTY_CHANNELID_PRICE = Property.ForName(PROPERTY_CHANNELID_ALIAS_NAME + ".Price");
		public static readonly Property PROPERTY_CHANNELID_DEFAULTRATE = Property.ForName(PROPERTY_CHANNELID_ALIAS_NAME + ".DefaultRate");
		public static readonly Property PROPERTY_CHANNELID_CHANNELDETAILINFO = Property.ForName(PROPERTY_CHANNELID_ALIAS_NAME + ".ChannelDetailInfo");
		public static readonly Property PROPERTY_CHANNELID_UPPERID = Property.ForName(PROPERTY_CHANNELID_ALIAS_NAME + ".UpperID");
		public static readonly Property PROPERTY_CHANNELID_CHANNELSTATUS = Property.ForName(PROPERTY_CHANNELID_ALIAS_NAME + ".ChannelStatus");
		public static readonly Property PROPERTY_CHANNELID_ISDISABLE = Property.ForName(PROPERTY_CHANNELID_ALIAS_NAME + ".IsDisable");
		public static readonly Property PROPERTY_CHANNELID_CREATEBY = Property.ForName(PROPERTY_CHANNELID_ALIAS_NAME + ".CreateBy");
		public static readonly Property PROPERTY_CHANNELID_CREATEAT = Property.ForName(PROPERTY_CHANNELID_ALIAS_NAME + ".CreateAt");
		public static readonly Property PROPERTY_CHANNELID_LASTMODIFYBY = Property.ForName(PROPERTY_CHANNELID_ALIAS_NAME + ".LastModifyBy");
		public static readonly Property PROPERTY_CHANNELID_LASTMODIFYAT = Property.ForName(PROPERTY_CHANNELID_ALIAS_NAME + ".LastModifyAt");
		public static readonly Property PROPERTY_CHANNELID_LASTMODIFYCOMMENT = Property.ForName(PROPERTY_CHANNELID_ALIAS_NAME + ".LastModifyComment");
		#endregion
		public static readonly Property PROPERTY_CLIENTID = Property.ForName(SPRecordEntity.PROPERTY_NAME_CLIENTID);
		#region clientID字段外键查询字段
        public static NHibernateDynamicQueryGenerator<SPRecordEntity> InClude_ClientID_Query(NHibernateDynamicQueryGenerator<SPRecordEntity> queryGenerator)
        {
            return queryGenerator.AddAlians(SPRecordEntity.PROPERTY_NAME_CLIENTID, PROPERTY_CLIENTID_ALIAS_NAME);
        }
        public static readonly string PROPERTY_CLIENTID_ALIAS_NAME = "ClientID_SPRecordEntity_Alias";
		public static readonly Property PROPERTY_CLIENTID_ID = Property.ForName(PROPERTY_CLIENTID_ALIAS_NAME + ".Id");
		public static readonly Property PROPERTY_CLIENTID_NAME = Property.ForName(PROPERTY_CLIENTID_ALIAS_NAME + ".Name");
		public static readonly Property PROPERTY_CLIENTID_DESCRIPTION = Property.ForName(PROPERTY_CLIENTID_ALIAS_NAME + ".Description");
		public static readonly Property PROPERTY_CLIENTID_USERID = Property.ForName(PROPERTY_CLIENTID_ALIAS_NAME + ".UserID");
		public static readonly Property PROPERTY_CLIENTID_ISDEFAULTCLIENT = Property.ForName(PROPERTY_CLIENTID_ALIAS_NAME + ".IsDefaultClient");
		public static readonly Property PROPERTY_CLIENTID_SYNCDATA = Property.ForName(PROPERTY_CLIENTID_ALIAS_NAME + ".SyncData");
		public static readonly Property PROPERTY_CLIENTID_SYCNNOTINTERCEPTCOUNT = Property.ForName(PROPERTY_CLIENTID_ALIAS_NAME + ".SycnNotInterceptCount");
		public static readonly Property PROPERTY_CLIENTID_SYNCDATASETTING = Property.ForName(PROPERTY_CLIENTID_ALIAS_NAME + ".SyncDataSetting");
		public static readonly Property PROPERTY_CLIENTID_ALIAS = Property.ForName(PROPERTY_CLIENTID_ALIAS_NAME + ".Alias");
		public static readonly Property PROPERTY_CLIENTID_INTERCEPTRATE = Property.ForName(PROPERTY_CLIENTID_ALIAS_NAME + ".InterceptRate");
		public static readonly Property PROPERTY_CLIENTID_DEFAULTPRICE = Property.ForName(PROPERTY_CLIENTID_ALIAS_NAME + ".DefaultPrice");
		public static readonly Property PROPERTY_CLIENTID_DEFAULTSHOWRECORDDAYS = Property.ForName(PROPERTY_CLIENTID_ALIAS_NAME + ".DefaultShowRecordDays");
		public static readonly Property PROPERTY_CLIENTID_CREATEBY = Property.ForName(PROPERTY_CLIENTID_ALIAS_NAME + ".CreateBy");
		public static readonly Property PROPERTY_CLIENTID_CREATEAT = Property.ForName(PROPERTY_CLIENTID_ALIAS_NAME + ".CreateAt");
		public static readonly Property PROPERTY_CLIENTID_LASTMODIFYBY = Property.ForName(PROPERTY_CLIENTID_ALIAS_NAME + ".LastModifyBy");
		public static readonly Property PROPERTY_CLIENTID_LASTMODIFYAT = Property.ForName(PROPERTY_CLIENTID_ALIAS_NAME + ".LastModifyAt");
		public static readonly Property PROPERTY_CLIENTID_LASTMODIFYCOMMENT = Property.ForName(PROPERTY_CLIENTID_ALIAS_NAME + ".LastModifyComment");
		#endregion
		public static readonly Property PROPERTY_CODEID = Property.ForName(SPRecordEntity.PROPERTY_NAME_CODEID);
		#region codeID字段外键查询字段
        public static NHibernateDynamicQueryGenerator<SPRecordEntity> InClude_CodeID_Query(NHibernateDynamicQueryGenerator<SPRecordEntity> queryGenerator)
        {
            return queryGenerator.AddAlians(SPRecordEntity.PROPERTY_NAME_CODEID, PROPERTY_CODEID_ALIAS_NAME);
        }
        public static readonly string PROPERTY_CODEID_ALIAS_NAME = "CodeID_SPRecordEntity_Alias";
		public static readonly Property PROPERTY_CODEID_ID = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".Id");
		public static readonly Property PROPERTY_CODEID_NAME = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".Name");
		public static readonly Property PROPERTY_CODEID_DESCRIPTION = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".Description");
		public static readonly Property PROPERTY_CODEID_CODE = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".Code");
		public static readonly Property PROPERTY_CODEID_CODETYPE = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".CodeType");
		public static readonly Property PROPERTY_CODEID_CHANNELID = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".ChannelID");
		public static readonly Property PROPERTY_CODEID_MO = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".Mo");
		public static readonly Property PROPERTY_CODEID_MOTYPE = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".MOType");
		public static readonly Property PROPERTY_CODEID_MOLENGTH = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".MOLength");
		public static readonly Property PROPERTY_CODEID_ORDERINDEX = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".OrderIndex");
		public static readonly Property PROPERTY_CODEID_SPCODE = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".SPCode");
		public static readonly Property PROPERTY_CODEID_SPCODETYPE = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".SPCodeType");
		public static readonly Property PROPERTY_CODEID_SPCODELENGTH = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".SPCodeLength");
		public static readonly Property PROPERTY_CODEID_HASFILTERS = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".HasFilters");
		public static readonly Property PROPERTY_CODEID_HASPARAMSCONVERT = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".HasParamsConvert");
		public static readonly Property PROPERTY_CODEID_ISDIABLE = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".IsDiable");
		public static readonly Property PROPERTY_CODEID_PRICE = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".Price");
		public static readonly Property PROPERTY_CODEID_OPERATIONTYPE = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".OperationType");
		public static readonly Property PROPERTY_CODEID_HASDAYTOTALLIMIT = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".HasDayTotalLimit");
		public static readonly Property PROPERTY_CODEID_DAYTOTALLIMITCOUNT = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".DayTotalLimitCount");
		public static readonly Property PROPERTY_CODEID_HASPHONELIMIT = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".HasPhoneLimit");
		public static readonly Property PROPERTY_CODEID_PHONELIMITDAYCOUNT = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".PhoneLimitDayCount");
		public static readonly Property PROPERTY_CODEID_PHONELIMITMONTHCOUNT = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".PhoneLimitMonthCount");
		public static readonly Property PROPERTY_CODEID_PHONELIMITTYPE = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".PhoneLimitType");
		public static readonly Property PROPERTY_CODEID_LIMITPROVINCE = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".LimitProvince");
		public static readonly Property PROPERTY_CODEID_LIMITPROVINCEAREA = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".LimitProvinceArea");
		public static readonly Property PROPERTY_CODEID_PARENTID = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".ParentID");
		public static readonly Property PROPERTY_CODEID_CREATEBY = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".CreateBy");
		public static readonly Property PROPERTY_CODEID_CREATEAT = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".CreateAt");
		public static readonly Property PROPERTY_CODEID_LASTMODIFYBY = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".LastModifyBy");
		public static readonly Property PROPERTY_CODEID_LASTMODIFYAT = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".LastModifyAt");
		public static readonly Property PROPERTY_CODEID_LASTMODIFYCOMMENT = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".LastModifyComment");
		#endregion
		public static readonly Property PROPERTY_CLIENTCODERELATIONID = Property.ForName(SPRecordEntity.PROPERTY_NAME_CLIENTCODERELATIONID);
		#region clientCodeRelationID字段外键查询字段
        public static NHibernateDynamicQueryGenerator<SPRecordEntity> InClude_ClientCodeRelationID_Query(NHibernateDynamicQueryGenerator<SPRecordEntity> queryGenerator)
        {
            return queryGenerator.AddAlians(SPRecordEntity.PROPERTY_NAME_CLIENTCODERELATIONID, PROPERTY_CLIENTCODERELATIONID_ALIAS_NAME);
        }
        public static readonly string PROPERTY_CLIENTCODERELATIONID_ALIAS_NAME = "ClientCodeRelationID_SPRecordEntity_Alias";
		public static readonly Property PROPERTY_CLIENTCODERELATIONID_ID = Property.ForName(PROPERTY_CLIENTCODERELATIONID_ALIAS_NAME + ".Id");
		public static readonly Property PROPERTY_CLIENTCODERELATIONID_CODEID = Property.ForName(PROPERTY_CLIENTCODERELATIONID_ALIAS_NAME + ".CodeID");
		public static readonly Property PROPERTY_CLIENTCODERELATIONID_CLIENTID = Property.ForName(PROPERTY_CLIENTCODERELATIONID_ALIAS_NAME + ".ClientID");
		public static readonly Property PROPERTY_CLIENTCODERELATIONID_PRICE = Property.ForName(PROPERTY_CLIENTCODERELATIONID_ALIAS_NAME + ".Price");
		public static readonly Property PROPERTY_CLIENTCODERELATIONID_INTERCEPTRATE = Property.ForName(PROPERTY_CLIENTCODERELATIONID_ALIAS_NAME + ".InterceptRate");
		public static readonly Property PROPERTY_CLIENTCODERELATIONID_USECLIENTDEFAULTSYCNSETTING = Property.ForName(PROPERTY_CLIENTCODERELATIONID_ALIAS_NAME + ".UseClientDefaultSycnSetting");
		public static readonly Property PROPERTY_CLIENTCODERELATIONID_SYNCDATA = Property.ForName(PROPERTY_CLIENTCODERELATIONID_ALIAS_NAME + ".SyncData");
		public static readonly Property PROPERTY_CLIENTCODERELATIONID_SYCNRETRYTIMES = Property.ForName(PROPERTY_CLIENTCODERELATIONID_ALIAS_NAME + ".SycnRetryTimes");
		public static readonly Property PROPERTY_CLIENTCODERELATIONID_SYNCDATASETTING = Property.ForName(PROPERTY_CLIENTCODERELATIONID_ALIAS_NAME + ".SyncDataSetting");
		public static readonly Property PROPERTY_CLIENTCODERELATIONID_STARTDATE = Property.ForName(PROPERTY_CLIENTCODERELATIONID_ALIAS_NAME + ".StartDate");
		public static readonly Property PROPERTY_CLIENTCODERELATIONID_ENDDATE = Property.ForName(PROPERTY_CLIENTCODERELATIONID_ALIAS_NAME + ".EndDate");
		public static readonly Property PROPERTY_CLIENTCODERELATIONID_ISENABLE = Property.ForName(PROPERTY_CLIENTCODERELATIONID_ALIAS_NAME + ".IsEnable");
		public static readonly Property PROPERTY_CLIENTCODERELATIONID_SYCNNOTINTERCEPTCOUNT = Property.ForName(PROPERTY_CLIENTCODERELATIONID_ALIAS_NAME + ".SycnNotInterceptCount");
		public static readonly Property PROPERTY_CLIENTCODERELATIONID_DEFAULTSHOWRECORDDAYS = Property.ForName(PROPERTY_CLIENTCODERELATIONID_ALIAS_NAME + ".DefaultShowRecordDays");
		public static readonly Property PROPERTY_CLIENTCODERELATIONID_CREATEBY = Property.ForName(PROPERTY_CLIENTCODERELATIONID_ALIAS_NAME + ".CreateBy");
		public static readonly Property PROPERTY_CLIENTCODERELATIONID_CREATEAT = Property.ForName(PROPERTY_CLIENTCODERELATIONID_ALIAS_NAME + ".CreateAt");
		public static readonly Property PROPERTY_CLIENTCODERELATIONID_LASTMODIFYBY = Property.ForName(PROPERTY_CLIENTCODERELATIONID_ALIAS_NAME + ".LastModifyBy");
		public static readonly Property PROPERTY_CLIENTCODERELATIONID_LASTMODIFYAT = Property.ForName(PROPERTY_CLIENTCODERELATIONID_ALIAS_NAME + ".LastModifyAt");
		public static readonly Property PROPERTY_CLIENTCODERELATIONID_LASTMODIFYCOMMENT = Property.ForName(PROPERTY_CLIENTCODERELATIONID_ALIAS_NAME + ".LastModifyComment");
		#endregion
		public static readonly Property PROPERTY_PRICE = Property.ForName(SPRecordEntity.PROPERTY_NAME_PRICE);
		public static readonly Property PROPERTY_COUNT = Property.ForName(SPRecordEntity.PROPERTY_NAME_COUNT);
      
		#region 子类集合字段查询字段
	
		#endregion

		#endregion

		
		public override string[] PkPropertyName
        {
            get { return new string[] { "Id" }; }
        }
		
		public override Type GetFieldTypeByFieldName(string fieldName)
        {
			switch (fieldName)
            {
                case "Id":
                    return typeof (int);
                case "LinkID":
                    return typeof (string);
                case "Mo":
                    return typeof (string);
                case "Mobile":
                    return typeof (string);
                case "SpNumber":
                    return typeof (string);
                case "Province":
                    return typeof (string);
                case "City":
                    return typeof (string);
                case "OperatorType":
                    return typeof (string);
                case "CreateDate":
                    return typeof (DateTime);
                case "IsReport":
                    return typeof (bool);
                case "IsIntercept":
                    return typeof (bool);
                case "IsSycnToClient":
                    return typeof (bool);
                case "IsSycnSuccessed":
                    return typeof (bool);
                case "IsStatOK":
                    return typeof (bool);
                case "SycnRetryTimes":
                    return typeof (int);
                case "ChannelID":
                    return typeof (int);
                case "ClientID":
                    return typeof (int);
                case "CodeID":
                    return typeof (int);
                case "ClientCodeRelationID":
                    return typeof (int);
                case "Price":
                    return typeof (decimal);
                case "Count":
                    return typeof (int);
          }
			return typeof(string);
        }
		
				public List<SPRecordEntity> GetList_By_SPChannelEntity(SPChannelEntity fkentity)
		{
			NHibernateDynamicQueryGenerator<SPRecordEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_CHANNELID.Eq(fkentity));

            return this.FindListByQueryBuilder(dynamicQueryGenerator);
		}
		
		
        public List<SPRecordEntity> GetPageList_By_SPChannelEntity(string orderByColumnName, bool isDesc, int pageIndex, int pageSize, SPChannelEntity fkentity, out int recordCount)
        {
            NHibernateDynamicQueryGenerator<SPRecordEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_CHANNELID.Eq(fkentity));

            AddDefaultOrderByToQueryGenerator(orderByColumnName, isDesc, dynamicQueryGenerator);

            dynamicQueryGenerator.SetFirstResult((pageIndex - 1) * pageSize);

            dynamicQueryGenerator.SetMaxResults(pageSize);

            return FindListByPageByQueryBuilder(dynamicQueryGenerator, out recordCount);
        }		
		
		public List<SPRecordEntity> GetList_By_SPSClientEntity(SPSClientEntity fkentity)
		{
			NHibernateDynamicQueryGenerator<SPRecordEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_CLIENTID.Eq(fkentity));

            return this.FindListByQueryBuilder(dynamicQueryGenerator);
		}
		
		
        public List<SPRecordEntity> GetPageList_By_SPSClientEntity(string orderByColumnName, bool isDesc, int pageIndex, int pageSize, SPSClientEntity fkentity, out int recordCount)
        {
            NHibernateDynamicQueryGenerator<SPRecordEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_CLIENTID.Eq(fkentity));

            AddDefaultOrderByToQueryGenerator(orderByColumnName, isDesc, dynamicQueryGenerator);

            dynamicQueryGenerator.SetFirstResult((pageIndex - 1) * pageSize);

            dynamicQueryGenerator.SetMaxResults(pageSize);

            return FindListByPageByQueryBuilder(dynamicQueryGenerator, out recordCount);
        }		
		
		public List<SPRecordEntity> GetList_By_SPCodeEntity(SPCodeEntity fkentity)
		{
			NHibernateDynamicQueryGenerator<SPRecordEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_CODEID.Eq(fkentity));

            return this.FindListByQueryBuilder(dynamicQueryGenerator);
		}
		
		
        public List<SPRecordEntity> GetPageList_By_SPCodeEntity(string orderByColumnName, bool isDesc, int pageIndex, int pageSize, SPCodeEntity fkentity, out int recordCount)
        {
            NHibernateDynamicQueryGenerator<SPRecordEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_CODEID.Eq(fkentity));

            AddDefaultOrderByToQueryGenerator(orderByColumnName, isDesc, dynamicQueryGenerator);

            dynamicQueryGenerator.SetFirstResult((pageIndex - 1) * pageSize);

            dynamicQueryGenerator.SetMaxResults(pageSize);

            return FindListByPageByQueryBuilder(dynamicQueryGenerator, out recordCount);
        }		
		
		public List<SPRecordEntity> GetList_By_SPClientCodeRelationEntity(SPClientCodeRelationEntity fkentity)
		{
			NHibernateDynamicQueryGenerator<SPRecordEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_CLIENTCODERELATIONID.Eq(fkentity));

            return this.FindListByQueryBuilder(dynamicQueryGenerator);
		}
		
		
        public List<SPRecordEntity> GetPageList_By_SPClientCodeRelationEntity(string orderByColumnName, bool isDesc, int pageIndex, int pageSize, SPClientCodeRelationEntity fkentity, out int recordCount)
        {
            NHibernateDynamicQueryGenerator<SPRecordEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_CLIENTCODERELATIONID.Eq(fkentity));

            AddDefaultOrderByToQueryGenerator(orderByColumnName, isDesc, dynamicQueryGenerator);

            dynamicQueryGenerator.SetFirstResult((pageIndex - 1) * pageSize);

            dynamicQueryGenerator.SetMaxResults(pageSize);

            return FindListByPageByQueryBuilder(dynamicQueryGenerator, out recordCount);
        }		
		

		
		
		
    }
}
