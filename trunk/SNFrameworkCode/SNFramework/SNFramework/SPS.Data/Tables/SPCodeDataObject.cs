// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using Legendigital.Framework.Common.BaseFramework.Bussiness.SystemConst;
using NHibernate.Criterion;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;
using SPS.Entity.Tables;
using Legendigital.Framework.Common.Data.NHibernate;

namespace SPS.Data.Tables
{
    public partial class SPCodeDataObject
    {
        public SPCodeEntity GetCodeByCode(string code)
        {
            NHibernateDynamicQueryGenerator<SPCodeEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            //指定查询条件
            dynamicQueryGenerator.AddWhereClause(SPCodeDataObject.PROPERTY_CODE.Eq(code));
 

            return this.FindSingleEntityByQueryBuilder(dynamicQueryGenerator);
        }

        public SPCodeEntity GetCodeByMoAndSPCodeAndMoTypeAndNoFilter(string mo, string spCode, string moType, string spCodeType,string codeType)
        {
            NHibernateDynamicQueryGenerator<SPCodeEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            //指定查询条件

            dynamicQueryGenerator.AddWhereClause(SPCodeDataObject.PROPERTY_CODETYPE.Eq(codeType));
            dynamicQueryGenerator.AddWhereClause(SPCodeDataObject.PROPERTY_MO.Eq(mo));
            dynamicQueryGenerator.AddWhereClause(SPCodeDataObject.PROPERTY_MOTYPE.Eq(moType));
            dynamicQueryGenerator.AddWhereClause(SPCodeDataObject.PROPERTY_SPCODE.Eq(spCode));
            dynamicQueryGenerator.AddWhereClause(SPCodeDataObject.PROPERTY_SPCODETYPE.Eq(spCodeType));

            dynamicQueryGenerator.AddWhereClause(SPCodeDataObject.PROPERTY_HASFILTERS.Eq(false));

            return this.FindSingleEntityByQueryBuilder(dynamicQueryGenerator);
        }


        public List<SPCodeEntity> GetAllRootCode()
        {
            NHibernateDynamicQueryGenerator<SPCodeEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            //排除默认指令
            dynamicQueryGenerator.AddWhereClause(Not(SPCodeDataObject.PROPERTY_CODETYPE.Eq(DictionaryConst.Dictionary_CodeType_CodeDefault_Key)));

            List<SPCodeEntity> allCodes = this.FindListByQueryBuilder(dynamicQueryGenerator);

            var allrootCode = allCodes.FindAll(p => (p.CheckIsRoot(allCodes)));

            return allrootCode;
        }
    }
}
