// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using NHibernate.Criterion;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery.Propertys;
using SPS.Entity.Tables;
using Legendigital.Framework.Common.Data.NHibernate;


namespace SPS.Data.Tables
{
    public partial class SPCodeDataObject : BaseNHibernateDataObject<SPCodeEntity>
    {
		#region Expression Query Property (标准查询字段)
		public static readonly IntProperty PROPERTY_ID = new IntProperty(Property.ForName(SPCodeEntity.PROPERTY_NAME_ID));		
		public static readonly StringProperty PROPERTY_NAME = new StringProperty(Property.ForName(SPCodeEntity.PROPERTY_NAME_NAME));		
		public static readonly StringProperty PROPERTY_DESCRIPTION = new StringProperty(Property.ForName(SPCodeEntity.PROPERTY_NAME_DESCRIPTION));		
		public static readonly StringProperty PROPERTY_CODE = new StringProperty(Property.ForName(SPCodeEntity.PROPERTY_NAME_CODE));		
		public static readonly IntProperty PROPERTY_CHANNELID = new IntProperty(Property.ForName(SPCodeEntity.PROPERTY_NAME_CHANNELID));		
		public static readonly StringProperty PROPERTY_MO = new StringProperty(Property.ForName(SPCodeEntity.PROPERTY_NAME_MO));		
		public static readonly StringProperty PROPERTY_MOTYPE = new StringProperty(Property.ForName(SPCodeEntity.PROPERTY_NAME_MOTYPE));		
		public static readonly IntProperty PROPERTY_ORDERINDEX = new IntProperty(Property.ForName(SPCodeEntity.PROPERTY_NAME_ORDERINDEX));		
		public static readonly StringProperty PROPERTY_SPCODE = new StringProperty(Property.ForName(SPCodeEntity.PROPERTY_NAME_SPCODE));		
		public static readonly StringProperty PROPERTY_PROVINCE = new StringProperty(Property.ForName(SPCodeEntity.PROPERTY_NAME_PROVINCE));		
		public static readonly StringProperty PROPERTY_DISABLECITY = new StringProperty(Property.ForName(SPCodeEntity.PROPERTY_NAME_DISABLECITY));		
		public static readonly BoolProperty PROPERTY_ISDIABLE = new BoolProperty(Property.ForName(SPCodeEntity.PROPERTY_NAME_ISDIABLE));		
		public static readonly StringProperty PROPERTY_SPTYPE = new StringProperty(Property.ForName(SPCodeEntity.PROPERTY_NAME_SPTYPE));		
		public static readonly IntProperty PROPERTY_CODELENGTH = new IntProperty(Property.ForName(SPCodeEntity.PROPERTY_NAME_CODELENGTH));		
		public static readonly IntProperty PROPERTY_DAYLIMIT = new IntProperty(Property.ForName(SPCodeEntity.PROPERTY_NAME_DAYLIMIT));		
		public static readonly IntProperty PROPERTY_MONTHLIMIT = new IntProperty(Property.ForName(SPCodeEntity.PROPERTY_NAME_MONTHLIMIT));		
		public static readonly DecimalProperty PROPERTY_PRICE = new DecimalProperty(Property.ForName(SPCodeEntity.PROPERTY_NAME_PRICE));		
		public static readonly StringProperty PROPERTY_SENDTEXT = new StringProperty(Property.ForName(SPCodeEntity.PROPERTY_NAME_SENDTEXT));		
		public static readonly BoolProperty PROPERTY_HASFILTERS = new BoolProperty(Property.ForName(SPCodeEntity.PROPERTY_NAME_HASFILTERS));		
      
		#region 子类集合字段查询字段
	
		#endregion

		#endregion

		
		public override string[] PkPropertyName
        {
            get { return new string[] { "Id" }; }
        }
		
		public override Type GetFieldTypeByFieldName(string fieldName)
        {
			switch (fieldName)
            {
                case "Id":
                    return typeof (int);
                case "Name":
                    return typeof (string);
                case "Description":
                    return typeof (string);
                case "Code":
                    return typeof (string);
                case "ChannelID":
                    return typeof (int);
                case "Mo":
                    return typeof (string);
                case "MOType":
                    return typeof (string);
                case "OrderIndex":
                    return typeof (int);
                case "SPCode":
                    return typeof (string);
                case "Province":
                    return typeof (string);
                case "DisableCity":
                    return typeof (string);
                case "IsDiable":
                    return typeof (bool);
                case "SPType":
                    return typeof (string);
                case "CodeLength":
                    return typeof (int);
                case "DayLimit":
                    return typeof (int);
                case "MonthLimit":
                    return typeof (int);
                case "Price":
                    return typeof (decimal);
                case "SendText":
                    return typeof (string);
                case "HasFilters":
                    return typeof (bool);
          }
			return typeof(string);
        }
		

		
		
    }
}
