// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using NHibernate.Criterion;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery.Propertys;
using SPS.Entity.Tables;
using Legendigital.Framework.Common.Data.NHibernate;


namespace SPS.Data.Tables
{
    public partial class SPChannelDataObject : BaseNHibernateDataObject<SPChannelEntity>
    {
		#region Expression Query Property (标准查询字段)
		public static readonly IntProperty PROPERTY_ID = new IntProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_ID));		
		public static readonly StringProperty PROPERTY_NAME = new StringProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_NAME));		
		public static readonly StringProperty PROPERTY_DESCRIPTION = new StringProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_DESCRIPTION));		
		public static readonly StringProperty PROPERTY_CODE = new StringProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_CODE));		
		public static readonly BoolProperty PROPERTY_OTHERRECIEVED = new BoolProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_OTHERRECIEVED));		
		public static readonly StringProperty PROPERTY_RECIEVEDNAME = new StringProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_RECIEVEDNAME));		
		public static readonly BoolProperty PROPERTY_ISALLOWNULLLINKID = new BoolProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_ISALLOWNULLLINKID));		
		public static readonly BoolProperty PROPERTY_ISMONITORREQUEST = new BoolProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_ISMONITORREQUEST));		
		public static readonly BoolProperty PROPERTY_ISDISABLE = new BoolProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_ISDISABLE));		
		public static readonly StringProperty PROPERTY_DATAOKMESSAGE = new StringProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_DATAOKMESSAGE));		
		public static readonly StringProperty PROPERTY_DATAFAILEDMESSAGE = new StringProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_DATAFAILEDMESSAGE));		
		public static readonly StringProperty PROPERTY_REPORTOKMESSAGE = new StringProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_REPORTOKMESSAGE));		
		public static readonly StringProperty PROPERTY_REPORTFAILEDMESSAGE = new StringProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_REPORTFAILEDMESSAGE));		
		public static readonly BoolProperty PROPERTY_STATSENDONCE = new BoolProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_STATSENDONCE));		
		public static readonly BoolProperty PROPERTY_TYPEREQUEST = new BoolProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_TYPEREQUEST));		
		public static readonly StringProperty PROPERTY_DATAPARAMNAME = new StringProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_DATAPARAMNAME));		
		public static readonly StringProperty PROPERTY_DATAPARAMVALUE = new StringProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_DATAPARAMVALUE));		
		public static readonly StringProperty PROPERTY_REPORTPARAMNAME = new StringProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_REPORTPARAMNAME));		
		public static readonly StringProperty PROPERTY_REPORTPARAMVALUE = new StringProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_REPORTPARAMVALUE));		
		public static readonly BoolProperty PROPERTY_HASFILTERS = new BoolProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_HASFILTERS));		
		public static readonly StringProperty PROPERTY_STATUSPARAMNAME = new StringProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_STATUSPARAMNAME));		
		public static readonly StringProperty PROPERTY_STATUSPARAMVALUE = new StringProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_STATUSPARAMVALUE));		
		public static readonly DecimalProperty PROPERTY_PRICE = new DecimalProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_PRICE));		
		public static readonly DecimalProperty PROPERTY_DEFAULTRATE = new DecimalProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_DEFAULTRATE));		
		public static readonly BoolProperty PROPERTY_HASSTATREPORT = new BoolProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_HASSTATREPORT));		
		public static readonly StringProperty PROPERTY_CHANNELDETAILINFO = new StringProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_CHANNELDETAILINFO));		
		public static readonly EntityProperty<SPUpperEntity> PROPERTY_UPPERID = new EntityProperty<SPUpperEntity>(Property.ForName(SPChannelEntity.PROPERTY_NAME_UPPERID));
		#region upperID字段外键查询字段
        public static NHibernateDynamicQueryGenerator<SPChannelEntity> InClude_UpperID_Query(NHibernateDynamicQueryGenerator<SPChannelEntity> queryGenerator)
        {
            return queryGenerator.AddAlians(SPChannelEntity.PROPERTY_NAME_UPPERID, PROPERTY_UPPERID_ALIAS_NAME);
        }
        public static readonly string PROPERTY_UPPERID_ALIAS_NAME = "UpperID_SPChannelEntity_Alias";
		public static readonly IntProperty PROPERTY_UPPERID_ID = new IntProperty(Property.ForName(PROPERTY_UPPERID_ALIAS_NAME + ".Id"));
		public static readonly StringProperty PROPERTY_UPPERID_NAME = new StringProperty(Property.ForName(PROPERTY_UPPERID_ALIAS_NAME + ".Name"));
		public static readonly StringProperty PROPERTY_UPPERID_CODE = new StringProperty(Property.ForName(PROPERTY_UPPERID_ALIAS_NAME + ".Code"));
		public static readonly StringProperty PROPERTY_UPPERID_DESCRIPTION = new StringProperty(Property.ForName(PROPERTY_UPPERID_ALIAS_NAME + ".Description"));
		public static readonly DateTimeProperty PROPERTY_UPPERID_CREATEDATE = new DateTimeProperty(Property.ForName(PROPERTY_UPPERID_ALIAS_NAME + ".CreateDate"));
		#endregion
      
		#region 子类集合字段查询字段
	
		#endregion

		#endregion

		
		public override string[] PkPropertyName
        {
            get { return new string[] { "Id" }; }
        }
		
		public override Type GetFieldTypeByFieldName(string fieldName)
        {
			switch (fieldName)
            {
                case "Id":
                    return typeof (int);
                case "Name":
                    return typeof (string);
                case "Description":
                    return typeof (string);
                case "Code":
                    return typeof (string);
                case "OtherRecieved":
                    return typeof (bool);
                case "RecievedName":
                    return typeof (string);
                case "IsAllowNullLinkID":
                    return typeof (bool);
                case "IsMonitorRequest":
                    return typeof (bool);
                case "IsDisable":
                    return typeof (bool);
                case "DataOkMessage":
                    return typeof (string);
                case "DataFailedMessage":
                    return typeof (string);
                case "ReportOkMessage":
                    return typeof (string);
                case "ReportFailedMessage":
                    return typeof (string);
                case "StatSendOnce":
                    return typeof (bool);
                case "TypeRequest":
                    return typeof (bool);
                case "DataParamName":
                    return typeof (string);
                case "DataParamValue":
                    return typeof (string);
                case "ReportParamName":
                    return typeof (string);
                case "ReportParamValue":
                    return typeof (string);
                case "HasFilters":
                    return typeof (bool);
                case "StatusParamName":
                    return typeof (string);
                case "StatusParamValue":
                    return typeof (string);
                case "Price":
                    return typeof (decimal);
                case "DefaultRate":
                    return typeof (decimal);
                case "HasStatReport":
                    return typeof (bool);
                case "ChannelDetailInfo":
                    return typeof (string);
                case "UpperID":
                    return typeof (int);
          }
			return typeof(string);
        }
		
		public List<SPChannelEntity> GetList_By_UpperID_SPUpperEntity(SPUpperEntity fkentity)
		{
			NHibernateDynamicQueryGenerator<SPChannelEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_UPPERID.Eq(fkentity));

            return this.FindListByQueryBuilder(dynamicQueryGenerator);
		}
		
		
        public List<SPChannelEntity> GetPageList_By_UpperID_SPUpperEntity(string orderByColumnName, bool isDesc, SPUpperEntity fkentity, PageQueryParams pageQueryParams)
        {
            NHibernateDynamicQueryGenerator<SPChannelEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_UPPERID.Eq(fkentity));

            AddDefaultOrderByToQueryGenerator(orderByColumnName, isDesc, dynamicQueryGenerator);

            return FindListByPageByQueryBuilder(dynamicQueryGenerator, pageQueryParams);
        }		
		

		
		
    }
}
