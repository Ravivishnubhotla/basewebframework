// --------------------------------------------------------------------------------------------------------------------
// <copyright company="foreveross" file="SPChannelDataObject.Designer.cs">
//   Copyright (c) Foreveross Enterprises. All rights reserved.
// </copyright>
// <summary>
//   Generated by MyGeneration Version # (1.3.0.9)
// </summary>
// --------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Text;
using NHibernate.Criterion;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery.Propertys;
using SPS.Entity.Tables;
using Legendigital.Framework.Common.Data.NHibernate;


namespace SPS.Data.Tables
{
    public partial class SPChannelDataObject : BaseNHibernateDataObject<SPChannelEntity,int>
    {
		#region Expression Query Property (标准查询字段)
		public static readonly IntProperty PROPERTY_ID = new IntProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_ID));		
		public static readonly StringProperty PROPERTY_NAME = new StringProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_NAME));		
		public static readonly StringProperty PROPERTY_CODE = new StringProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_CODE));		
		public static readonly StringProperty PROPERTY_DATAOKMESSAGE = new StringProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_DATAOKMESSAGE));		
		public static readonly StringProperty PROPERTY_DATAFAILEDMESSAGE = new StringProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_DATAFAILEDMESSAGE));		
		public static readonly StringProperty PROPERTY_DESCRIPTION = new StringProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_DESCRIPTION));		
		public static readonly StringProperty PROPERTY_DATAADAPTERTYPE = new StringProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_DATAADAPTERTYPE));		
		public static readonly StringProperty PROPERTY_DATAADAPTERURL = new StringProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_DATAADAPTERURL));		
		public static readonly StringProperty PROPERTY_CHANNELTYPE = new StringProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_CHANNELTYPE));		
		public static readonly StringProperty PROPERTY_IVRFEETIMETYPE = new StringProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_IVRFEETIMETYPE));		
		public static readonly StringProperty PROPERTY_IVRTIMEFORMAT = new StringProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_IVRTIMEFORMAT));		
		public static readonly BoolProperty PROPERTY_ISSTATEREPORT = new BoolProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_ISSTATEREPORT));		
		public static readonly StringProperty PROPERTY_STATEREPORTTYPE = new StringProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_STATEREPORTTYPE));		
		public static readonly StringProperty PROPERTY_REPORTOKMESSAGE = new StringProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_REPORTOKMESSAGE));		
		public static readonly StringProperty PROPERTY_REPORTFAILEDMESSAGE = new StringProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_REPORTFAILEDMESSAGE));		
		public static readonly StringProperty PROPERTY_STATEREPORTPARAMNAME = new StringProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_STATEREPORTPARAMNAME));		
		public static readonly StringProperty PROPERTY_STATEREPORTPARAMVALUE = new StringProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_STATEREPORTPARAMVALUE));		
		public static readonly StringProperty PROPERTY_REQUESTTYPEPARAMNAME = new StringProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_REQUESTTYPEPARAMNAME));		
		public static readonly StringProperty PROPERTY_REQUESTTYPEPARAMSTATEREPORTVALUE = new StringProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_REQUESTTYPEPARAMSTATEREPORTVALUE));		
		public static readonly StringProperty PROPERTY_REQUESTTYPEPARAMDATAREPORTVALUE = new StringProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_REQUESTTYPEPARAMDATAREPORTVALUE));		
		public static readonly BoolProperty PROPERTY_HASFILTERS = new BoolProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_HASFILTERS));		
		public static readonly BoolProperty PROPERTY_ISMONITORREQUEST = new BoolProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_ISMONITORREQUEST));		
		public static readonly BoolProperty PROPERTY_ISLOGREQUEST = new BoolProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_ISLOGREQUEST));		
		public static readonly BoolProperty PROPERTY_ISPARAMSCONVERT = new BoolProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_ISPARAMSCONVERT));		
		public static readonly BoolProperty PROPERTY_ISAUTOLINKID = new BoolProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_ISAUTOLINKID));		
		public static readonly StringProperty PROPERTY_AUTOLINKIDFIELDS = new StringProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_AUTOLINKIDFIELDS));		
		public static readonly StringProperty PROPERTY_LOGREQUESTTYPE = new StringProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_LOGREQUESTTYPE));		
		public static readonly DecimalProperty PROPERTY_PRICE = new DecimalProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_PRICE));		
		public static readonly DecimalProperty PROPERTY_DEFAULTRATE = new DecimalProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_DEFAULTRATE));		
		public static readonly StringProperty PROPERTY_CHANNELDETAILINFO = new StringProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_CHANNELDETAILINFO));		
		public static readonly EntityProperty<SPUpperEntity> PROPERTY_UPPERID = new EntityProperty<SPUpperEntity>(Property.ForName(SPChannelEntity.PROPERTY_NAME_UPPERID));
		#region upperID字段外键查询字段
        public static NHibernateDynamicQueryGenerator<SPChannelEntity> InClude_UpperID_Query(NHibernateDynamicQueryGenerator<SPChannelEntity> queryGenerator)
        {
            return queryGenerator.AddAlians(SPChannelEntity.PROPERTY_NAME_UPPERID, PROPERTY_UPPERID_ALIAS_NAME);
        }
        public static readonly string PROPERTY_UPPERID_ALIAS_NAME = "UpperID_SPChannelEntity_Alias";
		public static readonly IntProperty PROPERTY_UPPERID_ID = new IntProperty(Property.ForName(PROPERTY_UPPERID_ALIAS_NAME + ".Id"));
		public static readonly StringProperty PROPERTY_UPPERID_NAME = new StringProperty(Property.ForName(PROPERTY_UPPERID_ALIAS_NAME + ".Name"));
		public static readonly StringProperty PROPERTY_UPPERID_CODE = new StringProperty(Property.ForName(PROPERTY_UPPERID_ALIAS_NAME + ".Code"));
		public static readonly StringProperty PROPERTY_UPPERID_DESCRIPTION = new StringProperty(Property.ForName(PROPERTY_UPPERID_ALIAS_NAME + ".Description"));
		public static readonly IntProperty PROPERTY_UPPERID_CREATEBY = new IntProperty(Property.ForName(PROPERTY_UPPERID_ALIAS_NAME + ".CreateBy"));
		public static readonly DateTimeProperty PROPERTY_UPPERID_CREATEAT = new DateTimeProperty(Property.ForName(PROPERTY_UPPERID_ALIAS_NAME + ".CreateAt"));
		public static readonly IntProperty PROPERTY_UPPERID_LASTMODIFYBY = new IntProperty(Property.ForName(PROPERTY_UPPERID_ALIAS_NAME + ".LastModifyBy"));
		public static readonly DateTimeProperty PROPERTY_UPPERID_LASTMODIFYAT = new DateTimeProperty(Property.ForName(PROPERTY_UPPERID_ALIAS_NAME + ".LastModifyAt"));
		public static readonly StringProperty PROPERTY_UPPERID_LASTMODIFYCOMMENT = new StringProperty(Property.ForName(PROPERTY_UPPERID_ALIAS_NAME + ".LastModifyComment"));
		#endregion
		public static readonly StringProperty PROPERTY_CHANNELSTATUS = new StringProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_CHANNELSTATUS));		
		public static readonly BoolProperty PROPERTY_ISDISABLE = new BoolProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_ISDISABLE));		
		public static readonly IntProperty PROPERTY_CREATEBY = new IntProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_CREATEBY));		
		public static readonly DateTimeProperty PROPERTY_CREATEAT = new DateTimeProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_CREATEAT));		
		public static readonly IntProperty PROPERTY_LASTMODIFYBY = new IntProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_LASTMODIFYBY));		
		public static readonly DateTimeProperty PROPERTY_LASTMODIFYAT = new DateTimeProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_LASTMODIFYAT));		
		public static readonly StringProperty PROPERTY_LASTMODIFYCOMMENT = new StringProperty(Property.ForName(SPChannelEntity.PROPERTY_NAME_LASTMODIFYCOMMENT));		
      
		#region 子类集合字段查询字段
	
		#endregion

		#endregion

		
		public override string[] PkPropertyName
        {
            get { return new string[] { "Id" }; }
        }
		
		public override Type GetFieldTypeByFieldName(string fieldName)
        {
			switch (fieldName)
            {
                case "Id":
                    return typeof (int);
                case "Name":
                    return typeof (string);
                case "Code":
                    return typeof (string);
                case "DataOkMessage":
                    return typeof (string);
                case "DataFailedMessage":
                    return typeof (string);
                case "Description":
                    return typeof (string);
                case "DataAdapterType":
                    return typeof (string);
                case "DataAdapterUrl":
                    return typeof (string);
                case "ChannelType":
                    return typeof (string);
                case "IVRFeeTimeType":
                    return typeof (string);
                case "IVRTimeFormat":
                    return typeof (string);
                case "IsStateReport":
                    return typeof (bool);
                case "StateReportType":
                    return typeof (string);
                case "ReportOkMessage":
                    return typeof (string);
                case "ReportFailedMessage":
                    return typeof (string);
                case "StateReportParamName":
                    return typeof (string);
                case "StateReportParamValue":
                    return typeof (string);
                case "RequestTypeParamName":
                    return typeof (string);
                case "RequestTypeParamStateReportValue":
                    return typeof (string);
                case "RequestTypeParamDataReportValue":
                    return typeof (string);
                case "HasFilters":
                    return typeof (bool);
                case "IsMonitorRequest":
                    return typeof (bool);
                case "IsLogRequest":
                    return typeof (bool);
                case "IsParamsConvert":
                    return typeof (bool);
                case "IsAutoLinkID":
                    return typeof (bool);
                case "AutoLinkIDFields":
                    return typeof (string);
                case "LogRequestType":
                    return typeof (string);
                case "Price":
                    return typeof (decimal);
                case "DefaultRate":
                    return typeof (decimal);
                case "ChannelDetailInfo":
                    return typeof (string);
                case "UpperID":
                    return typeof (int);
                case "ChannelStatus":
                    return typeof (string);
                case "IsDisable":
                    return typeof (bool);
                case "CreateBy":
                    return typeof (int);
                case "CreateAt":
                    return typeof (DateTime);
                case "LastModifyBy":
                    return typeof (int);
                case "LastModifyAt":
                    return typeof (DateTime);
                case "LastModifyComment":
                    return typeof (string);
          }
			return typeof(string);
        }
		
        public override void InClude_Parent_Table(string parent_alias, NHibernateDynamicQueryGenerator<SPChannelEntity> queryGenerator)
        {
            switch (parent_alias)
            {
	            case "UpperID_SPChannelEntity_Alias":
                    queryGenerator.AddAlians(SPChannelEntity.PROPERTY_NAME_UPPERID, PROPERTY_UPPERID_ALIAS_NAME);
                    break;
                default:
                    break;
 
            }
        }
		
		
		
		public List<SPChannelEntity> GetList_By_UpperID_SPUpperEntity(SPUpperEntity fkentity)
		{
			NHibernateDynamicQueryGenerator<SPChannelEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_UPPERID.Eq(fkentity));

            return this.FindListByQueryBuilder(dynamicQueryGenerator);
		}
		
		
        public List<SPChannelEntity> GetPageList_By_UpperID_SPUpperEntity(string orderByColumnName, bool isDesc, SPUpperEntity fkentity, PageQueryParams pageQueryParams)
        {
            NHibernateDynamicQueryGenerator<SPChannelEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_UPPERID.Eq(fkentity));

            AddDefaultOrderByToQueryGenerator(orderByColumnName, isDesc, dynamicQueryGenerator);

            return FindListByPageByQueryBuilder(dynamicQueryGenerator, pageQueryParams);
        }		
		

		
		
    }
}
