// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using NHibernate.Criterion;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery.Propertys;
using SPS.Entity.Tables;
using Legendigital.Framework.Common.Data.NHibernate;


namespace SPS.Data.Tables
{
    public partial class SPSDataSycnSettingDataObject : BaseNHibernateDataObject<SPSDataSycnSettingEntity>
    {
				#region Expression Query Property (标准查询字段)
		public static readonly Property PROPERTY_ID = Property.ForName(SPSDataSycnSettingEntity.PROPERTY_NAME_ID);
		public static readonly Property PROPERTY_SYCNRETRYTIMES = Property.ForName(SPSDataSycnSettingEntity.PROPERTY_NAME_SYCNRETRYTIMES);
		public static readonly Property PROPERTY_SYNCTYPE = Property.ForName(SPSDataSycnSettingEntity.PROPERTY_NAME_SYNCTYPE);
		public static readonly Property PROPERTY_SYCNMO = Property.ForName(SPSDataSycnSettingEntity.PROPERTY_NAME_SYCNMO);
		public static readonly Property PROPERTY_SYCNMOURL = Property.ForName(SPSDataSycnSettingEntity.PROPERTY_NAME_SYCNMOURL);
		public static readonly Property PROPERTY_SYCNMOOKMESSAGE = Property.ForName(SPSDataSycnSettingEntity.PROPERTY_NAME_SYCNMOOKMESSAGE);
		public static readonly Property PROPERTY_SYCNMOFAILEDMESSAGE = Property.ForName(SPSDataSycnSettingEntity.PROPERTY_NAME_SYCNMOFAILEDMESSAGE);
		public static readonly Property PROPERTY_SYCNMR = Property.ForName(SPSDataSycnSettingEntity.PROPERTY_NAME_SYCNMR);
		public static readonly Property PROPERTY_SYCNMRURL = Property.ForName(SPSDataSycnSettingEntity.PROPERTY_NAME_SYCNMRURL);
		public static readonly Property PROPERTY_SYCNMROKMESSAGE = Property.ForName(SPSDataSycnSettingEntity.PROPERTY_NAME_SYCNMROKMESSAGE);
		public static readonly Property PROPERTY_SYCNMRFAILEDMESSAGE = Property.ForName(SPSDataSycnSettingEntity.PROPERTY_NAME_SYCNMRFAILEDMESSAGE);
		public static readonly Property PROPERTY_SYCNSATE = Property.ForName(SPSDataSycnSettingEntity.PROPERTY_NAME_SYCNSATE);
		public static readonly Property PROPERTY_SYCNSATEURL = Property.ForName(SPSDataSycnSettingEntity.PROPERTY_NAME_SYCNSATEURL);
		public static readonly Property PROPERTY_SYCNSATEOKMESSAGE = Property.ForName(SPSDataSycnSettingEntity.PROPERTY_NAME_SYCNSATEOKMESSAGE);
		public static readonly Property PROPERTY_SYCNSATEFAILEDMESSAGE = Property.ForName(SPSDataSycnSettingEntity.PROPERTY_NAME_SYCNSATEFAILEDMESSAGE);
      
		#region 子类集合字段查询字段
	
		#endregion

		#endregion

		
		public override string[] PkPropertyName
        {
            get { return new string[] { "Id" }; }
        }
		
		public override Type GetFieldTypeByFieldName(string fieldName)
        {
			switch (fieldName)
            {
                case "Id":
                    return typeof (int);
                case "SycnRetryTimes":
                    return typeof (int);
                case "SyncType":
                    return typeof (string);
                case "SycnMO":
                    return typeof (bool);
                case "SycnMOUrl":
                    return typeof (string);
                case "SycnMOOkMessage":
                    return typeof (string);
                case "SycnMOFailedMessage":
                    return typeof (string);
                case "SycnMR":
                    return typeof (bool);
                case "SycnMRUrl":
                    return typeof (string);
                case "SycnMROkMessage":
                    return typeof (string);
                case "SycnMRFailedMessage":
                    return typeof (string);
                case "SycnSate":
                    return typeof (bool);
                case "SycnSateUrl":
                    return typeof (string);
                case "SycnSateOkMessage":
                    return typeof (string);
                case "SycnSateFailedMessage":
                    return typeof (string);
          }
			return typeof(string);
        }
		
		
		
		
		
    }
}
