// --------------------------------------------------------------------------------------------------------------------
// <copyright company="foreveross" file="SPAdReportDataObject.Designer.cs">
//   Copyright (c) Foreveross Enterprises. All rights reserved.
// </copyright>
// <summary>
//   Generated by MyGeneration Version # (1.3.0.9)
// </summary>
// --------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Text;
using NHibernate.Criterion;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery.Propertys;
using SPS.Entity.Tables;
using Legendigital.Framework.Common.Data.NHibernate;


namespace SPS.Data.Tables
{
    public partial class SPAdReportDataObject : BaseNHibernateDataObject<SPAdReportEntity,int>
    {
		#region Expression Query Property (标准查询字段)
		public static readonly IntProperty PROPERTY_ID = new IntProperty(Property.ForName(SPAdReportEntity.PROPERTY_NAME_ID));		
		public static readonly IntProperty PROPERTY_SPADID = new IntProperty(Property.ForName(SPAdReportEntity.PROPERTY_NAME_SPADID));		
		public static readonly EntityProperty<SPAdPackEntity> PROPERTY_SPPACKID = new EntityProperty<SPAdPackEntity>(Property.ForName(SPAdReportEntity.PROPERTY_NAME_SPPACKID));
		#region sPPackID字段外键查询字段
        public static NHibernateDynamicQueryGenerator<SPAdReportEntity> InClude_SPPackID_Query(NHibernateDynamicQueryGenerator<SPAdReportEntity> queryGenerator)
        {
            return queryGenerator.AddAlians(SPAdReportEntity.PROPERTY_NAME_SPPACKID, PROPERTY_SPPACKID_ALIAS_NAME);
        }
        public static readonly string PROPERTY_SPPACKID_ALIAS_NAME = "SPPackID_SPAdReportEntity_Alias";
		public static readonly IntProperty PROPERTY_SPPACKID_ID = new IntProperty(Property.ForName(PROPERTY_SPPACKID_ALIAS_NAME + ".Id"));
		public static readonly EntityProperty<SPAdAssignedHistortyEntity> PROPERTY_SPPACKID_SPADID = new EntityProperty<SPAdAssignedHistortyEntity>(Property.ForName(PROPERTY_SPPACKID_ALIAS_NAME + ".SPAdID"));
		public static readonly StringProperty PROPERTY_SPPACKID_NAME = new StringProperty(Property.ForName(PROPERTY_SPPACKID_ALIAS_NAME + ".Name"));
		public static readonly StringProperty PROPERTY_SPPACKID_CODE = new StringProperty(Property.ForName(PROPERTY_SPPACKID_ALIAS_NAME + ".Code"));
		public static readonly StringProperty PROPERTY_SPPACKID_DESCRIPTION = new StringProperty(Property.ForName(PROPERTY_SPPACKID_ALIAS_NAME + ".Description"));
		#endregion
		public static readonly EntityProperty<SPSClientEntity> PROPERTY_SPCLIENTID = new EntityProperty<SPSClientEntity>(Property.ForName(SPAdReportEntity.PROPERTY_NAME_SPCLIENTID));
		#region sPClientID字段外键查询字段
        public static NHibernateDynamicQueryGenerator<SPAdReportEntity> InClude_SPClientID_Query(NHibernateDynamicQueryGenerator<SPAdReportEntity> queryGenerator)
        {
            return queryGenerator.AddAlians(SPAdReportEntity.PROPERTY_NAME_SPCLIENTID, PROPERTY_SPCLIENTID_ALIAS_NAME);
        }
        public static readonly string PROPERTY_SPCLIENTID_ALIAS_NAME = "SPClientID_SPAdReportEntity_Alias";
		public static readonly IntProperty PROPERTY_SPCLIENTID_ID = new IntProperty(Property.ForName(PROPERTY_SPCLIENTID_ALIAS_NAME + ".Id"));
		public static readonly StringProperty PROPERTY_SPCLIENTID_NAME = new StringProperty(Property.ForName(PROPERTY_SPCLIENTID_ALIAS_NAME + ".Name"));
		public static readonly StringProperty PROPERTY_SPCLIENTID_DESCRIPTION = new StringProperty(Property.ForName(PROPERTY_SPCLIENTID_ALIAS_NAME + ".Description"));
		public static readonly IntProperty PROPERTY_SPCLIENTID_USERID = new IntProperty(Property.ForName(PROPERTY_SPCLIENTID_ALIAS_NAME + ".UserID"));
		public static readonly BoolProperty PROPERTY_SPCLIENTID_ISDEFAULTCLIENT = new BoolProperty(Property.ForName(PROPERTY_SPCLIENTID_ALIAS_NAME + ".IsDefaultClient"));
		public static readonly BoolProperty PROPERTY_SPCLIENTID_SYNCDATA = new BoolProperty(Property.ForName(PROPERTY_SPCLIENTID_ALIAS_NAME + ".SyncData"));
		public static readonly IntProperty PROPERTY_SPCLIENTID_SYCNNOTINTERCEPTCOUNT = new IntProperty(Property.ForName(PROPERTY_SPCLIENTID_ALIAS_NAME + ".SycnNotInterceptCount"));
		public static readonly EntityProperty<SPSDataSycnSettingEntity> PROPERTY_SPCLIENTID_SYNCDATASETTING = new EntityProperty<SPSDataSycnSettingEntity>(Property.ForName(PROPERTY_SPCLIENTID_ALIAS_NAME + ".SyncDataSetting"));
		public static readonly StringProperty PROPERTY_SPCLIENTID_ALIAS = new StringProperty(Property.ForName(PROPERTY_SPCLIENTID_ALIAS_NAME + ".Alias"));
		public static readonly BoolProperty PROPERTY_SPCLIENTID_ISENABLE = new BoolProperty(Property.ForName(PROPERTY_SPCLIENTID_ALIAS_NAME + ".IsEnable"));
		public static readonly DecimalProperty PROPERTY_SPCLIENTID_INTERCEPTRATE = new DecimalProperty(Property.ForName(PROPERTY_SPCLIENTID_ALIAS_NAME + ".InterceptRate"));
		public static readonly DecimalProperty PROPERTY_SPCLIENTID_DEFAULTPRICE = new DecimalProperty(Property.ForName(PROPERTY_SPCLIENTID_ALIAS_NAME + ".DefaultPrice"));
		public static readonly IntProperty PROPERTY_SPCLIENTID_DEFAULTSHOWRECORDDAYS = new IntProperty(Property.ForName(PROPERTY_SPCLIENTID_ALIAS_NAME + ".DefaultShowRecordDays"));
		public static readonly IntProperty PROPERTY_SPCLIENTID_CREATEBY = new IntProperty(Property.ForName(PROPERTY_SPCLIENTID_ALIAS_NAME + ".CreateBy"));
		public static readonly DateTimeProperty PROPERTY_SPCLIENTID_CREATEAT = new DateTimeProperty(Property.ForName(PROPERTY_SPCLIENTID_ALIAS_NAME + ".CreateAt"));
		public static readonly IntProperty PROPERTY_SPCLIENTID_LASTMODIFYBY = new IntProperty(Property.ForName(PROPERTY_SPCLIENTID_ALIAS_NAME + ".LastModifyBy"));
		public static readonly DateTimeProperty PROPERTY_SPCLIENTID_LASTMODIFYAT = new DateTimeProperty(Property.ForName(PROPERTY_SPCLIENTID_ALIAS_NAME + ".LastModifyAt"));
		public static readonly StringProperty PROPERTY_SPCLIENTID_LASTMODIFYCOMMENT = new StringProperty(Property.ForName(PROPERTY_SPCLIENTID_ALIAS_NAME + ".LastModifyComment"));
		#endregion
		public static readonly DateTimeProperty PROPERTY_REPORTDATE = new DateTimeProperty(Property.ForName(SPAdReportEntity.PROPERTY_NAME_REPORTDATE));		
		public static readonly IntProperty PROPERTY_CLIENTCOUNT = new IntProperty(Property.ForName(SPAdReportEntity.PROPERTY_NAME_CLIENTCOUNT));		
		public static readonly IntProperty PROPERTY_ADCOUNT = new IntProperty(Property.ForName(SPAdReportEntity.PROPERTY_NAME_ADCOUNT));		
		public static readonly DecimalProperty PROPERTY_ADAMOUNT = new DecimalProperty(Property.ForName(SPAdReportEntity.PROPERTY_NAME_ADAMOUNT));		
		public static readonly IntProperty PROPERTY_CREATEBY = new IntProperty(Property.ForName(SPAdReportEntity.PROPERTY_NAME_CREATEBY));		
		public static readonly DateTimeProperty PROPERTY_CREATEAT = new DateTimeProperty(Property.ForName(SPAdReportEntity.PROPERTY_NAME_CREATEAT));		
		public static readonly IntProperty PROPERTY_LASTMODIFYBY = new IntProperty(Property.ForName(SPAdReportEntity.PROPERTY_NAME_LASTMODIFYBY));		
		public static readonly DateTimeProperty PROPERTY_LASTMODIFYAT = new DateTimeProperty(Property.ForName(SPAdReportEntity.PROPERTY_NAME_LASTMODIFYAT));		
		public static readonly StringProperty PROPERTY_LASTMODIFYCOMMENT = new StringProperty(Property.ForName(SPAdReportEntity.PROPERTY_NAME_LASTMODIFYCOMMENT));		
      












		#region 子类集合字段查询字段
	
		#endregion

		#endregion

		
		public override string[] PkPropertyName
        {
            get { return new string[] { "Id" }; }
        }
		
		public override Type GetFieldTypeByFieldName(string fieldName)
        {
			switch (fieldName)
            {
                case "Id":
                    return typeof (int);
                case "SPAdID":
                    return typeof (int);
                case "SPPackID":
                    return typeof (int);
                case "SPClientID":
                    return typeof (int);
                case "ReportDate":
                    return typeof (DateTime);
                case "ClientCount":
                    return typeof (int);
                case "AdCount":
                    return typeof (int);
                case "AdAmount":
                    return typeof (decimal);
                case "CreateBy":
                    return typeof (int);
                case "CreateAt":
                    return typeof (DateTime);
                case "LastModifyBy":
                    return typeof (int);
                case "LastModifyAt":
                    return typeof (DateTime);
                case "LastModifyComment":
                    return typeof (string);
          }
			return typeof(string);
        }

		#region 获取外键字段类型
		
		public override Type GetFieldTypeByFieldName(string fieldName, string parent_alias)
        {
            switch (parent_alias)
            {
	            case "SPPackID_SPAdReportEntity_Alias":
					switch (fieldName)
					{
                		case "SPPackID_SPAdReportEntity_Alias.Id":
							return typeof (int);
                		case "SPPackID_SPAdReportEntity_Alias.SPAdID":
							return typeof (int);
                		case "SPPackID_SPAdReportEntity_Alias.Name":
							return typeof (string);
                		case "SPPackID_SPAdReportEntity_Alias.Code":
							return typeof (string);
                		case "SPPackID_SPAdReportEntity_Alias.Description":
							return typeof (string);
          			}
                    break;
	            case "SPClientID_SPAdReportEntity_Alias":
					switch (fieldName)
					{
                		case "SPClientID_SPAdReportEntity_Alias.Id":
							return typeof (int);
                		case "SPClientID_SPAdReportEntity_Alias.Name":
							return typeof (string);
                		case "SPClientID_SPAdReportEntity_Alias.Description":
							return typeof (string);
                		case "SPClientID_SPAdReportEntity_Alias.UserID":
							return typeof (int);
                		case "SPClientID_SPAdReportEntity_Alias.IsDefaultClient":
							return typeof (bool);
                		case "SPClientID_SPAdReportEntity_Alias.SyncData":
							return typeof (bool);
                		case "SPClientID_SPAdReportEntity_Alias.SycnNotInterceptCount":
							return typeof (int);
                		case "SPClientID_SPAdReportEntity_Alias.SyncDataSetting":
							return typeof (int);
                		case "SPClientID_SPAdReportEntity_Alias.Alias":
							return typeof (string);
                		case "SPClientID_SPAdReportEntity_Alias.IsEnable":
							return typeof (bool);
                		case "SPClientID_SPAdReportEntity_Alias.InterceptRate":
							return typeof (decimal);
                		case "SPClientID_SPAdReportEntity_Alias.DefaultPrice":
							return typeof (decimal);
                		case "SPClientID_SPAdReportEntity_Alias.DefaultShowRecordDays":
							return typeof (int);
                		case "SPClientID_SPAdReportEntity_Alias.CreateBy":
							return typeof (int);
                		case "SPClientID_SPAdReportEntity_Alias.CreateAt":
							return typeof (DateTime);
                		case "SPClientID_SPAdReportEntity_Alias.LastModifyBy":
							return typeof (int);
                		case "SPClientID_SPAdReportEntity_Alias.LastModifyAt":
							return typeof (DateTime);
                		case "SPClientID_SPAdReportEntity_Alias.LastModifyComment":
							return typeof (string);
          			}
                    break;
 
                default:
                    break;
            }

            return typeof(string);
        }
		
		#endregion

        public override void InClude_Parent_Table(string parent_alias, NHibernateDynamicQueryGenerator<SPAdReportEntity> queryGenerator)
        {
            switch (parent_alias)
            {
	            case "SPPackID_SPAdReportEntity_Alias":
                    queryGenerator.AddAlians(SPAdReportEntity.PROPERTY_NAME_SPPACKID, PROPERTY_SPPACKID_ALIAS_NAME);
                    break;
	            case "SPClientID_SPAdReportEntity_Alias":
                    queryGenerator.AddAlians(SPAdReportEntity.PROPERTY_NAME_SPCLIENTID, PROPERTY_SPCLIENTID_ALIAS_NAME);
                    break;
                default:
                    break;
 
            }
        }
		
		
		
		public List<SPAdReportEntity> GetList_By_SPPackID_SPAdPackEntity(SPAdPackEntity fkentity)
		{
			NHibernateDynamicQueryGenerator<SPAdReportEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_SPPACKID.Eq(fkentity));

            return this.FindListByQueryBuilder(dynamicQueryGenerator);
		}
		
		
        public List<SPAdReportEntity> GetPageList_By_SPPackID_SPAdPackEntity(string orderByColumnName, bool isDesc, SPAdPackEntity fkentity, PageQueryParams pageQueryParams)
        {
            NHibernateDynamicQueryGenerator<SPAdReportEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_SPPACKID.Eq(fkentity));

            AddDefaultOrderByToQueryGenerator(orderByColumnName, isDesc, dynamicQueryGenerator);

            return FindListByPageByQueryBuilder(dynamicQueryGenerator, pageQueryParams);
        }		
		
		public List<SPAdReportEntity> GetList_By_SPClientID_SPSClientEntity(SPSClientEntity fkentity)
		{
			NHibernateDynamicQueryGenerator<SPAdReportEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_SPCLIENTID.Eq(fkentity));

            return this.FindListByQueryBuilder(dynamicQueryGenerator);
		}
		
		
        public List<SPAdReportEntity> GetPageList_By_SPClientID_SPSClientEntity(string orderByColumnName, bool isDesc, SPSClientEntity fkentity, PageQueryParams pageQueryParams)
        {
            NHibernateDynamicQueryGenerator<SPAdReportEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_SPCLIENTID.Eq(fkentity));

            AddDefaultOrderByToQueryGenerator(orderByColumnName, isDesc, dynamicQueryGenerator);

            return FindListByPageByQueryBuilder(dynamicQueryGenerator, pageQueryParams);
        }		
		

		
		
    }
}
