// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using NHibernate.Criterion;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery.Propertys;
using SPS.Entity.Tables;
using Legendigital.Framework.Common.Data.NHibernate;


namespace SPS.Data.Tables
{
    public partial class SPCodeInfoDataObject : BaseNHibernateDataObject<SPCodeInfoEntity>
    {
				#region Expression Query Property (标准查询字段)
		public static readonly Property PROPERTY_ID = Property.ForName(SPCodeInfoEntity.PROPERTY_NAME_ID);
		public static readonly Property PROPERTY_SPCODEID = Property.ForName(SPCodeInfoEntity.PROPERTY_NAME_SPCODEID);
		#region sPCodeID字段外键查询字段
        public static NHibernateDynamicQueryGenerator<SPCodeInfoEntity> InClude_SPCodeID_Query(NHibernateDynamicQueryGenerator<SPCodeInfoEntity> queryGenerator)
        {
            return queryGenerator.AddAlians(SPCodeInfoEntity.PROPERTY_NAME_SPCODEID, PROPERTY_SPCODEID_ALIAS_NAME);
        }
        public static readonly string PROPERTY_SPCODEID_ALIAS_NAME = "SPCodeID_SPCodeInfoEntity_Alias";
		public static readonly Property PROPERTY_SPCODEID_ID = Property.ForName(PROPERTY_SPCODEID_ALIAS_NAME + ".Id");
		public static readonly Property PROPERTY_SPCODEID_NAME = Property.ForName(PROPERTY_SPCODEID_ALIAS_NAME + ".Name");
		public static readonly Property PROPERTY_SPCODEID_DESCRIPTION = Property.ForName(PROPERTY_SPCODEID_ALIAS_NAME + ".Description");
		public static readonly Property PROPERTY_SPCODEID_CODE = Property.ForName(PROPERTY_SPCODEID_ALIAS_NAME + ".Code");
		public static readonly Property PROPERTY_SPCODEID_CODETYPE = Property.ForName(PROPERTY_SPCODEID_ALIAS_NAME + ".CodeType");
		public static readonly Property PROPERTY_SPCODEID_CHANNELID = Property.ForName(PROPERTY_SPCODEID_ALIAS_NAME + ".ChannelID");
		public static readonly Property PROPERTY_SPCODEID_MO = Property.ForName(PROPERTY_SPCODEID_ALIAS_NAME + ".Mo");
		public static readonly Property PROPERTY_SPCODEID_MOTYPE = Property.ForName(PROPERTY_SPCODEID_ALIAS_NAME + ".MOType");
		public static readonly Property PROPERTY_SPCODEID_MOLENGTH = Property.ForName(PROPERTY_SPCODEID_ALIAS_NAME + ".MOLength");
		public static readonly Property PROPERTY_SPCODEID_ORDERINDEX = Property.ForName(PROPERTY_SPCODEID_ALIAS_NAME + ".OrderIndex");
		public static readonly Property PROPERTY_SPCODEID_SPCODE = Property.ForName(PROPERTY_SPCODEID_ALIAS_NAME + ".SPCode");
		public static readonly Property PROPERTY_SPCODEID_SPCODETYPE = Property.ForName(PROPERTY_SPCODEID_ALIAS_NAME + ".SPCodeType");
		public static readonly Property PROPERTY_SPCODEID_SPCODELENGTH = Property.ForName(PROPERTY_SPCODEID_ALIAS_NAME + ".SPCodeLength");
		public static readonly Property PROPERTY_SPCODEID_HASFILTERS = Property.ForName(PROPERTY_SPCODEID_ALIAS_NAME + ".HasFilters");
		public static readonly Property PROPERTY_SPCODEID_HASPARAMSCONVERT = Property.ForName(PROPERTY_SPCODEID_ALIAS_NAME + ".HasParamsConvert");
		public static readonly Property PROPERTY_SPCODEID_ISDIABLE = Property.ForName(PROPERTY_SPCODEID_ALIAS_NAME + ".IsDiable");
		public static readonly Property PROPERTY_SPCODEID_PRICE = Property.ForName(PROPERTY_SPCODEID_ALIAS_NAME + ".Price");
		public static readonly Property PROPERTY_SPCODEID_OPERATIONTYPE = Property.ForName(PROPERTY_SPCODEID_ALIAS_NAME + ".OperationType");
		public static readonly Property PROPERTY_SPCODEID_HASDAYTOTALLIMIT = Property.ForName(PROPERTY_SPCODEID_ALIAS_NAME + ".HasDayTotalLimit");
		public static readonly Property PROPERTY_SPCODEID_DAYTOTALLIMITCOUNT = Property.ForName(PROPERTY_SPCODEID_ALIAS_NAME + ".DayTotalLimitCount");
		public static readonly Property PROPERTY_SPCODEID_HASPHONELIMIT = Property.ForName(PROPERTY_SPCODEID_ALIAS_NAME + ".HasPhoneLimit");
		public static readonly Property PROPERTY_SPCODEID_PHONELIMITDAYCOUNT = Property.ForName(PROPERTY_SPCODEID_ALIAS_NAME + ".PhoneLimitDayCount");
		public static readonly Property PROPERTY_SPCODEID_PHONELIMITMONTHCOUNT = Property.ForName(PROPERTY_SPCODEID_ALIAS_NAME + ".PhoneLimitMonthCount");
		public static readonly Property PROPERTY_SPCODEID_PHONELIMITTYPE = Property.ForName(PROPERTY_SPCODEID_ALIAS_NAME + ".PhoneLimitType");
		public static readonly Property PROPERTY_SPCODEID_LIMITPROVINCE = Property.ForName(PROPERTY_SPCODEID_ALIAS_NAME + ".LimitProvince");
		public static readonly Property PROPERTY_SPCODEID_LIMITPROVINCEAREA = Property.ForName(PROPERTY_SPCODEID_ALIAS_NAME + ".LimitProvinceArea");
		public static readonly Property PROPERTY_SPCODEID_PARENTID = Property.ForName(PROPERTY_SPCODEID_ALIAS_NAME + ".ParentID");
		public static readonly Property PROPERTY_SPCODEID_CREATEBY = Property.ForName(PROPERTY_SPCODEID_ALIAS_NAME + ".CreateBy");
		public static readonly Property PROPERTY_SPCODEID_CREATEAT = Property.ForName(PROPERTY_SPCODEID_ALIAS_NAME + ".CreateAt");
		public static readonly Property PROPERTY_SPCODEID_LASTMODIFYBY = Property.ForName(PROPERTY_SPCODEID_ALIAS_NAME + ".LastModifyBy");
		public static readonly Property PROPERTY_SPCODEID_LASTMODIFYAT = Property.ForName(PROPERTY_SPCODEID_ALIAS_NAME + ".LastModifyAt");
		public static readonly Property PROPERTY_SPCODEID_LASTMODIFYCOMMENT = Property.ForName(PROPERTY_SPCODEID_ALIAS_NAME + ".LastModifyComment");
		#endregion
		public static readonly Property PROPERTY_PROVINCE = Property.ForName(SPCodeInfoEntity.PROPERTY_NAME_PROVINCE);
		public static readonly Property PROPERTY_DISABLECITY = Property.ForName(SPCodeInfoEntity.PROPERTY_NAME_DISABLECITY);
		public static readonly Property PROPERTY_DAYLIMIT = Property.ForName(SPCodeInfoEntity.PROPERTY_NAME_DAYLIMIT);
		public static readonly Property PROPERTY_MONTHLIMIT = Property.ForName(SPCodeInfoEntity.PROPERTY_NAME_MONTHLIMIT);
		public static readonly Property PROPERTY_SENDTEXT = Property.ForName(SPCodeInfoEntity.PROPERTY_NAME_SENDTEXT);
      
		#region 子类集合字段查询字段
	
		#endregion

		#endregion

		
		public override string[] PkPropertyName
        {
            get { return new string[] { "Id" }; }
        }
		
		public override Type GetFieldTypeByFieldName(string fieldName)
        {
			switch (fieldName)
            {
                case "Id":
                    return typeof (int);
                case "SPCodeID":
                    return typeof (int);
                case "Province":
                    return typeof (string);
                case "DisableCity":
                    return typeof (string);
                case "DayLimit":
                    return typeof (string);
                case "MonthLimit":
                    return typeof (string);
                case "SendText":
                    return typeof (string);
          }
			return typeof(string);
        }
		
				public List<SPCodeInfoEntity> GetList_By_SPCodeEntity(SPCodeEntity fkentity)
		{
			NHibernateDynamicQueryGenerator<SPCodeInfoEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_SPCODEID.Eq(fkentity));

            return this.FindListByQueryBuilder(dynamicQueryGenerator);
		}
		
		
        public List<SPCodeInfoEntity> GetPageList_By_SPCodeEntity(string orderByColumnName, bool isDesc, int pageIndex, int pageSize, SPCodeEntity fkentity, out int recordCount)
        {
            NHibernateDynamicQueryGenerator<SPCodeInfoEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_SPCODEID.Eq(fkentity));

            AddDefaultOrderByToQueryGenerator(orderByColumnName, isDesc, dynamicQueryGenerator);

            dynamicQueryGenerator.SetFirstResult((pageIndex - 1) * pageSize);

            dynamicQueryGenerator.SetMaxResults(pageSize);

            return FindListByPageByQueryBuilder(dynamicQueryGenerator, out recordCount);
        }		
		

		
		
		
    }
}
