// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using NHibernate.Criterion;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery.Propertys;
using SPS.Entity.Tables;
using Legendigital.Framework.Common.Data.NHibernate;


namespace SPS.Data.Tables
{
    public partial class SPClientCodeSycnParamsDataObject : BaseNHibernateDataObject<SPClientCodeSycnParamsEntity>
    {
				#region Expression Query Property (标准查询字段)
		public static readonly Property PROPERTY_ID = Property.ForName(SPClientCodeSycnParamsEntity.PROPERTY_NAME_ID);
		public static readonly Property PROPERTY_NAME = Property.ForName(SPClientCodeSycnParamsEntity.PROPERTY_NAME_NAME);
		public static readonly Property PROPERTY_DESCRIPTION = Property.ForName(SPClientCodeSycnParamsEntity.PROPERTY_NAME_DESCRIPTION);
		public static readonly Property PROPERTY_ISENABLE = Property.ForName(SPClientCodeSycnParamsEntity.PROPERTY_NAME_ISENABLE);
		public static readonly Property PROPERTY_ISREQUIRED = Property.ForName(SPClientCodeSycnParamsEntity.PROPERTY_NAME_ISREQUIRED);
		public static readonly Property PROPERTY_CODEID = Property.ForName(SPClientCodeSycnParamsEntity.PROPERTY_NAME_CODEID);
		#region codeID字段外键查询字段
        public static NHibernateDynamicQueryGenerator<SPClientCodeSycnParamsEntity> InClude_CodeID_Query(NHibernateDynamicQueryGenerator<SPClientCodeSycnParamsEntity> queryGenerator)
        {
            return queryGenerator.AddAlians(SPClientCodeSycnParamsEntity.PROPERTY_NAME_CODEID, PROPERTY_CODEID_ALIAS_NAME);
        }
        public static readonly string PROPERTY_CODEID_ALIAS_NAME = "CodeID_SPClientCodeSycnParamsEntity_Alias";
		public static readonly Property PROPERTY_CODEID_ID = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".Id");
		public static readonly Property PROPERTY_CODEID_NAME = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".Name");
		public static readonly Property PROPERTY_CODEID_DESCRIPTION = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".Description");
		public static readonly Property PROPERTY_CODEID_CODE = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".Code");
		public static readonly Property PROPERTY_CODEID_CODETYPE = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".CodeType");
		public static readonly Property PROPERTY_CODEID_CHANNELID = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".ChannelID");
		public static readonly Property PROPERTY_CODEID_MO = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".Mo");
		public static readonly Property PROPERTY_CODEID_MOTYPE = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".MOType");
		public static readonly Property PROPERTY_CODEID_MOLENGTH = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".MOLength");
		public static readonly Property PROPERTY_CODEID_ORDERINDEX = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".OrderIndex");
		public static readonly Property PROPERTY_CODEID_SPCODE = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".SPCode");
		public static readonly Property PROPERTY_CODEID_SPCODETYPE = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".SPCodeType");
		public static readonly Property PROPERTY_CODEID_SPCODELENGTH = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".SPCodeLength");
		public static readonly Property PROPERTY_CODEID_HASFILTERS = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".HasFilters");
		public static readonly Property PROPERTY_CODEID_HASPARAMSCONVERT = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".HasParamsConvert");
		public static readonly Property PROPERTY_CODEID_ISDIABLE = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".IsDiable");
		public static readonly Property PROPERTY_CODEID_PRICE = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".Price");
		public static readonly Property PROPERTY_CODEID_OPERATIONTYPE = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".OperationType");
		public static readonly Property PROPERTY_CODEID_HASDAYTOTALLIMIT = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".HasDayTotalLimit");
		public static readonly Property PROPERTY_CODEID_DAYTOTALLIMITCOUNT = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".DayTotalLimitCount");
		public static readonly Property PROPERTY_CODEID_HASPHONELIMIT = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".HasPhoneLimit");
		public static readonly Property PROPERTY_CODEID_PHONELIMITDAYCOUNT = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".PhoneLimitDayCount");
		public static readonly Property PROPERTY_CODEID_PHONELIMITMONTHCOUNT = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".PhoneLimitMonthCount");
		public static readonly Property PROPERTY_CODEID_PHONELIMITTYPE = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".PhoneLimitType");
		public static readonly Property PROPERTY_CODEID_LIMITPROVINCE = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".LimitProvince");
		public static readonly Property PROPERTY_CODEID_LIMITPROVINCEAREA = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".LimitProvinceArea");
		public static readonly Property PROPERTY_CODEID_PARENTID = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".ParentID");
		public static readonly Property PROPERTY_CODEID_CREATEBY = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".CreateBy");
		public static readonly Property PROPERTY_CODEID_CREATEAT = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".CreateAt");
		public static readonly Property PROPERTY_CODEID_LASTMODIFYBY = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".LastModifyBy");
		public static readonly Property PROPERTY_CODEID_LASTMODIFYAT = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".LastModifyAt");
		public static readonly Property PROPERTY_CODEID_LASTMODIFYCOMMENT = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".LastModifyComment");
		#endregion
		public static readonly Property PROPERTY_MAPPINGPARAMS = Property.ForName(SPClientCodeSycnParamsEntity.PROPERTY_NAME_MAPPINGPARAMS);
		public static readonly Property PROPERTY_TITLE = Property.ForName(SPClientCodeSycnParamsEntity.PROPERTY_NAME_TITLE);
		public static readonly Property PROPERTY_PARAMSVALUE = Property.ForName(SPClientCodeSycnParamsEntity.PROPERTY_NAME_PARAMSVALUE);
		public static readonly Property PROPERTY_PARAMSTYPE = Property.ForName(SPClientCodeSycnParamsEntity.PROPERTY_NAME_PARAMSTYPE);
		public static readonly Property PROPERTY_CREATEBY = Property.ForName(SPClientCodeSycnParamsEntity.PROPERTY_NAME_CREATEBY);
		public static readonly Property PROPERTY_CREATEAT = Property.ForName(SPClientCodeSycnParamsEntity.PROPERTY_NAME_CREATEAT);
		public static readonly Property PROPERTY_LASTMODIFYBY = Property.ForName(SPClientCodeSycnParamsEntity.PROPERTY_NAME_LASTMODIFYBY);
		public static readonly Property PROPERTY_LASTMODIFYAT = Property.ForName(SPClientCodeSycnParamsEntity.PROPERTY_NAME_LASTMODIFYAT);
		public static readonly Property PROPERTY_LASTMODIFYCOMMENT = Property.ForName(SPClientCodeSycnParamsEntity.PROPERTY_NAME_LASTMODIFYCOMMENT);
      
		#region 子类集合字段查询字段
	
		#endregion

		#endregion

		
		public override string[] PkPropertyName
        {
            get { return new string[] { "Id" }; }
        }
		
		public override Type GetFieldTypeByFieldName(string fieldName)
        {
			switch (fieldName)
            {
                case "Id":
                    return typeof (int);
                case "Name":
                    return typeof (string);
                case "Description":
                    return typeof (string);
                case "IsEnable":
                    return typeof (bool);
                case "IsRequired":
                    return typeof (bool);
                case "CodeID":
                    return typeof (int);
                case "MappingParams":
                    return typeof (string);
                case "Title":
                    return typeof (string);
                case "ParamsValue":
                    return typeof (string);
                case "ParamsType":
                    return typeof (string);
                case "CreateBy":
                    return typeof (int);
                case "CreateAt":
                    return typeof (DateTime);
                case "LastModifyBy":
                    return typeof (int);
                case "LastModifyAt":
                    return typeof (DateTime);
                case "LastModifyComment":
                    return typeof (string);
          }
			return typeof(string);
        }
		
				public List<SPClientCodeSycnParamsEntity> GetList_By_SPCodeEntity(SPCodeEntity fkentity)
		{
			NHibernateDynamicQueryGenerator<SPClientCodeSycnParamsEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_CODEID.Eq(fkentity));

            return this.FindListByQueryBuilder(dynamicQueryGenerator);
		}
		
		
        public List<SPClientCodeSycnParamsEntity> GetPageList_By_SPCodeEntity(string orderByColumnName, bool isDesc, int pageIndex, int pageSize, SPCodeEntity fkentity, out int recordCount)
        {
            NHibernateDynamicQueryGenerator<SPClientCodeSycnParamsEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_CODEID.Eq(fkentity));

            AddDefaultOrderByToQueryGenerator(orderByColumnName, isDesc, dynamicQueryGenerator);

            dynamicQueryGenerator.SetFirstResult((pageIndex - 1) * pageSize);

            dynamicQueryGenerator.SetMaxResults(pageSize);

            return FindListByPageByQueryBuilder(dynamicQueryGenerator, out recordCount);
        }		
		

		
		
		
    }
}
