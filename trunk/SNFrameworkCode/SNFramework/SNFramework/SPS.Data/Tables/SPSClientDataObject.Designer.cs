// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using NHibernate.Criterion;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery.Propertys;
using SPS.Entity.Tables;
using Legendigital.Framework.Common.Data.NHibernate;


namespace SPS.Data.Tables
{
    public partial class SPSClientDataObject : BaseNHibernateDataObject<SPSClientEntity>
    {
				#region Expression Query Property (标准查询字段)
		public static readonly Property PROPERTY_ID = Property.ForName(SPSClientEntity.PROPERTY_NAME_ID);
		public static readonly Property PROPERTY_NAME = Property.ForName(SPSClientEntity.PROPERTY_NAME_NAME);
		public static readonly Property PROPERTY_DESCRIPTION = Property.ForName(SPSClientEntity.PROPERTY_NAME_DESCRIPTION);
		public static readonly Property PROPERTY_USERID = Property.ForName(SPSClientEntity.PROPERTY_NAME_USERID);
		public static readonly Property PROPERTY_ISDEFAULTCLIENT = Property.ForName(SPSClientEntity.PROPERTY_NAME_ISDEFAULTCLIENT);
		public static readonly Property PROPERTY_SYNCDATA = Property.ForName(SPSClientEntity.PROPERTY_NAME_SYNCDATA);
		public static readonly Property PROPERTY_SYCNNOTINTERCEPTCOUNT = Property.ForName(SPSClientEntity.PROPERTY_NAME_SYCNNOTINTERCEPTCOUNT);
		public static readonly Property PROPERTY_SYNCDATASETTING = Property.ForName(SPSClientEntity.PROPERTY_NAME_SYNCDATASETTING);
		#region syncDataSetting字段外键查询字段
        public static NHibernateDynamicQueryGenerator<SPSClientEntity> InClude_SyncDataSetting_Query(NHibernateDynamicQueryGenerator<SPSClientEntity> queryGenerator)
        {
            return queryGenerator.AddAlians(SPSClientEntity.PROPERTY_NAME_SYNCDATASETTING, PROPERTY_SYNCDATASETTING_ALIAS_NAME);
        }
        public static readonly string PROPERTY_SYNCDATASETTING_ALIAS_NAME = "SyncDataSetting_SPSClientEntity_Alias";
		public static readonly Property PROPERTY_SYNCDATASETTING_ID = Property.ForName(PROPERTY_SYNCDATASETTING_ALIAS_NAME + ".Id");
		public static readonly Property PROPERTY_SYNCDATASETTING_SYCNRETRYTIMES = Property.ForName(PROPERTY_SYNCDATASETTING_ALIAS_NAME + ".SycnRetryTimes");
		public static readonly Property PROPERTY_SYNCDATASETTING_SYNCTYPE = Property.ForName(PROPERTY_SYNCDATASETTING_ALIAS_NAME + ".SyncType");
		public static readonly Property PROPERTY_SYNCDATASETTING_SYCNMO = Property.ForName(PROPERTY_SYNCDATASETTING_ALIAS_NAME + ".SycnMO");
		public static readonly Property PROPERTY_SYNCDATASETTING_SYCNMOURL = Property.ForName(PROPERTY_SYNCDATASETTING_ALIAS_NAME + ".SycnMOUrl");
		public static readonly Property PROPERTY_SYNCDATASETTING_SYCNMOOKMESSAGE = Property.ForName(PROPERTY_SYNCDATASETTING_ALIAS_NAME + ".SycnMOOkMessage");
		public static readonly Property PROPERTY_SYNCDATASETTING_SYCNMOFAILEDMESSAGE = Property.ForName(PROPERTY_SYNCDATASETTING_ALIAS_NAME + ".SycnMOFailedMessage");
		public static readonly Property PROPERTY_SYNCDATASETTING_SYCNMR = Property.ForName(PROPERTY_SYNCDATASETTING_ALIAS_NAME + ".SycnMR");
		public static readonly Property PROPERTY_SYNCDATASETTING_SYCNMRURL = Property.ForName(PROPERTY_SYNCDATASETTING_ALIAS_NAME + ".SycnMRUrl");
		public static readonly Property PROPERTY_SYNCDATASETTING_SYCNMROKMESSAGE = Property.ForName(PROPERTY_SYNCDATASETTING_ALIAS_NAME + ".SycnMROkMessage");
		public static readonly Property PROPERTY_SYNCDATASETTING_SYCNMRFAILEDMESSAGE = Property.ForName(PROPERTY_SYNCDATASETTING_ALIAS_NAME + ".SycnMRFailedMessage");
		public static readonly Property PROPERTY_SYNCDATASETTING_SYCNSATE = Property.ForName(PROPERTY_SYNCDATASETTING_ALIAS_NAME + ".SycnSate");
		public static readonly Property PROPERTY_SYNCDATASETTING_SYCNSATEURL = Property.ForName(PROPERTY_SYNCDATASETTING_ALIAS_NAME + ".SycnSateUrl");
		public static readonly Property PROPERTY_SYNCDATASETTING_SYCNSATEOKMESSAGE = Property.ForName(PROPERTY_SYNCDATASETTING_ALIAS_NAME + ".SycnSateOkMessage");
		public static readonly Property PROPERTY_SYNCDATASETTING_SYCNSATEFAILEDMESSAGE = Property.ForName(PROPERTY_SYNCDATASETTING_ALIAS_NAME + ".SycnSateFailedMessage");
		#endregion
		public static readonly Property PROPERTY_ALIAS = Property.ForName(SPSClientEntity.PROPERTY_NAME_ALIAS);
		public static readonly Property PROPERTY_INTERCEPTRATE = Property.ForName(SPSClientEntity.PROPERTY_NAME_INTERCEPTRATE);
		public static readonly Property PROPERTY_DEFAULTPRICE = Property.ForName(SPSClientEntity.PROPERTY_NAME_DEFAULTPRICE);
		public static readonly Property PROPERTY_DEFAULTSHOWRECORDDAYS = Property.ForName(SPSClientEntity.PROPERTY_NAME_DEFAULTSHOWRECORDDAYS);
		public static readonly Property PROPERTY_CREATEBY = Property.ForName(SPSClientEntity.PROPERTY_NAME_CREATEBY);
		public static readonly Property PROPERTY_CREATEAT = Property.ForName(SPSClientEntity.PROPERTY_NAME_CREATEAT);
		public static readonly Property PROPERTY_LASTMODIFYBY = Property.ForName(SPSClientEntity.PROPERTY_NAME_LASTMODIFYBY);
		public static readonly Property PROPERTY_LASTMODIFYAT = Property.ForName(SPSClientEntity.PROPERTY_NAME_LASTMODIFYAT);
		public static readonly Property PROPERTY_LASTMODIFYCOMMENT = Property.ForName(SPSClientEntity.PROPERTY_NAME_LASTMODIFYCOMMENT);
      
		#region 子类集合字段查询字段
	
		#endregion

		#endregion

		
		public override string[] PkPropertyName
        {
            get { return new string[] { "Id" }; }
        }
		
		public override Type GetFieldTypeByFieldName(string fieldName)
        {
			switch (fieldName)
            {
                case "Id":
                    return typeof (int);
                case "Name":
                    return typeof (string);
                case "Description":
                    return typeof (string);
                case "UserID":
                    return typeof (int);
                case "IsDefaultClient":
                    return typeof (bool);
                case "SyncData":
                    return typeof (bool);
                case "SycnNotInterceptCount":
                    return typeof (int);
                case "SyncDataSetting":
                    return typeof (int);
                case "Alias":
                    return typeof (string);
                case "InterceptRate":
                    return typeof (decimal);
                case "DefaultPrice":
                    return typeof (decimal);
                case "DefaultShowRecordDays":
                    return typeof (int);
                case "CreateBy":
                    return typeof (int);
                case "CreateAt":
                    return typeof (DateTime);
                case "LastModifyBy":
                    return typeof (int);
                case "LastModifyAt":
                    return typeof (DateTime);
                case "LastModifyComment":
                    return typeof (string);
          }
			return typeof(string);
        }
		
				public List<SPSClientEntity> GetList_By_SPSDataSycnSettingEntity(SPSDataSycnSettingEntity fkentity)
		{
			NHibernateDynamicQueryGenerator<SPSClientEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_SYNCDATASETTING.Eq(fkentity));

            return this.FindListByQueryBuilder(dynamicQueryGenerator);
		}
		
		
        public List<SPSClientEntity> GetPageList_By_SPSDataSycnSettingEntity(string orderByColumnName, bool isDesc, int pageIndex, int pageSize, SPSDataSycnSettingEntity fkentity, out int recordCount)
        {
            NHibernateDynamicQueryGenerator<SPSClientEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_SYNCDATASETTING.Eq(fkentity));

            AddDefaultOrderByToQueryGenerator(orderByColumnName, isDesc, dynamicQueryGenerator);

            dynamicQueryGenerator.SetFirstResult((pageIndex - 1) * pageSize);

            dynamicQueryGenerator.SetMaxResults(pageSize);

            return FindListByPageByQueryBuilder(dynamicQueryGenerator, out recordCount);
        }		
		

		
		
		
    }
}
