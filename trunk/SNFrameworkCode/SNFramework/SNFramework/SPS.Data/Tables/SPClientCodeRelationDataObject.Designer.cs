// --------------------------------------------------------------------------------------------------------------------
// <copyright company="foreveross" file="SPClientCodeRelationDataObject.Designer.cs">
//   Copyright (c) Foreveross Enterprises. All rights reserved.
// </copyright>
// <summary>
//   Generated by MyGeneration Version # (1.3.0.9)
// </summary>
// --------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Text;
using NHibernate.Criterion;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery.Propertys;
using SPS.Entity.Tables;
using Legendigital.Framework.Common.Data.NHibernate;


namespace SPS.Data.Tables
{
    public partial class SPClientCodeRelationDataObject : BaseNHibernateDataObject<SPClientCodeRelationEntity,int>
    {
		#region Expression Query Property (标准查询字段)
		public static readonly IntProperty PROPERTY_ID = new IntProperty(Property.ForName(SPClientCodeRelationEntity.PROPERTY_NAME_ID));		
		public static readonly EntityProperty<SPCodeEntity> PROPERTY_CODEID = new EntityProperty<SPCodeEntity>(Property.ForName(SPClientCodeRelationEntity.PROPERTY_NAME_CODEID));
		#region codeID字段外键查询字段
        public static NHibernateDynamicQueryGenerator<SPClientCodeRelationEntity> InClude_CodeID_Query(NHibernateDynamicQueryGenerator<SPClientCodeRelationEntity> queryGenerator)
        {
            return queryGenerator.AddAlians(SPClientCodeRelationEntity.PROPERTY_NAME_CODEID, PROPERTY_CODEID_ALIAS_NAME);
        }
        public static readonly string PROPERTY_CODEID_ALIAS_NAME = "CodeID_SPClientCodeRelationEntity_Alias";
		public static readonly IntProperty PROPERTY_CODEID_ID = new IntProperty(Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".Id"));
		public static readonly StringProperty PROPERTY_CODEID_NAME = new StringProperty(Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".Name"));
		public static readonly StringProperty PROPERTY_CODEID_DESCRIPTION = new StringProperty(Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".Description"));
		public static readonly StringProperty PROPERTY_CODEID_CODE = new StringProperty(Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".Code"));
		public static readonly StringProperty PROPERTY_CODEID_CODETYPE = new StringProperty(Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".CodeType"));
		public static readonly EntityProperty<SPChannelEntity> PROPERTY_CODEID_CHANNELID = new EntityProperty<SPChannelEntity>(Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".ChannelID"));
		public static readonly StringProperty PROPERTY_CODEID_MO = new StringProperty(Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".Mo"));
		public static readonly StringProperty PROPERTY_CODEID_MOTYPE = new StringProperty(Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".MOType"));
		public static readonly IntProperty PROPERTY_CODEID_MOLENGTH = new IntProperty(Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".MOLength"));
		public static readonly IntProperty PROPERTY_CODEID_ORDERINDEX = new IntProperty(Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".OrderIndex"));
		public static readonly StringProperty PROPERTY_CODEID_SPCODE = new StringProperty(Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".SPCode"));
		public static readonly StringProperty PROPERTY_CODEID_SPCODETYPE = new StringProperty(Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".SPCodeType"));
		public static readonly IntProperty PROPERTY_CODEID_SPCODELENGTH = new IntProperty(Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".SPCodeLength"));
		public static readonly BoolProperty PROPERTY_CODEID_HASFILTERS = new BoolProperty(Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".HasFilters"));
		public static readonly BoolProperty PROPERTY_CODEID_HASPARAMSCONVERT = new BoolProperty(Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".HasParamsConvert"));
		public static readonly BoolProperty PROPERTY_CODEID_ISDIABLE = new BoolProperty(Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".IsDiable"));
		public static readonly DecimalProperty PROPERTY_CODEID_PRICE = new DecimalProperty(Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".Price"));
		public static readonly StringProperty PROPERTY_CODEID_OPERATIONTYPE = new StringProperty(Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".OperationType"));
		public static readonly BoolProperty PROPERTY_CODEID_HASDAYTOTALLIMIT = new BoolProperty(Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".HasDayTotalLimit"));
		public static readonly IntProperty PROPERTY_CODEID_DAYTOTALLIMITCOUNT = new IntProperty(Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".DayTotalLimitCount"));
		public static readonly BoolProperty PROPERTY_CODEID_HASPHONELIMIT = new BoolProperty(Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".HasPhoneLimit"));
		public static readonly IntProperty PROPERTY_CODEID_PHONELIMITDAYCOUNT = new IntProperty(Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".PhoneLimitDayCount"));
		public static readonly IntProperty PROPERTY_CODEID_PHONELIMITMONTHCOUNT = new IntProperty(Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".PhoneLimitMonthCount"));
		public static readonly IntProperty PROPERTY_CODEID_PHONELIMITTYPE = new IntProperty(Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".PhoneLimitType"));
		public static readonly BoolProperty PROPERTY_CODEID_LIMITPROVINCE = new BoolProperty(Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".LimitProvince"));
		public static readonly StringProperty PROPERTY_CODEID_LIMITPROVINCEAREA = new StringProperty(Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".LimitProvinceArea"));
		public static readonly EntityProperty<SPCodeEntity> PROPERTY_CODEID_PARENTID = new EntityProperty<SPCodeEntity>(Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".ParentID"));
		public static readonly IntProperty PROPERTY_CODEID_CREATEBY = new IntProperty(Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".CreateBy"));
		public static readonly DateTimeProperty PROPERTY_CODEID_CREATEAT = new DateTimeProperty(Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".CreateAt"));
		public static readonly IntProperty PROPERTY_CODEID_LASTMODIFYBY = new IntProperty(Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".LastModifyBy"));
		public static readonly DateTimeProperty PROPERTY_CODEID_LASTMODIFYAT = new DateTimeProperty(Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".LastModifyAt"));
		public static readonly StringProperty PROPERTY_CODEID_LASTMODIFYCOMMENT = new StringProperty(Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".LastModifyComment"));
		#endregion
		public static readonly EntityProperty<SPSClientEntity> PROPERTY_CLIENTID = new EntityProperty<SPSClientEntity>(Property.ForName(SPClientCodeRelationEntity.PROPERTY_NAME_CLIENTID));
		#region clientID字段外键查询字段
        public static NHibernateDynamicQueryGenerator<SPClientCodeRelationEntity> InClude_ClientID_Query(NHibernateDynamicQueryGenerator<SPClientCodeRelationEntity> queryGenerator)
        {
            return queryGenerator.AddAlians(SPClientCodeRelationEntity.PROPERTY_NAME_CLIENTID, PROPERTY_CLIENTID_ALIAS_NAME);
        }
        public static readonly string PROPERTY_CLIENTID_ALIAS_NAME = "ClientID_SPClientCodeRelationEntity_Alias";
		public static readonly IntProperty PROPERTY_CLIENTID_ID = new IntProperty(Property.ForName(PROPERTY_CLIENTID_ALIAS_NAME + ".Id"));
		public static readonly StringProperty PROPERTY_CLIENTID_NAME = new StringProperty(Property.ForName(PROPERTY_CLIENTID_ALIAS_NAME + ".Name"));
		public static readonly StringProperty PROPERTY_CLIENTID_DESCRIPTION = new StringProperty(Property.ForName(PROPERTY_CLIENTID_ALIAS_NAME + ".Description"));
		public static readonly IntProperty PROPERTY_CLIENTID_USERID = new IntProperty(Property.ForName(PROPERTY_CLIENTID_ALIAS_NAME + ".UserID"));
		public static readonly BoolProperty PROPERTY_CLIENTID_ISDEFAULTCLIENT = new BoolProperty(Property.ForName(PROPERTY_CLIENTID_ALIAS_NAME + ".IsDefaultClient"));
		public static readonly BoolProperty PROPERTY_CLIENTID_SYNCDATA = new BoolProperty(Property.ForName(PROPERTY_CLIENTID_ALIAS_NAME + ".SyncData"));
		public static readonly IntProperty PROPERTY_CLIENTID_SYCNNOTINTERCEPTCOUNT = new IntProperty(Property.ForName(PROPERTY_CLIENTID_ALIAS_NAME + ".SycnNotInterceptCount"));
		public static readonly EntityProperty<SPSDataSycnSettingEntity> PROPERTY_CLIENTID_SYNCDATASETTING = new EntityProperty<SPSDataSycnSettingEntity>(Property.ForName(PROPERTY_CLIENTID_ALIAS_NAME + ".SyncDataSetting"));
		public static readonly StringProperty PROPERTY_CLIENTID_ALIAS = new StringProperty(Property.ForName(PROPERTY_CLIENTID_ALIAS_NAME + ".Alias"));
		public static readonly DecimalProperty PROPERTY_CLIENTID_INTERCEPTRATE = new DecimalProperty(Property.ForName(PROPERTY_CLIENTID_ALIAS_NAME + ".InterceptRate"));
		public static readonly DecimalProperty PROPERTY_CLIENTID_DEFAULTPRICE = new DecimalProperty(Property.ForName(PROPERTY_CLIENTID_ALIAS_NAME + ".DefaultPrice"));
		public static readonly IntProperty PROPERTY_CLIENTID_DEFAULTSHOWRECORDDAYS = new IntProperty(Property.ForName(PROPERTY_CLIENTID_ALIAS_NAME + ".DefaultShowRecordDays"));
		public static readonly IntProperty PROPERTY_CLIENTID_CREATEBY = new IntProperty(Property.ForName(PROPERTY_CLIENTID_ALIAS_NAME + ".CreateBy"));
		public static readonly DateTimeProperty PROPERTY_CLIENTID_CREATEAT = new DateTimeProperty(Property.ForName(PROPERTY_CLIENTID_ALIAS_NAME + ".CreateAt"));
		public static readonly IntProperty PROPERTY_CLIENTID_LASTMODIFYBY = new IntProperty(Property.ForName(PROPERTY_CLIENTID_ALIAS_NAME + ".LastModifyBy"));
		public static readonly DateTimeProperty PROPERTY_CLIENTID_LASTMODIFYAT = new DateTimeProperty(Property.ForName(PROPERTY_CLIENTID_ALIAS_NAME + ".LastModifyAt"));
		public static readonly StringProperty PROPERTY_CLIENTID_LASTMODIFYCOMMENT = new StringProperty(Property.ForName(PROPERTY_CLIENTID_ALIAS_NAME + ".LastModifyComment"));
		#endregion
		public static readonly DecimalProperty PROPERTY_PRICE = new DecimalProperty(Property.ForName(SPClientCodeRelationEntity.PROPERTY_NAME_PRICE));		
		public static readonly DecimalProperty PROPERTY_INTERCEPTRATE = new DecimalProperty(Property.ForName(SPClientCodeRelationEntity.PROPERTY_NAME_INTERCEPTRATE));		
		public static readonly BoolProperty PROPERTY_USECLIENTDEFAULTSYCNSETTING = new BoolProperty(Property.ForName(SPClientCodeRelationEntity.PROPERTY_NAME_USECLIENTDEFAULTSYCNSETTING));		
		public static readonly BoolProperty PROPERTY_SYNCDATA = new BoolProperty(Property.ForName(SPClientCodeRelationEntity.PROPERTY_NAME_SYNCDATA));		
		public static readonly StringProperty PROPERTY_SYCNRETRYTIMES = new StringProperty(Property.ForName(SPClientCodeRelationEntity.PROPERTY_NAME_SYCNRETRYTIMES));		
		public static readonly EntityProperty<SPSDataSycnSettingEntity> PROPERTY_SYNCDATASETTING = new EntityProperty<SPSDataSycnSettingEntity>(Property.ForName(SPClientCodeRelationEntity.PROPERTY_NAME_SYNCDATASETTING));
		#region syncDataSetting字段外键查询字段
        public static NHibernateDynamicQueryGenerator<SPClientCodeRelationEntity> InClude_SyncDataSetting_Query(NHibernateDynamicQueryGenerator<SPClientCodeRelationEntity> queryGenerator)
        {
            return queryGenerator.AddAlians(SPClientCodeRelationEntity.PROPERTY_NAME_SYNCDATASETTING, PROPERTY_SYNCDATASETTING_ALIAS_NAME);
        }
        public static readonly string PROPERTY_SYNCDATASETTING_ALIAS_NAME = "SyncDataSetting_SPClientCodeRelationEntity_Alias";
		public static readonly IntProperty PROPERTY_SYNCDATASETTING_ID = new IntProperty(Property.ForName(PROPERTY_SYNCDATASETTING_ALIAS_NAME + ".Id"));
		public static readonly IntProperty PROPERTY_SYNCDATASETTING_SYCNRETRYTIMES = new IntProperty(Property.ForName(PROPERTY_SYNCDATASETTING_ALIAS_NAME + ".SycnRetryTimes"));
		public static readonly StringProperty PROPERTY_SYNCDATASETTING_SYNCTYPE = new StringProperty(Property.ForName(PROPERTY_SYNCDATASETTING_ALIAS_NAME + ".SyncType"));
		public static readonly BoolProperty PROPERTY_SYNCDATASETTING_SYCNMO = new BoolProperty(Property.ForName(PROPERTY_SYNCDATASETTING_ALIAS_NAME + ".SycnMO"));
		public static readonly StringProperty PROPERTY_SYNCDATASETTING_SYCNMOURL = new StringProperty(Property.ForName(PROPERTY_SYNCDATASETTING_ALIAS_NAME + ".SycnMOUrl"));
		public static readonly StringProperty PROPERTY_SYNCDATASETTING_SYCNMOOKMESSAGE = new StringProperty(Property.ForName(PROPERTY_SYNCDATASETTING_ALIAS_NAME + ".SycnMOOkMessage"));
		public static readonly StringProperty PROPERTY_SYNCDATASETTING_SYCNMOFAILEDMESSAGE = new StringProperty(Property.ForName(PROPERTY_SYNCDATASETTING_ALIAS_NAME + ".SycnMOFailedMessage"));
		public static readonly BoolProperty PROPERTY_SYNCDATASETTING_SYCNMR = new BoolProperty(Property.ForName(PROPERTY_SYNCDATASETTING_ALIAS_NAME + ".SycnMR"));
		public static readonly StringProperty PROPERTY_SYNCDATASETTING_SYCNMRURL = new StringProperty(Property.ForName(PROPERTY_SYNCDATASETTING_ALIAS_NAME + ".SycnMRUrl"));
		public static readonly StringProperty PROPERTY_SYNCDATASETTING_SYCNMROKMESSAGE = new StringProperty(Property.ForName(PROPERTY_SYNCDATASETTING_ALIAS_NAME + ".SycnMROkMessage"));
		public static readonly StringProperty PROPERTY_SYNCDATASETTING_SYCNMRFAILEDMESSAGE = new StringProperty(Property.ForName(PROPERTY_SYNCDATASETTING_ALIAS_NAME + ".SycnMRFailedMessage"));
		public static readonly BoolProperty PROPERTY_SYNCDATASETTING_SYCNSATE = new BoolProperty(Property.ForName(PROPERTY_SYNCDATASETTING_ALIAS_NAME + ".SycnSate"));
		public static readonly StringProperty PROPERTY_SYNCDATASETTING_SYCNSATEURL = new StringProperty(Property.ForName(PROPERTY_SYNCDATASETTING_ALIAS_NAME + ".SycnSateUrl"));
		public static readonly StringProperty PROPERTY_SYNCDATASETTING_SYCNSATEOKMESSAGE = new StringProperty(Property.ForName(PROPERTY_SYNCDATASETTING_ALIAS_NAME + ".SycnSateOkMessage"));
		public static readonly StringProperty PROPERTY_SYNCDATASETTING_SYCNSATEFAILEDMESSAGE = new StringProperty(Property.ForName(PROPERTY_SYNCDATASETTING_ALIAS_NAME + ".SycnSateFailedMessage"));
		#endregion
		public static readonly DateTimeProperty PROPERTY_STARTDATE = new DateTimeProperty(Property.ForName(SPClientCodeRelationEntity.PROPERTY_NAME_STARTDATE));		
		public static readonly DateTimeProperty PROPERTY_ENDDATE = new DateTimeProperty(Property.ForName(SPClientCodeRelationEntity.PROPERTY_NAME_ENDDATE));		
		public static readonly BoolProperty PROPERTY_ISENABLE = new BoolProperty(Property.ForName(SPClientCodeRelationEntity.PROPERTY_NAME_ISENABLE));		
		public static readonly IntProperty PROPERTY_SYCNNOTINTERCEPTCOUNT = new IntProperty(Property.ForName(SPClientCodeRelationEntity.PROPERTY_NAME_SYCNNOTINTERCEPTCOUNT));		
		public static readonly IntProperty PROPERTY_DEFAULTSHOWRECORDDAYS = new IntProperty(Property.ForName(SPClientCodeRelationEntity.PROPERTY_NAME_DEFAULTSHOWRECORDDAYS));		
		public static readonly IntProperty PROPERTY_CREATEBY = new IntProperty(Property.ForName(SPClientCodeRelationEntity.PROPERTY_NAME_CREATEBY));		
		public static readonly DateTimeProperty PROPERTY_CREATEAT = new DateTimeProperty(Property.ForName(SPClientCodeRelationEntity.PROPERTY_NAME_CREATEAT));		
		public static readonly IntProperty PROPERTY_LASTMODIFYBY = new IntProperty(Property.ForName(SPClientCodeRelationEntity.PROPERTY_NAME_LASTMODIFYBY));		
		public static readonly DateTimeProperty PROPERTY_LASTMODIFYAT = new DateTimeProperty(Property.ForName(SPClientCodeRelationEntity.PROPERTY_NAME_LASTMODIFYAT));		
		public static readonly StringProperty PROPERTY_LASTMODIFYCOMMENT = new StringProperty(Property.ForName(SPClientCodeRelationEntity.PROPERTY_NAME_LASTMODIFYCOMMENT));		
      












		#region 子类集合字段查询字段
	
		#endregion

		#endregion

		
		public override string[] PkPropertyName
        {
            get { return new string[] { "Id" }; }
        }
		
		public override Type GetFieldTypeByFieldName(string fieldName)
        {
			switch (fieldName)
            {
                case "Id":
                    return typeof (int);
                case "CodeID":
                    return typeof (int);
                case "ClientID":
                    return typeof (int);
                case "Price":
                    return typeof (decimal);
                case "InterceptRate":
                    return typeof (decimal);
                case "UseClientDefaultSycnSetting":
                    return typeof (bool);
                case "SyncData":
                    return typeof (bool);
                case "SycnRetryTimes":
                    return typeof (string);
                case "SyncDataSetting":
                    return typeof (int);
                case "StartDate":
                    return typeof (DateTime);
                case "EndDate":
                    return typeof (DateTime);
                case "IsEnable":
                    return typeof (bool);
                case "SycnNotInterceptCount":
                    return typeof (int);
                case "DefaultShowRecordDays":
                    return typeof (int);
                case "CreateBy":
                    return typeof (int);
                case "CreateAt":
                    return typeof (DateTime);
                case "LastModifyBy":
                    return typeof (int);
                case "LastModifyAt":
                    return typeof (DateTime);
                case "LastModifyComment":
                    return typeof (string);
          }
			return typeof(string);
        }

		#region 获取外键字段类型
		
		public override Type GetFieldTypeByFieldName(string fieldName, string parent_alias)
        {
            switch (parent_alias)
            {
	            case "CodeID_SPClientCodeRelationEntity_Alias":
					switch (fieldName)
					{
                		case "CodeID_SPClientCodeRelationEntity_Alias.Id":
							return typeof (int);
                		case "CodeID_SPClientCodeRelationEntity_Alias.Name":
							return typeof (string);
                		case "CodeID_SPClientCodeRelationEntity_Alias.Description":
							return typeof (string);
                		case "CodeID_SPClientCodeRelationEntity_Alias.Code":
							return typeof (string);
                		case "CodeID_SPClientCodeRelationEntity_Alias.CodeType":
							return typeof (string);
                		case "CodeID_SPClientCodeRelationEntity_Alias.ChannelID":
							return typeof (int);
                		case "CodeID_SPClientCodeRelationEntity_Alias.Mo":
							return typeof (string);
                		case "CodeID_SPClientCodeRelationEntity_Alias.MOType":
							return typeof (string);
                		case "CodeID_SPClientCodeRelationEntity_Alias.MOLength":
							return typeof (int);
                		case "CodeID_SPClientCodeRelationEntity_Alias.OrderIndex":
							return typeof (int);
                		case "CodeID_SPClientCodeRelationEntity_Alias.SPCode":
							return typeof (string);
                		case "CodeID_SPClientCodeRelationEntity_Alias.SPCodeType":
							return typeof (string);
                		case "CodeID_SPClientCodeRelationEntity_Alias.SPCodeLength":
							return typeof (int);
                		case "CodeID_SPClientCodeRelationEntity_Alias.HasFilters":
							return typeof (bool);
                		case "CodeID_SPClientCodeRelationEntity_Alias.HasParamsConvert":
							return typeof (bool);
                		case "CodeID_SPClientCodeRelationEntity_Alias.IsDiable":
							return typeof (bool);
                		case "CodeID_SPClientCodeRelationEntity_Alias.Price":
							return typeof (decimal);
                		case "CodeID_SPClientCodeRelationEntity_Alias.OperationType":
							return typeof (string);
                		case "CodeID_SPClientCodeRelationEntity_Alias.HasDayTotalLimit":
							return typeof (bool);
                		case "CodeID_SPClientCodeRelationEntity_Alias.DayTotalLimitCount":
							return typeof (int);
                		case "CodeID_SPClientCodeRelationEntity_Alias.HasPhoneLimit":
							return typeof (bool);
                		case "CodeID_SPClientCodeRelationEntity_Alias.PhoneLimitDayCount":
							return typeof (int);
                		case "CodeID_SPClientCodeRelationEntity_Alias.PhoneLimitMonthCount":
							return typeof (int);
                		case "CodeID_SPClientCodeRelationEntity_Alias.PhoneLimitType":
							return typeof (int);
                		case "CodeID_SPClientCodeRelationEntity_Alias.LimitProvince":
							return typeof (bool);
                		case "CodeID_SPClientCodeRelationEntity_Alias.LimitProvinceArea":
							return typeof (string);
                		case "CodeID_SPClientCodeRelationEntity_Alias.ParentID":
							return typeof (int);
                		case "CodeID_SPClientCodeRelationEntity_Alias.CreateBy":
							return typeof (int);
                		case "CodeID_SPClientCodeRelationEntity_Alias.CreateAt":
							return typeof (DateTime);
                		case "CodeID_SPClientCodeRelationEntity_Alias.LastModifyBy":
							return typeof (int);
                		case "CodeID_SPClientCodeRelationEntity_Alias.LastModifyAt":
							return typeof (DateTime);
                		case "CodeID_SPClientCodeRelationEntity_Alias.LastModifyComment":
							return typeof (string);
          			}
                    break;
	            case "ClientID_SPClientCodeRelationEntity_Alias":
					switch (fieldName)
					{
                		case "ClientID_SPClientCodeRelationEntity_Alias.Id":
							return typeof (int);
                		case "ClientID_SPClientCodeRelationEntity_Alias.Name":
							return typeof (string);
                		case "ClientID_SPClientCodeRelationEntity_Alias.Description":
							return typeof (string);
                		case "ClientID_SPClientCodeRelationEntity_Alias.UserID":
							return typeof (int);
                		case "ClientID_SPClientCodeRelationEntity_Alias.IsDefaultClient":
							return typeof (bool);
                		case "ClientID_SPClientCodeRelationEntity_Alias.SyncData":
							return typeof (bool);
                		case "ClientID_SPClientCodeRelationEntity_Alias.SycnNotInterceptCount":
							return typeof (int);
                		case "ClientID_SPClientCodeRelationEntity_Alias.SyncDataSetting":
							return typeof (int);
                		case "ClientID_SPClientCodeRelationEntity_Alias.Alias":
							return typeof (string);
                		case "ClientID_SPClientCodeRelationEntity_Alias.InterceptRate":
							return typeof (decimal);
                		case "ClientID_SPClientCodeRelationEntity_Alias.DefaultPrice":
							return typeof (decimal);
                		case "ClientID_SPClientCodeRelationEntity_Alias.DefaultShowRecordDays":
							return typeof (int);
                		case "ClientID_SPClientCodeRelationEntity_Alias.CreateBy":
							return typeof (int);
                		case "ClientID_SPClientCodeRelationEntity_Alias.CreateAt":
							return typeof (DateTime);
                		case "ClientID_SPClientCodeRelationEntity_Alias.LastModifyBy":
							return typeof (int);
                		case "ClientID_SPClientCodeRelationEntity_Alias.LastModifyAt":
							return typeof (DateTime);
                		case "ClientID_SPClientCodeRelationEntity_Alias.LastModifyComment":
							return typeof (string);
          			}
                    break;
	            case "SyncDataSetting_SPClientCodeRelationEntity_Alias":
					switch (fieldName)
					{
                		case "SyncDataSetting_SPClientCodeRelationEntity_Alias.Id":
							return typeof (int);
                		case "SyncDataSetting_SPClientCodeRelationEntity_Alias.SycnRetryTimes":
							return typeof (int);
                		case "SyncDataSetting_SPClientCodeRelationEntity_Alias.SyncType":
							return typeof (string);
                		case "SyncDataSetting_SPClientCodeRelationEntity_Alias.SycnMO":
							return typeof (bool);
                		case "SyncDataSetting_SPClientCodeRelationEntity_Alias.SycnMOUrl":
							return typeof (string);
                		case "SyncDataSetting_SPClientCodeRelationEntity_Alias.SycnMOOkMessage":
							return typeof (string);
                		case "SyncDataSetting_SPClientCodeRelationEntity_Alias.SycnMOFailedMessage":
							return typeof (string);
                		case "SyncDataSetting_SPClientCodeRelationEntity_Alias.SycnMR":
							return typeof (bool);
                		case "SyncDataSetting_SPClientCodeRelationEntity_Alias.SycnMRUrl":
							return typeof (string);
                		case "SyncDataSetting_SPClientCodeRelationEntity_Alias.SycnMROkMessage":
							return typeof (string);
                		case "SyncDataSetting_SPClientCodeRelationEntity_Alias.SycnMRFailedMessage":
							return typeof (string);
                		case "SyncDataSetting_SPClientCodeRelationEntity_Alias.SycnSate":
							return typeof (bool);
                		case "SyncDataSetting_SPClientCodeRelationEntity_Alias.SycnSateUrl":
							return typeof (string);
                		case "SyncDataSetting_SPClientCodeRelationEntity_Alias.SycnSateOkMessage":
							return typeof (string);
                		case "SyncDataSetting_SPClientCodeRelationEntity_Alias.SycnSateFailedMessage":
							return typeof (string);
          			}
                    break;
 
                default:
                    break;
            }

            return typeof(string);
        }
		
		#endregion

        public override void InClude_Parent_Table(string parent_alias, NHibernateDynamicQueryGenerator<SPClientCodeRelationEntity> queryGenerator)
        {
            switch (parent_alias)
            {
	            case "CodeID_SPClientCodeRelationEntity_Alias":
                    queryGenerator.AddAlians(SPClientCodeRelationEntity.PROPERTY_NAME_CODEID, PROPERTY_CODEID_ALIAS_NAME);
                    break;
	            case "ClientID_SPClientCodeRelationEntity_Alias":
                    queryGenerator.AddAlians(SPClientCodeRelationEntity.PROPERTY_NAME_CLIENTID, PROPERTY_CLIENTID_ALIAS_NAME);
                    break;
	            case "SyncDataSetting_SPClientCodeRelationEntity_Alias":
                    queryGenerator.AddAlians(SPClientCodeRelationEntity.PROPERTY_NAME_SYNCDATASETTING, PROPERTY_SYNCDATASETTING_ALIAS_NAME);
                    break;
                default:
                    break;
 
            }
        }
		
		
		
		public List<SPClientCodeRelationEntity> GetList_By_CodeID_SPCodeEntity(SPCodeEntity fkentity)
		{
			NHibernateDynamicQueryGenerator<SPClientCodeRelationEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_CODEID.Eq(fkentity));

            return this.FindListByQueryBuilder(dynamicQueryGenerator);
		}
		
		
        public List<SPClientCodeRelationEntity> GetPageList_By_CodeID_SPCodeEntity(string orderByColumnName, bool isDesc, SPCodeEntity fkentity, PageQueryParams pageQueryParams)
        {
            NHibernateDynamicQueryGenerator<SPClientCodeRelationEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_CODEID.Eq(fkentity));

            AddDefaultOrderByToQueryGenerator(orderByColumnName, isDesc, dynamicQueryGenerator);

            return FindListByPageByQueryBuilder(dynamicQueryGenerator, pageQueryParams);
        }		
		
		public List<SPClientCodeRelationEntity> GetList_By_ClientID_SPSClientEntity(SPSClientEntity fkentity)
		{
			NHibernateDynamicQueryGenerator<SPClientCodeRelationEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_CLIENTID.Eq(fkentity));

            return this.FindListByQueryBuilder(dynamicQueryGenerator);
		}
		
		
        public List<SPClientCodeRelationEntity> GetPageList_By_ClientID_SPSClientEntity(string orderByColumnName, bool isDesc, SPSClientEntity fkentity, PageQueryParams pageQueryParams)
        {
            NHibernateDynamicQueryGenerator<SPClientCodeRelationEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_CLIENTID.Eq(fkentity));

            AddDefaultOrderByToQueryGenerator(orderByColumnName, isDesc, dynamicQueryGenerator);

            return FindListByPageByQueryBuilder(dynamicQueryGenerator, pageQueryParams);
        }		
		
		public List<SPClientCodeRelationEntity> GetList_By_SyncDataSetting_SPSDataSycnSettingEntity(SPSDataSycnSettingEntity fkentity)
		{
			NHibernateDynamicQueryGenerator<SPClientCodeRelationEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_SYNCDATASETTING.Eq(fkentity));

            return this.FindListByQueryBuilder(dynamicQueryGenerator);
		}
		
		
        public List<SPClientCodeRelationEntity> GetPageList_By_SyncDataSetting_SPSDataSycnSettingEntity(string orderByColumnName, bool isDesc, SPSDataSycnSettingEntity fkentity, PageQueryParams pageQueryParams)
        {
            NHibernateDynamicQueryGenerator<SPClientCodeRelationEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_SYNCDATASETTING.Eq(fkentity));

            AddDefaultOrderByToQueryGenerator(orderByColumnName, isDesc, dynamicQueryGenerator);

            return FindListByPageByQueryBuilder(dynamicQueryGenerator, pageQueryParams);
        }		
		

		
		
    }
}
