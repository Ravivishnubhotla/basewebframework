// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using NHibernate.Criterion;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery.Propertys;
using SPS.Entity.Tables;
using Legendigital.Framework.Common.Data.NHibernate;


namespace SPS.Data.Tables
{
    public partial class SPClientCodeRelationDataObject : BaseNHibernateDataObject<SPClientCodeRelationEntity>
    {
				#region Expression Query Property (标准查询字段)
		public static readonly Property PROPERTY_ID = Property.ForName(SPClientCodeRelationEntity.PROPERTY_NAME_ID);
		public static readonly Property PROPERTY_CODEID = Property.ForName(SPClientCodeRelationEntity.PROPERTY_NAME_CODEID);
		#region codeID字段外键查询字段
        public static NHibernateDynamicQueryGenerator<SPClientCodeRelationEntity> InClude_CodeID_Query(NHibernateDynamicQueryGenerator<SPClientCodeRelationEntity> queryGenerator)
        {
            return queryGenerator.AddAlians(SPClientCodeRelationEntity.PROPERTY_NAME_CODEID, PROPERTY_CODEID_ALIAS_NAME);
        }
        public static readonly string PROPERTY_CODEID_ALIAS_NAME = "CodeID_SPClientCodeRelationEntity_Alias";
		public static readonly Property PROPERTY_CODEID_ID = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".Id");
		public static readonly Property PROPERTY_CODEID_NAME = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".Name");
		public static readonly Property PROPERTY_CODEID_DESCRIPTION = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".Description");
		public static readonly Property PROPERTY_CODEID_CODE = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".Code");
		public static readonly Property PROPERTY_CODEID_CODETYPE = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".CodeType");
		public static readonly Property PROPERTY_CODEID_CHANNELID = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".ChannelID");
		public static readonly Property PROPERTY_CODEID_MO = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".Mo");
		public static readonly Property PROPERTY_CODEID_MOTYPE = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".MOType");
		public static readonly Property PROPERTY_CODEID_MOLENGTH = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".MOLength");
		public static readonly Property PROPERTY_CODEID_ORDERINDEX = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".OrderIndex");
		public static readonly Property PROPERTY_CODEID_SPCODE = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".SPCode");
		public static readonly Property PROPERTY_CODEID_SPCODETYPE = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".SPCodeType");
		public static readonly Property PROPERTY_CODEID_SPCODELENGTH = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".SPCodeLength");
		public static readonly Property PROPERTY_CODEID_HASFILTERS = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".HasFilters");
		public static readonly Property PROPERTY_CODEID_HASPARAMSCONVERT = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".HasParamsConvert");
		public static readonly Property PROPERTY_CODEID_ISDIABLE = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".IsDiable");
		public static readonly Property PROPERTY_CODEID_PRICE = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".Price");
		public static readonly Property PROPERTY_CODEID_OPERATIONTYPE = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".OperationType");
		public static readonly Property PROPERTY_CODEID_HASDAYTOTALLIMIT = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".HasDayTotalLimit");
		public static readonly Property PROPERTY_CODEID_DAYTOTALLIMITCOUNT = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".DayTotalLimitCount");
		public static readonly Property PROPERTY_CODEID_HASPHONELIMIT = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".HasPhoneLimit");
		public static readonly Property PROPERTY_CODEID_PHONELIMITDAYCOUNT = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".PhoneLimitDayCount");
		public static readonly Property PROPERTY_CODEID_PHONELIMITMONTHCOUNT = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".PhoneLimitMonthCount");
		public static readonly Property PROPERTY_CODEID_PHONELIMITTYPE = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".PhoneLimitType");
		public static readonly Property PROPERTY_CODEID_LIMITPROVINCE = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".LimitProvince");
		public static readonly Property PROPERTY_CODEID_LIMITPROVINCEAREA = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".LimitProvinceArea");
		public static readonly Property PROPERTY_CODEID_PARENTID = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".ParentID");
		public static readonly Property PROPERTY_CODEID_CREATEBY = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".CreateBy");
		public static readonly Property PROPERTY_CODEID_CREATEAT = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".CreateAt");
		public static readonly Property PROPERTY_CODEID_LASTMODIFYBY = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".LastModifyBy");
		public static readonly Property PROPERTY_CODEID_LASTMODIFYAT = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".LastModifyAt");
		public static readonly Property PROPERTY_CODEID_LASTMODIFYCOMMENT = Property.ForName(PROPERTY_CODEID_ALIAS_NAME + ".LastModifyComment");
		#endregion
		public static readonly Property PROPERTY_CLIENTID = Property.ForName(SPClientCodeRelationEntity.PROPERTY_NAME_CLIENTID);
		#region clientID字段外键查询字段
        public static NHibernateDynamicQueryGenerator<SPClientCodeRelationEntity> InClude_ClientID_Query(NHibernateDynamicQueryGenerator<SPClientCodeRelationEntity> queryGenerator)
        {
            return queryGenerator.AddAlians(SPClientCodeRelationEntity.PROPERTY_NAME_CLIENTID, PROPERTY_CLIENTID_ALIAS_NAME);
        }
        public static readonly string PROPERTY_CLIENTID_ALIAS_NAME = "ClientID_SPClientCodeRelationEntity_Alias";
		public static readonly Property PROPERTY_CLIENTID_ID = Property.ForName(PROPERTY_CLIENTID_ALIAS_NAME + ".Id");
		public static readonly Property PROPERTY_CLIENTID_NAME = Property.ForName(PROPERTY_CLIENTID_ALIAS_NAME + ".Name");
		public static readonly Property PROPERTY_CLIENTID_DESCRIPTION = Property.ForName(PROPERTY_CLIENTID_ALIAS_NAME + ".Description");
		public static readonly Property PROPERTY_CLIENTID_USERID = Property.ForName(PROPERTY_CLIENTID_ALIAS_NAME + ".UserID");
		public static readonly Property PROPERTY_CLIENTID_ISDEFAULTCLIENT = Property.ForName(PROPERTY_CLIENTID_ALIAS_NAME + ".IsDefaultClient");
		public static readonly Property PROPERTY_CLIENTID_SYNCDATA = Property.ForName(PROPERTY_CLIENTID_ALIAS_NAME + ".SyncData");
		public static readonly Property PROPERTY_CLIENTID_SYCNNOTINTERCEPTCOUNT = Property.ForName(PROPERTY_CLIENTID_ALIAS_NAME + ".SycnNotInterceptCount");
		public static readonly Property PROPERTY_CLIENTID_SYNCDATASETTING = Property.ForName(PROPERTY_CLIENTID_ALIAS_NAME + ".SyncDataSetting");
		public static readonly Property PROPERTY_CLIENTID_ALIAS = Property.ForName(PROPERTY_CLIENTID_ALIAS_NAME + ".Alias");
		public static readonly Property PROPERTY_CLIENTID_INTERCEPTRATE = Property.ForName(PROPERTY_CLIENTID_ALIAS_NAME + ".InterceptRate");
		public static readonly Property PROPERTY_CLIENTID_DEFAULTPRICE = Property.ForName(PROPERTY_CLIENTID_ALIAS_NAME + ".DefaultPrice");
		public static readonly Property PROPERTY_CLIENTID_DEFAULTSHOWRECORDDAYS = Property.ForName(PROPERTY_CLIENTID_ALIAS_NAME + ".DefaultShowRecordDays");
		public static readonly Property PROPERTY_CLIENTID_CREATEBY = Property.ForName(PROPERTY_CLIENTID_ALIAS_NAME + ".CreateBy");
		public static readonly Property PROPERTY_CLIENTID_CREATEAT = Property.ForName(PROPERTY_CLIENTID_ALIAS_NAME + ".CreateAt");
		public static readonly Property PROPERTY_CLIENTID_LASTMODIFYBY = Property.ForName(PROPERTY_CLIENTID_ALIAS_NAME + ".LastModifyBy");
		public static readonly Property PROPERTY_CLIENTID_LASTMODIFYAT = Property.ForName(PROPERTY_CLIENTID_ALIAS_NAME + ".LastModifyAt");
		public static readonly Property PROPERTY_CLIENTID_LASTMODIFYCOMMENT = Property.ForName(PROPERTY_CLIENTID_ALIAS_NAME + ".LastModifyComment");
		#endregion
		public static readonly Property PROPERTY_PRICE = Property.ForName(SPClientCodeRelationEntity.PROPERTY_NAME_PRICE);
		public static readonly Property PROPERTY_INTERCEPTRATE = Property.ForName(SPClientCodeRelationEntity.PROPERTY_NAME_INTERCEPTRATE);
		public static readonly Property PROPERTY_USECLIENTDEFAULTSYCNSETTING = Property.ForName(SPClientCodeRelationEntity.PROPERTY_NAME_USECLIENTDEFAULTSYCNSETTING);
		public static readonly Property PROPERTY_SYNCDATA = Property.ForName(SPClientCodeRelationEntity.PROPERTY_NAME_SYNCDATA);
		public static readonly Property PROPERTY_SYCNRETRYTIMES = Property.ForName(SPClientCodeRelationEntity.PROPERTY_NAME_SYCNRETRYTIMES);
		public static readonly Property PROPERTY_SYNCDATASETTING = Property.ForName(SPClientCodeRelationEntity.PROPERTY_NAME_SYNCDATASETTING);
		#region syncDataSetting字段外键查询字段
        public static NHibernateDynamicQueryGenerator<SPClientCodeRelationEntity> InClude_SyncDataSetting_Query(NHibernateDynamicQueryGenerator<SPClientCodeRelationEntity> queryGenerator)
        {
            return queryGenerator.AddAlians(SPClientCodeRelationEntity.PROPERTY_NAME_SYNCDATASETTING, PROPERTY_SYNCDATASETTING_ALIAS_NAME);
        }
        public static readonly string PROPERTY_SYNCDATASETTING_ALIAS_NAME = "SyncDataSetting_SPClientCodeRelationEntity_Alias";
		public static readonly Property PROPERTY_SYNCDATASETTING_ID = Property.ForName(PROPERTY_SYNCDATASETTING_ALIAS_NAME + ".Id");
		public static readonly Property PROPERTY_SYNCDATASETTING_SYCNRETRYTIMES = Property.ForName(PROPERTY_SYNCDATASETTING_ALIAS_NAME + ".SycnRetryTimes");
		public static readonly Property PROPERTY_SYNCDATASETTING_SYNCTYPE = Property.ForName(PROPERTY_SYNCDATASETTING_ALIAS_NAME + ".SyncType");
		public static readonly Property PROPERTY_SYNCDATASETTING_SYCNMO = Property.ForName(PROPERTY_SYNCDATASETTING_ALIAS_NAME + ".SycnMO");
		public static readonly Property PROPERTY_SYNCDATASETTING_SYCNMOURL = Property.ForName(PROPERTY_SYNCDATASETTING_ALIAS_NAME + ".SycnMOUrl");
		public static readonly Property PROPERTY_SYNCDATASETTING_SYCNMOOKMESSAGE = Property.ForName(PROPERTY_SYNCDATASETTING_ALIAS_NAME + ".SycnMOOkMessage");
		public static readonly Property PROPERTY_SYNCDATASETTING_SYCNMOFAILEDMESSAGE = Property.ForName(PROPERTY_SYNCDATASETTING_ALIAS_NAME + ".SycnMOFailedMessage");
		public static readonly Property PROPERTY_SYNCDATASETTING_SYCNMR = Property.ForName(PROPERTY_SYNCDATASETTING_ALIAS_NAME + ".SycnMR");
		public static readonly Property PROPERTY_SYNCDATASETTING_SYCNMRURL = Property.ForName(PROPERTY_SYNCDATASETTING_ALIAS_NAME + ".SycnMRUrl");
		public static readonly Property PROPERTY_SYNCDATASETTING_SYCNMROKMESSAGE = Property.ForName(PROPERTY_SYNCDATASETTING_ALIAS_NAME + ".SycnMROkMessage");
		public static readonly Property PROPERTY_SYNCDATASETTING_SYCNMRFAILEDMESSAGE = Property.ForName(PROPERTY_SYNCDATASETTING_ALIAS_NAME + ".SycnMRFailedMessage");
		public static readonly Property PROPERTY_SYNCDATASETTING_SYCNSATE = Property.ForName(PROPERTY_SYNCDATASETTING_ALIAS_NAME + ".SycnSate");
		public static readonly Property PROPERTY_SYNCDATASETTING_SYCNSATEURL = Property.ForName(PROPERTY_SYNCDATASETTING_ALIAS_NAME + ".SycnSateUrl");
		public static readonly Property PROPERTY_SYNCDATASETTING_SYCNSATEOKMESSAGE = Property.ForName(PROPERTY_SYNCDATASETTING_ALIAS_NAME + ".SycnSateOkMessage");
		public static readonly Property PROPERTY_SYNCDATASETTING_SYCNSATEFAILEDMESSAGE = Property.ForName(PROPERTY_SYNCDATASETTING_ALIAS_NAME + ".SycnSateFailedMessage");
		#endregion
		public static readonly Property PROPERTY_STARTDATE = Property.ForName(SPClientCodeRelationEntity.PROPERTY_NAME_STARTDATE);
		public static readonly Property PROPERTY_ENDDATE = Property.ForName(SPClientCodeRelationEntity.PROPERTY_NAME_ENDDATE);
		public static readonly Property PROPERTY_ISENABLE = Property.ForName(SPClientCodeRelationEntity.PROPERTY_NAME_ISENABLE);
		public static readonly Property PROPERTY_SYCNNOTINTERCEPTCOUNT = Property.ForName(SPClientCodeRelationEntity.PROPERTY_NAME_SYCNNOTINTERCEPTCOUNT);
		public static readonly Property PROPERTY_DEFAULTSHOWRECORDDAYS = Property.ForName(SPClientCodeRelationEntity.PROPERTY_NAME_DEFAULTSHOWRECORDDAYS);
		public static readonly Property PROPERTY_CREATEBY = Property.ForName(SPClientCodeRelationEntity.PROPERTY_NAME_CREATEBY);
		public static readonly Property PROPERTY_CREATEAT = Property.ForName(SPClientCodeRelationEntity.PROPERTY_NAME_CREATEAT);
		public static readonly Property PROPERTY_LASTMODIFYBY = Property.ForName(SPClientCodeRelationEntity.PROPERTY_NAME_LASTMODIFYBY);
		public static readonly Property PROPERTY_LASTMODIFYAT = Property.ForName(SPClientCodeRelationEntity.PROPERTY_NAME_LASTMODIFYAT);
		public static readonly Property PROPERTY_LASTMODIFYCOMMENT = Property.ForName(SPClientCodeRelationEntity.PROPERTY_NAME_LASTMODIFYCOMMENT);
      
		#region 子类集合字段查询字段
	
		#endregion

		#endregion

		
		public override string[] PkPropertyName
        {
            get { return new string[] { "Id" }; }
        }
		
		public override Type GetFieldTypeByFieldName(string fieldName)
        {
			switch (fieldName)
            {
                case "Id":
                    return typeof (int);
                case "CodeID":
                    return typeof (int);
                case "ClientID":
                    return typeof (int);
                case "Price":
                    return typeof (decimal);
                case "InterceptRate":
                    return typeof (decimal);
                case "UseClientDefaultSycnSetting":
                    return typeof (bool);
                case "SyncData":
                    return typeof (bool);
                case "SycnRetryTimes":
                    return typeof (string);
                case "SyncDataSetting":
                    return typeof (int);
                case "StartDate":
                    return typeof (DateTime);
                case "EndDate":
                    return typeof (DateTime);
                case "IsEnable":
                    return typeof (bool);
                case "SycnNotInterceptCount":
                    return typeof (int);
                case "DefaultShowRecordDays":
                    return typeof (int);
                case "CreateBy":
                    return typeof (int);
                case "CreateAt":
                    return typeof (DateTime);
                case "LastModifyBy":
                    return typeof (int);
                case "LastModifyAt":
                    return typeof (DateTime);
                case "LastModifyComment":
                    return typeof (string);
          }
			return typeof(string);
        }
		
				public List<SPClientCodeRelationEntity> GetList_By_SPCodeEntity(SPCodeEntity fkentity)
		{
			NHibernateDynamicQueryGenerator<SPClientCodeRelationEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_CODEID.Eq(fkentity));

            return this.FindListByQueryBuilder(dynamicQueryGenerator);
		}
		
		
        public List<SPClientCodeRelationEntity> GetPageList_By_SPCodeEntity(string orderByColumnName, bool isDesc, int pageIndex, int pageSize, SPCodeEntity fkentity, out int recordCount)
        {
            NHibernateDynamicQueryGenerator<SPClientCodeRelationEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_CODEID.Eq(fkentity));

            AddDefaultOrderByToQueryGenerator(orderByColumnName, isDesc, dynamicQueryGenerator);

            dynamicQueryGenerator.SetFirstResult((pageIndex - 1) * pageSize);

            dynamicQueryGenerator.SetMaxResults(pageSize);

            return FindListByPageByQueryBuilder(dynamicQueryGenerator, out recordCount);
        }		
		
		public List<SPClientCodeRelationEntity> GetList_By_SPSClientEntity(SPSClientEntity fkentity)
		{
			NHibernateDynamicQueryGenerator<SPClientCodeRelationEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_CLIENTID.Eq(fkentity));

            return this.FindListByQueryBuilder(dynamicQueryGenerator);
		}
		
		
        public List<SPClientCodeRelationEntity> GetPageList_By_SPSClientEntity(string orderByColumnName, bool isDesc, int pageIndex, int pageSize, SPSClientEntity fkentity, out int recordCount)
        {
            NHibernateDynamicQueryGenerator<SPClientCodeRelationEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_CLIENTID.Eq(fkentity));

            AddDefaultOrderByToQueryGenerator(orderByColumnName, isDesc, dynamicQueryGenerator);

            dynamicQueryGenerator.SetFirstResult((pageIndex - 1) * pageSize);

            dynamicQueryGenerator.SetMaxResults(pageSize);

            return FindListByPageByQueryBuilder(dynamicQueryGenerator, out recordCount);
        }		
		
		public List<SPClientCodeRelationEntity> GetList_By_SPSDataSycnSettingEntity(SPSDataSycnSettingEntity fkentity)
		{
			NHibernateDynamicQueryGenerator<SPClientCodeRelationEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_SYNCDATASETTING.Eq(fkentity));

            return this.FindListByQueryBuilder(dynamicQueryGenerator);
		}
		
		
        public List<SPClientCodeRelationEntity> GetPageList_By_SPSDataSycnSettingEntity(string orderByColumnName, bool isDesc, int pageIndex, int pageSize, SPSDataSycnSettingEntity fkentity, out int recordCount)
        {
            NHibernateDynamicQueryGenerator<SPClientCodeRelationEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_SYNCDATASETTING.Eq(fkentity));

            AddDefaultOrderByToQueryGenerator(orderByColumnName, isDesc, dynamicQueryGenerator);

            dynamicQueryGenerator.SetFirstResult((pageIndex - 1) * pageSize);

            dynamicQueryGenerator.SetMaxResults(pageSize);

            return FindListByPageByQueryBuilder(dynamicQueryGenerator, out recordCount);
        }		
		

		
		
		
    }
}
