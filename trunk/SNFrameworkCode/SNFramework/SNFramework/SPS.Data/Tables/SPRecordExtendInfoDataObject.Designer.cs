// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using NHibernate.Criterion;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery.Propertys;
using SPS.Entity.Tables;
using Legendigital.Framework.Common.Data.NHibernate;


namespace SPS.Data.Tables
{
    public partial class SPRecordExtendInfoDataObject : BaseNHibernateDataObject<SPRecordExtendInfoEntity>
    {
				#region Expression Query Property (标准查询字段)
		public static readonly Property PROPERTY_ID = Property.ForName(SPRecordExtendInfoEntity.PROPERTY_NAME_ID);
		public static readonly Property PROPERTY_RECORDID = Property.ForName(SPRecordExtendInfoEntity.PROPERTY_NAME_RECORDID);
		#region recordID字段外键查询字段
        public static NHibernateDynamicQueryGenerator<SPRecordExtendInfoEntity> InClude_RecordID_Query(NHibernateDynamicQueryGenerator<SPRecordExtendInfoEntity> queryGenerator)
        {
            return queryGenerator.AddAlians(SPRecordExtendInfoEntity.PROPERTY_NAME_RECORDID, PROPERTY_RECORDID_ALIAS_NAME);
        }
        public static readonly string PROPERTY_RECORDID_ALIAS_NAME = "RecordID_SPRecordExtendInfoEntity_Alias";
		public static readonly Property PROPERTY_RECORDID_ID = Property.ForName(PROPERTY_RECORDID_ALIAS_NAME + ".Id");
		public static readonly Property PROPERTY_RECORDID_LINKID = Property.ForName(PROPERTY_RECORDID_ALIAS_NAME + ".LinkID");
		public static readonly Property PROPERTY_RECORDID_MO = Property.ForName(PROPERTY_RECORDID_ALIAS_NAME + ".Mo");
		public static readonly Property PROPERTY_RECORDID_MOBILE = Property.ForName(PROPERTY_RECORDID_ALIAS_NAME + ".Mobile");
		public static readonly Property PROPERTY_RECORDID_SPNUMBER = Property.ForName(PROPERTY_RECORDID_ALIAS_NAME + ".SpNumber");
		public static readonly Property PROPERTY_RECORDID_PROVINCE = Property.ForName(PROPERTY_RECORDID_ALIAS_NAME + ".Province");
		public static readonly Property PROPERTY_RECORDID_CITY = Property.ForName(PROPERTY_RECORDID_ALIAS_NAME + ".City");
		public static readonly Property PROPERTY_RECORDID_OPERATORTYPE = Property.ForName(PROPERTY_RECORDID_ALIAS_NAME + ".OperatorType");
		public static readonly Property PROPERTY_RECORDID_CREATEDATE = Property.ForName(PROPERTY_RECORDID_ALIAS_NAME + ".CreateDate");
		public static readonly Property PROPERTY_RECORDID_ISREPORT = Property.ForName(PROPERTY_RECORDID_ALIAS_NAME + ".IsReport");
		public static readonly Property PROPERTY_RECORDID_ISINTERCEPT = Property.ForName(PROPERTY_RECORDID_ALIAS_NAME + ".IsIntercept");
		public static readonly Property PROPERTY_RECORDID_ISSYCNTOCLIENT = Property.ForName(PROPERTY_RECORDID_ALIAS_NAME + ".IsSycnToClient");
		public static readonly Property PROPERTY_RECORDID_ISSYCNSUCCESSED = Property.ForName(PROPERTY_RECORDID_ALIAS_NAME + ".IsSycnSuccessed");
		public static readonly Property PROPERTY_RECORDID_ISSTATOK = Property.ForName(PROPERTY_RECORDID_ALIAS_NAME + ".IsStatOK");
		public static readonly Property PROPERTY_RECORDID_SYCNRETRYTIMES = Property.ForName(PROPERTY_RECORDID_ALIAS_NAME + ".SycnRetryTimes");
		public static readonly Property PROPERTY_RECORDID_CHANNELID = Property.ForName(PROPERTY_RECORDID_ALIAS_NAME + ".ChannelID");
		public static readonly Property PROPERTY_RECORDID_CLIENTID = Property.ForName(PROPERTY_RECORDID_ALIAS_NAME + ".ClientID");
		public static readonly Property PROPERTY_RECORDID_CODEID = Property.ForName(PROPERTY_RECORDID_ALIAS_NAME + ".CodeID");
		public static readonly Property PROPERTY_RECORDID_CLIENTCODERELATIONID = Property.ForName(PROPERTY_RECORDID_ALIAS_NAME + ".ClientCodeRelationID");
		public static readonly Property PROPERTY_RECORDID_PRICE = Property.ForName(PROPERTY_RECORDID_ALIAS_NAME + ".Price");
		public static readonly Property PROPERTY_RECORDID_COUNT = Property.ForName(PROPERTY_RECORDID_ALIAS_NAME + ".Count");
		#endregion
		public static readonly Property PROPERTY_IP = Property.ForName(SPRecordExtendInfoEntity.PROPERTY_NAME_IP);
		public static readonly Property PROPERTY_SSYCNDATAURL = Property.ForName(SPRecordExtendInfoEntity.PROPERTY_NAME_SSYCNDATAURL);
		public static readonly Property PROPERTY_SSYCNDATAFAILEDMESSAGE = Property.ForName(SPRecordExtendInfoEntity.PROPERTY_NAME_SSYCNDATAFAILEDMESSAGE);
		public static readonly Property PROPERTY_SSYCNMRDATAURL = Property.ForName(SPRecordExtendInfoEntity.PROPERTY_NAME_SSYCNMRDATAURL);
		public static readonly Property PROPERTY_SSYCNMRFAILEDMESSAGE = Property.ForName(SPRecordExtendInfoEntity.PROPERTY_NAME_SSYCNMRFAILEDMESSAGE);
		public static readonly Property PROPERTY_SSYCNSTATUSDATAURL = Property.ForName(SPRecordExtendInfoEntity.PROPERTY_NAME_SSYCNSTATUSDATAURL);
		public static readonly Property PROPERTY_SSYCNSTATUSFAILEDMESSAGE = Property.ForName(SPRecordExtendInfoEntity.PROPERTY_NAME_SSYCNSTATUSFAILEDMESSAGE);
		public static readonly Property PROPERTY_REQUESTCONTENT = Property.ForName(SPRecordExtendInfoEntity.PROPERTY_NAME_REQUESTCONTENT);
		public static readonly Property PROPERTY_EXTENDFIELD1 = Property.ForName(SPRecordExtendInfoEntity.PROPERTY_NAME_EXTENDFIELD1);
		public static readonly Property PROPERTY_EXTENDFIELD2 = Property.ForName(SPRecordExtendInfoEntity.PROPERTY_NAME_EXTENDFIELD2);
		public static readonly Property PROPERTY_EXTENDFIELD3 = Property.ForName(SPRecordExtendInfoEntity.PROPERTY_NAME_EXTENDFIELD3);
		public static readonly Property PROPERTY_EXTENDFIELD4 = Property.ForName(SPRecordExtendInfoEntity.PROPERTY_NAME_EXTENDFIELD4);
		public static readonly Property PROPERTY_EXTENDFIELD5 = Property.ForName(SPRecordExtendInfoEntity.PROPERTY_NAME_EXTENDFIELD5);
		public static readonly Property PROPERTY_EXTENDFIELD6 = Property.ForName(SPRecordExtendInfoEntity.PROPERTY_NAME_EXTENDFIELD6);
		public static readonly Property PROPERTY_EXTENDFIELD8 = Property.ForName(SPRecordExtendInfoEntity.PROPERTY_NAME_EXTENDFIELD8);
		public static readonly Property PROPERTY_EXTENDFIELD7 = Property.ForName(SPRecordExtendInfoEntity.PROPERTY_NAME_EXTENDFIELD7);
		public static readonly Property PROPERTY_EXTENDFIELD9 = Property.ForName(SPRecordExtendInfoEntity.PROPERTY_NAME_EXTENDFIELD9);
		public static readonly Property PROPERTY_EXTENDFIELD10 = Property.ForName(SPRecordExtendInfoEntity.PROPERTY_NAME_EXTENDFIELD10);
		public static readonly Property PROPERTY_STATE = Property.ForName(SPRecordExtendInfoEntity.PROPERTY_NAME_STATE);
		public static readonly Property PROPERTY_FEETIME = Property.ForName(SPRecordExtendInfoEntity.PROPERTY_NAME_FEETIME);
		public static readonly Property PROPERTY_STARTTIME = Property.ForName(SPRecordExtendInfoEntity.PROPERTY_NAME_STARTTIME);
		public static readonly Property PROPERTY_ENDTIME = Property.ForName(SPRecordExtendInfoEntity.PROPERTY_NAME_ENDTIME);
		public static readonly Property PROPERTY_ISSYCNMO = Property.ForName(SPRecordExtendInfoEntity.PROPERTY_NAME_ISSYCNMO);
		public static readonly Property PROPERTY_ISSYCNMR = Property.ForName(SPRecordExtendInfoEntity.PROPERTY_NAME_ISSYCNMR);
		public static readonly Property PROPERTY_ISSYCNSTATE = Property.ForName(SPRecordExtendInfoEntity.PROPERTY_NAME_ISSYCNSTATE);
      
		#region 子类集合字段查询字段
	
		#endregion

		#endregion

		
		public override string[] PkPropertyName
        {
            get { return new string[] { "Id" }; }
        }
		
		public override Type GetFieldTypeByFieldName(string fieldName)
        {
			switch (fieldName)
            {
                case "Id":
                    return typeof (int);
                case "RecordID":
                    return typeof (int);
                case "Ip":
                    return typeof (string);
                case "SSycnDataUrl":
                    return typeof (string);
                case "SSycnDataFailedMessage":
                    return typeof (string);
                case "SSycnMRDataUrl":
                    return typeof (string);
                case "SSycnMRFailedMessage":
                    return typeof (string);
                case "SSycnStatusDataUrl":
                    return typeof (string);
                case "SSycnStatusFailedMessage":
                    return typeof (string);
                case "RequestContent":
                    return typeof (string);
                case "ExtendField1":
                    return typeof (string);
                case "ExtendField2":
                    return typeof (string);
                case "ExtendField3":
                    return typeof (string);
                case "ExtendField4":
                    return typeof (string);
                case "ExtendField5":
                    return typeof (string);
                case "ExtendField6":
                    return typeof (string);
                case "ExtendField8":
                    return typeof (string);
                case "ExtendField7":
                    return typeof (string);
                case "ExtendField9":
                    return typeof (string);
                case "ExtendField10":
                    return typeof (string);
                case "State":
                    return typeof (string);
                case "FeeTime":
                    return typeof (string);
                case "StartTime":
                    return typeof (string);
                case "EndTime":
                    return typeof (string);
                case "IsSycnMO":
                    return typeof (bool);
                case "IsSycnMR":
                    return typeof (bool);
                case "IsSycnState":
                    return typeof (bool);
          }
			return typeof(string);
        }
		
				public List<SPRecordExtendInfoEntity> GetList_By_SPRecordEntity(SPRecordEntity fkentity)
		{
			NHibernateDynamicQueryGenerator<SPRecordExtendInfoEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_RECORDID.Eq(fkentity));

            return this.FindListByQueryBuilder(dynamicQueryGenerator);
		}
		
		
        public List<SPRecordExtendInfoEntity> GetPageList_By_SPRecordEntity(string orderByColumnName, bool isDesc, int pageIndex, int pageSize, SPRecordEntity fkentity, out int recordCount)
        {
            NHibernateDynamicQueryGenerator<SPRecordExtendInfoEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_RECORDID.Eq(fkentity));

            AddDefaultOrderByToQueryGenerator(orderByColumnName, isDesc, dynamicQueryGenerator);

            dynamicQueryGenerator.SetFirstResult((pageIndex - 1) * pageSize);

            dynamicQueryGenerator.SetMaxResults(pageSize);

            return FindListByPageByQueryBuilder(dynamicQueryGenerator, out recordCount);
        }		
		

		
		
		
    }
}
