// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Data;
using System.Text;

using Spring.Data.Common;

namespace SPS.Data.AdoNet
{
    public enum DayReportType
    {
        AllUp,
        AllUpSuccess,
        Intercept,
        Down,
        DownSycnSuccess,
        DownNotSycn,
        DownSycnFailed
    }


    public partial class AdoNetDataObject
    {

        #region Common

        private T GetScalarFromDataSet<T>(DataTable dt, int columnIndex)
        {
            DataRow dr = GetFristDataRowFromDataTable(dt);

            if (dr != null && dr.Table.Columns.Count >= columnIndex + 1)
                return (T)dr[columnIndex];
            return default(T);
        }

        private T GetScalarFromDataSet<T>(DataSet ds, int columnIndex)
        {
            return GetScalarFromDataSet<T>(GetDataTableFromDataSet(ds), columnIndex);
        }

        private DataRow GetFristDataRowFromDataSet(DataSet ds)
        {
            return GetFristDataRowFromDataTable(GetDataTableFromDataSet(ds));
        }

        private DataRow GetFristDataRowFromDataTable(DataTable dt)
        {
            if (dt != null && dt.Rows.Count > 0)
                return dt.Rows[0];
            return null;
        }

        private DataTable GetDataTableFromDataSet(DataSet ds)
        {
            if (ds != null && ds.Tables.Count > 0)
                return ds.Tables[0];
            return null;
        }

        #endregion



        public void UpdateUrlFailedSend(int recordId, string url,string errMessage)
        {
            if(errMessage.Length>50)
            {
                errMessage = errMessage.Substring(0, 50);
            }


            string sql = "update SPRecordExtendInfo set sSycnDataUrl=@sSycnDataUrl,sSycnDataFailedMessage=@Error where RecordID=@RecordID ;";

            DbParameters dbParameters = this.CreateNewDbParameters();

            dbParameters.AddWithValue("sSycnDataUrl", url);

            dbParameters.AddWithValue("RecordID", recordId);

            dbParameters.AddWithValue("Error", errMessage);

            this.ExecuteNoQuery(sql, CommandType.Text, dbParameters);

        }


        public void UpdateUrlSuccessSend(int recordId, string url)
        {

            string sql = "update SPRecord set IsSycnSuccessed =1  where ID=@ID and IsIntercept=0 and IsSycnToClient=1 and IsStatOK=1;" +
                         "update SPRecordExtendInfo set  sSycnDataUrl=@sSycnDataUrl,sSycnDataFailedMessage='' where RecordID=@RecordID ;";

            DbParameters dbParameters = this.CreateNewDbParameters();

            dbParameters.AddWithValue("sSycnDataUrl", url);

            dbParameters.AddWithValue("RecordID", recordId);

            this.ExecuteNoQuery(sql, CommandType.Text, dbParameters);
 
        }

        public DataTable CaculateReport(DateTime reportDate,DayReportType dayReportType)
        {
            string sql = "Select [ChannelID],[ClientID],[CodeID],Sum([Count]) as RecordCount from SPRecord with(nolock) where CreateDate >= @startDate and  CreateDate <  @endDate";

            switch (dayReportType)
            {
                case DayReportType.AllUp:
                    sql += " AND IsReport =0";
                    break;
                case DayReportType.AllUpSuccess:
                    sql += " AND IsReport =0 AND IsStatOK = 1 ";
                    break;
                case DayReportType.Intercept:
                    sql += " AND IsReport =0 AND  IsStatOK = 1 AND IsIntercept = 1 ";
                    break;
                case DayReportType.Down:
                    sql += " AND IsReport =0 AND  IsStatOK = 1 AND IsIntercept = 0 ";
                    break;
                case DayReportType.DownSycnSuccess:
                    sql += " AND IsReport =0 AND  IsStatOK = 1 AND IsIntercept = 0 AND IsSycnSuccessed = 1 ";
                    break;
                case DayReportType.DownNotSycn:
                    sql += " AND IsReport =0 AND  IsStatOK = 1 AND IsIntercept = 0 AND IsSycnToClient = 0 ";
                    break;
                case DayReportType.DownSycnFailed:
                    sql += " AND IsReport =0 AND  IsStatOK = 1 AND IsIntercept = 0 AND IsSycnSuccessed = 0 AND IsSycnToClient=1 AND SycnRetryTimes >0  ";
                    break;
            }

            sql += " group by [ChannelID],[ClientID],[CodeID]";


            DbParameters dbParameters = this.CreateNewDbParameters();

            dbParameters.AddWithValue("startDate", reportDate.Date);

            dbParameters.AddWithValue("endDate", reportDate.Date.AddDays(1));

 
            return this.ExecuteDataSet(sql, CommandType.Text, dbParameters).Tables[0];
        }

        public void RestAllReportedData(DateTime date)
        {
            string sql = "update SPRecord set  IsReport = 0  where CreateDate >= @startDate and  CreateDate <  @endDate";

            DbParameters dbParameters = this.CreateNewDbParameters();

            dbParameters.AddWithValue("startDate", date.Date);

            dbParameters.AddWithValue("endDate", date.Date.AddDays(1));

            this.ExecuteNoQuery(sql, CommandType.Text, dbParameters);
        }

        public void ClearAllReportedData(DateTime date)
        {
            string sql = "update SPRecord set  IsReport = 1  where CreateDate >= @startDate and  CreateDate <  @endDate";

            DbParameters dbParameters = this.CreateNewDbParameters();

            dbParameters.AddWithValue("startDate", date.Date);

            dbParameters.AddWithValue("endDate", date.Date.AddDays(1));

            this.ExecuteNoQuery(sql, CommandType.Text, dbParameters);
        }
    }
}