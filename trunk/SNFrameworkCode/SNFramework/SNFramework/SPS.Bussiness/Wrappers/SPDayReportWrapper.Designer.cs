// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using Spring.Context.Support;
using Common.Logging;
using SPS.Entity.Tables;
using SPS.Bussiness.ServiceProxys.Tables.Container;
using SPS.Bussiness.ServiceProxys.Tables;

namespace SPS.Bussiness.Wrappers
{
    public partial class SPDayReportWrapper
    {
        #region Member

		internal static readonly ISPDayReportServiceProxy businessProxy = ((SPS.Bussiness.ServiceProxys.Tables.Container.ServiceProxyContainer)(ContextRegistry.GetContext().GetObject("ServiceProxyContainerIocID", typeof(SPS.Bussiness.ServiceProxys.Tables.Container.ServiceProxyContainer)))).SPDayReportServiceProxyInstance;
		//internal static readonly ISPDayReportServiceProxy businessProxy = ((ServiceProxyContainer)(ContextRegistry.GetContext().GetObject("ServiceProxyContainerIocID"))).SPDayReportServiceProxyInstance;

        internal SPDayReportEntity entity;
		
		private static ILog logger = null;

        public static ILog Logger
        {
            get
            {
                if (logger == null)
                    logger = LogManager.GetLogger(typeof(SPDayReportWrapper));
                return logger;
            }
        }

        #endregion

        #region Construtor
        public SPDayReportWrapper() : this(new SPDayReportEntity())
        {
            
        }

        internal SPDayReportWrapper(SPDayReportEntity entityObj)
        {
            entity = entityObj;
        }
		#endregion
		
		#region Equals 和 HashCode 方法覆盖
		public override bool Equals(object obj)
        {
            if (obj == null && entity!=null)
            {
                if (entity.Id == 0)
                    return true;

                return false;
            }
            return entity.Equals(obj);
        }

        public override int GetHashCode()
        {
            return entity.GetHashCode();
        }
		#endregion
		
        #region 公共常量

		public static readonly string CLASS_FULL_NAME = "SPS.Entity.Tables.SPDayReportEntity";
		public static readonly string PROPERTY_NAME_ID = "Id";
		public static readonly string PROPERTY_NAME_REPORTDATE = "ReportDate";
		public static readonly string PROPERTY_NAME_TOTALCOUNT = "TotalCount";
		public static readonly string PROPERTY_NAME_TOTALSUCCESSCOUNT = "TotalSuccessCount";
		public static readonly string PROPERTY_NAME_INTERCEPTCOUNT = "InterceptCount";
		public static readonly string PROPERTY_NAME_DOWNTOTALCOUNT = "DownTotalCount";
		public static readonly string PROPERTY_NAME_DOWNSYCNSUCCESS = "DownSycnSuccess";
		public static readonly string PROPERTY_NAME_DOWNSYCNFAILED = "DownSycnFailed";
		public static readonly string PROPERTY_NAME_DOWNNOTSYCN = "DownNotSycn";
		public static readonly string PROPERTY_NAME_CLIENTID = "ClientID";
		public static readonly string PROPERTY_NAME_CHANNELID = "ChannelID";
		public static readonly string PROPERTY_NAME_CODEID = "CodeID";
		public static readonly string PROPERTY_NAME_UPERID = "UperID";
		
        #endregion


		#region Public Property
		/// <summary>
		/// 
		/// </summary>		
		public int Id
		{
			get
			{
				return entity.Id;
			}
			set
			{
				entity.Id = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public DateTime ReportDate
		{
			get
			{
				return entity.ReportDate;
			}
			set
			{
				entity.ReportDate = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public int TotalCount
		{
			get
			{
				return entity.TotalCount;
			}
			set
			{
				entity.TotalCount = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public int TotalSuccessCount
		{
			get
			{
				return entity.TotalSuccessCount;
			}
			set
			{
				entity.TotalSuccessCount = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public int InterceptCount
		{
			get
			{
				return entity.InterceptCount;
			}
			set
			{
				entity.InterceptCount = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public int DownTotalCount
		{
			get
			{
				return entity.DownTotalCount;
			}
			set
			{
				entity.DownTotalCount = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public int DownSycnSuccess
		{
			get
			{
				return entity.DownSycnSuccess;
			}
			set
			{
				entity.DownSycnSuccess = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public int DownSycnFailed
		{
			get
			{
				return entity.DownSycnFailed;
			}
			set
			{
				entity.DownSycnFailed = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public int DownNotSycn
		{
			get
			{
				return entity.DownNotSycn;
			}
			set
			{
				entity.DownNotSycn = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public SPSClientWrapper ClientID
		{
			get
			{
				return SPSClientWrapper.ConvertEntityToWrapper(entity.ClientID) ;
			}
			set
			{
				entity.ClientID = ((value == null) ? null : value.entity);
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public SPChannelWrapper ChannelID
		{
			get
			{
				return SPChannelWrapper.ConvertEntityToWrapper(entity.ChannelID) ;
			}
			set
			{
				entity.ChannelID = ((value == null) ? null : value.entity);
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public SPCodeWrapper CodeID
		{
			get
			{
				return SPCodeWrapper.ConvertEntityToWrapper(entity.CodeID) ;
			}
			set
			{
				entity.CodeID = ((value == null) ? null : value.entity);
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public SPUpperWrapper UperID
		{
			get
			{
				return SPUpperWrapper.ConvertEntityToWrapper(entity.UperID) ;
			}
			set
			{
				entity.UperID = ((value == null) ? null : value.entity);
			}
		}
		#endregion 





        #region "FKQuery"
		
        public static List<SPDayReportWrapper> FindAllByOrderByAndFilterAndClientID(string orderByColumnName, bool isDesc,int pageIndex, int pageSize,    SPSClientWrapper clientID,  out int recordCount)
        {
            return ConvertToWrapperList(businessProxy.FindAllByOrderByAndFilterAndClientID(orderByColumnName, isDesc,pageIndex, pageSize,   clientID.entity,out recordCount));
        }

        public static List<SPDayReportWrapper> FindAllByClientID(SPSClientWrapper clientID)
        {
            return ConvertToWrapperList(businessProxy.FindAllByClientID(clientID.entity));
        }
		
		
        public static List<SPDayReportWrapper> FindAllByOrderByAndFilterAndChannelID(string orderByColumnName, bool isDesc,int pageIndex, int pageSize,    SPChannelWrapper channelID,  out int recordCount)
        {
            return ConvertToWrapperList(businessProxy.FindAllByOrderByAndFilterAndChannelID(orderByColumnName, isDesc,pageIndex, pageSize,   channelID.entity,out recordCount));
        }

        public static List<SPDayReportWrapper> FindAllByChannelID(SPChannelWrapper channelID)
        {
            return ConvertToWrapperList(businessProxy.FindAllByChannelID(channelID.entity));
        }
		
		
        public static List<SPDayReportWrapper> FindAllByOrderByAndFilterAndCodeID(string orderByColumnName, bool isDesc,int pageIndex, int pageSize,    SPCodeWrapper codeID,  out int recordCount)
        {
            return ConvertToWrapperList(businessProxy.FindAllByOrderByAndFilterAndCodeID(orderByColumnName, isDesc,pageIndex, pageSize,   codeID.entity,out recordCount));
        }

        public static List<SPDayReportWrapper> FindAllByCodeID(SPCodeWrapper codeID)
        {
            return ConvertToWrapperList(businessProxy.FindAllByCodeID(codeID.entity));
        }
		
		
        public static List<SPDayReportWrapper> FindAllByOrderByAndFilterAndUperID(string orderByColumnName, bool isDesc,int pageIndex, int pageSize,    SPUpperWrapper uperID,  out int recordCount)
        {
            return ConvertToWrapperList(businessProxy.FindAllByOrderByAndFilterAndUperID(orderByColumnName, isDesc,pageIndex, pageSize,   uperID.entity,out recordCount));
        }

        public static List<SPDayReportWrapper> FindAllByUperID(SPUpperWrapper uperID)
        {
            return ConvertToWrapperList(businessProxy.FindAllByUperID(uperID.entity));
        }
		



        #endregion

        #region Static Common Data Operation
		
		internal static List<SPDayReportWrapper> ConvertToWrapperList(List<SPDayReportEntity> entitylist)
        {
            List<SPDayReportWrapper> list = new List<SPDayReportWrapper>();
            foreach (SPDayReportEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }

		internal static List<SPDayReportWrapper> ConvertToWrapperList(IList<SPDayReportEntity> entitylist)
        {
            List<SPDayReportWrapper> list = new List<SPDayReportWrapper>();
            foreach (SPDayReportEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }
		
		internal static List<SPDayReportEntity> ConvertToEntityList(List<SPDayReportWrapper> wrapperlist)
        {
            List<SPDayReportEntity> list = new List<SPDayReportEntity>();
            foreach (SPDayReportWrapper wrapper in wrapperlist)
            {
                list.Add(wrapper.entity);
            }
            return list;
        }

        internal static SPDayReportWrapper ConvertEntityToWrapper(SPDayReportEntity entity)
        {
            if (entity == null)
                return null;
				
            if (entity.Id == 0)
                return null;

            return new SPDayReportWrapper(entity);
        }
		
		#endregion

    }//End Class
}// End Namespace

