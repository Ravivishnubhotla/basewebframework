// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using Spring.Context.Support;
using Common.Logging;
using Legendigital.Framework.Common.Bussiness.NHibernate;
using SPS.Entity.Tables;
using SPS.Bussiness.ServiceProxys.Tables.Container;
using SPS.Bussiness.ServiceProxys.Tables;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;

namespace SPS.Bussiness.Wrappers
{
    public partial class SPClientCodeRelationWrapper   
    {
        #region Member

		internal static readonly ISPClientCodeRelationServiceProxy businessProxy = ((SPS.Bussiness.ServiceProxys.Tables.Container.ServiceProxyContainer)(ContextRegistry.GetContext().GetObject("ServiceProxyContainerIocID", typeof(SPS.Bussiness.ServiceProxys.Tables.Container.ServiceProxyContainer)))).SPClientCodeRelationServiceProxyInstance;
		
		
		internal SPClientCodeRelationEntity Entity
        {
            get { return this.entity; }
        }
		
        #endregion

        #region Construtor
		public SPClientCodeRelationWrapper() : base(new SPClientCodeRelationEntity())
        {
            
        }

        internal SPClientCodeRelationWrapper(SPClientCodeRelationEntity entityObj)
            : base(entityObj)
        {
        }
		#endregion

        #region Process Column Name
        private static string ProcessColumnName(string columnName)
        {
            switch (columnName)
            {
		        case "CodeID_Id":
					return PROPERTY_CODEID_ID;
		        case "CodeID_Name":
					return PROPERTY_CODEID_NAME;
		        case "CodeID_Description":
					return PROPERTY_CODEID_DESCRIPTION;
		        case "CodeID_Code":
					return PROPERTY_CODEID_CODE;
		        case "CodeID_CodeType":
					return PROPERTY_CODEID_CODETYPE;
		        case "CodeID_ChannelID":
					return PROPERTY_CODEID_CHANNELID;
		        case "CodeID_Mo":
					return PROPERTY_CODEID_MO;
		        case "CodeID_MOType":
					return PROPERTY_CODEID_MOTYPE;
		        case "CodeID_MOLength":
					return PROPERTY_CODEID_MOLENGTH;
		        case "CodeID_OrderIndex":
					return PROPERTY_CODEID_ORDERINDEX;
		        case "CodeID_SPCode":
					return PROPERTY_CODEID_SPCODE;
		        case "CodeID_SPCodeType":
					return PROPERTY_CODEID_SPCODETYPE;
		        case "CodeID_SPCodeLength":
					return PROPERTY_CODEID_SPCODELENGTH;
		        case "CodeID_HasFilters":
					return PROPERTY_CODEID_HASFILTERS;
		        case "CodeID_HasParamsConvert":
					return PROPERTY_CODEID_HASPARAMSCONVERT;
		        case "CodeID_IsDiable":
					return PROPERTY_CODEID_ISDIABLE;
		        case "CodeID_Price":
					return PROPERTY_CODEID_PRICE;
		        case "CodeID_OperationType":
					return PROPERTY_CODEID_OPERATIONTYPE;
		        case "CodeID_HasDayTotalLimit":
					return PROPERTY_CODEID_HASDAYTOTALLIMIT;
		        case "CodeID_DayTotalLimitCount":
					return PROPERTY_CODEID_DAYTOTALLIMITCOUNT;
		        case "CodeID_HasPhoneLimit":
					return PROPERTY_CODEID_HASPHONELIMIT;
		        case "CodeID_PhoneLimitDayCount":
					return PROPERTY_CODEID_PHONELIMITDAYCOUNT;
		        case "CodeID_PhoneLimitMonthCount":
					return PROPERTY_CODEID_PHONELIMITMONTHCOUNT;
		        case "CodeID_PhoneLimitType":
					return PROPERTY_CODEID_PHONELIMITTYPE;
		        case "CodeID_LimitProvince":
					return PROPERTY_CODEID_LIMITPROVINCE;
		        case "CodeID_LimitProvinceArea":
					return PROPERTY_CODEID_LIMITPROVINCEAREA;
		        case "CodeID_ParentID":
					return PROPERTY_CODEID_PARENTID;
		        case "CodeID_CreateBy":
					return PROPERTY_CODEID_CREATEBY;
		        case "CodeID_CreateAt":
					return PROPERTY_CODEID_CREATEAT;
		        case "CodeID_LastModifyBy":
					return PROPERTY_CODEID_LASTMODIFYBY;
		        case "CodeID_LastModifyAt":
					return PROPERTY_CODEID_LASTMODIFYAT;
		        case "CodeID_LastModifyComment":
					return PROPERTY_CODEID_LASTMODIFYCOMMENT;
		        case "ClientID_Id":
					return PROPERTY_CLIENTID_ID;
		        case "ClientID_Name":
					return PROPERTY_CLIENTID_NAME;
		        case "ClientID_Description":
					return PROPERTY_CLIENTID_DESCRIPTION;
		        case "ClientID_UserID":
					return PROPERTY_CLIENTID_USERID;
		        case "ClientID_IsDefaultClient":
					return PROPERTY_CLIENTID_ISDEFAULTCLIENT;
		        case "ClientID_SyncData":
					return PROPERTY_CLIENTID_SYNCDATA;
		        case "ClientID_SycnRetryTimes":
					return PROPERTY_CLIENTID_SYCNRETRYTIMES;
		        case "ClientID_SyncType":
					return PROPERTY_CLIENTID_SYNCTYPE;
		        case "ClientID_SycnNotInterceptCount":
					return PROPERTY_CLIENTID_SYCNNOTINTERCEPTCOUNT;
		        case "ClientID_SycnDataUrl":
					return PROPERTY_CLIENTID_SYCNDATAURL;
		        case "ClientID_SycnOkMessage":
					return PROPERTY_CLIENTID_SYCNOKMESSAGE;
		        case "ClientID_SycnFailedMessage":
					return PROPERTY_CLIENTID_SYCNFAILEDMESSAGE;
		        case "ClientID_Alias":
					return PROPERTY_CLIENTID_ALIAS;
		        case "ClientID_InterceptRate":
					return PROPERTY_CLIENTID_INTERCEPTRATE;
		        case "ClientID_DefaultPrice":
					return PROPERTY_CLIENTID_DEFAULTPRICE;
		        case "ClientID_DefaultShowRecordDays":
					return PROPERTY_CLIENTID_DEFAULTSHOWRECORDDAYS;
		        case "ClientID_CreateBy":
					return PROPERTY_CLIENTID_CREATEBY;
		        case "ClientID_CreateAt":
					return PROPERTY_CLIENTID_CREATEAT;
		        case "ClientID_LastModifyBy":
					return PROPERTY_CLIENTID_LASTMODIFYBY;
		        case "ClientID_LastModifyAt":
					return PROPERTY_CLIENTID_LASTMODIFYAT;
		        case "ClientID_LastModifyComment":
					return PROPERTY_CLIENTID_LASTMODIFYCOMMENT;
              default:
                    return columnName;
            }
        }

        private static void ProcessQueryFilters(List<QueryFilter> filters)
        {
            foreach (QueryFilter queryFilter in filters)
            {
                queryFilter.FilterFieldName = ProcessColumnName(queryFilter.FilterFieldName);
            }
        }
		#endregion
		
      #region 公共常量

		public static readonly string CLASS_FULL_NAME = "SPS.Entity.Tables.SPClientCodeRelationEntity";
		public static readonly string PROPERTY_NAME_ID = "Id";
		public static readonly string PROPERTY_NAME_CODEID = "CodeID";
		public static readonly string PROPERTY_NAME_CLIENTID = "ClientID";
		public static readonly string PROPERTY_NAME_PRICE = "Price";
		public static readonly string PROPERTY_NAME_INTERCEPTRATE = "InterceptRate";
		public static readonly string PROPERTY_NAME_USECLIENTDEFAULTSYCNSETTING = "UseClientDefaultSycnSetting";
		public static readonly string PROPERTY_NAME_SYNCDATA = "SyncData";
		public static readonly string PROPERTY_NAME_SYCNRETRYTIMES = "SycnRetryTimes";
		public static readonly string PROPERTY_NAME_SYNCTYPE = "SyncType";
		public static readonly string PROPERTY_NAME_SYCNDATAURL = "SycnDataUrl";
		public static readonly string PROPERTY_NAME_SYCNOKMESSAGE = "SycnOkMessage";
		public static readonly string PROPERTY_NAME_SYCNFAILEDMESSAGE = "SycnFailedMessage";
		public static readonly string PROPERTY_NAME_STARTDATE = "StartDate";
		public static readonly string PROPERTY_NAME_ENDDATE = "EndDate";
		public static readonly string PROPERTY_NAME_ISENABLE = "IsEnable";
		public static readonly string PROPERTY_NAME_SYCNNOTINTERCEPTCOUNT = "SycnNotInterceptCount";
		public static readonly string PROPERTY_NAME_DEFAULTSHOWRECORDDAYS = "DefaultShowRecordDays";
		public static readonly string PROPERTY_NAME_CREATEBY = "CreateBy";
		public static readonly string PROPERTY_NAME_CREATEAT = "CreateAt";
		public static readonly string PROPERTY_NAME_LASTMODIFYBY = "LastModifyBy";
		public static readonly string PROPERTY_NAME_LASTMODIFYAT = "LastModifyAt";
		public static readonly string PROPERTY_NAME_LASTMODIFYCOMMENT = "LastModifyComment";
		
        #endregion
	
 
		#region codeID字段外键查询字段
        public const string PROPERTY_CODEID_ALIAS_NAME = "CodeID_SPClientCodeRelationEntity_Alias";
		public const string PROPERTY_CODEID_ID = "CodeID_SPClientCodeRelationEntity_Alias.Id";
		public const string PROPERTY_CODEID_NAME = "CodeID_SPClientCodeRelationEntity_Alias.Name";
		public const string PROPERTY_CODEID_DESCRIPTION = "CodeID_SPClientCodeRelationEntity_Alias.Description";
		public const string PROPERTY_CODEID_CODE = "CodeID_SPClientCodeRelationEntity_Alias.Code";
		public const string PROPERTY_CODEID_CODETYPE = "CodeID_SPClientCodeRelationEntity_Alias.CodeType";
		public const string PROPERTY_CODEID_CHANNELID = "CodeID_SPClientCodeRelationEntity_Alias.ChannelID";
		public const string PROPERTY_CODEID_MO = "CodeID_SPClientCodeRelationEntity_Alias.Mo";
		public const string PROPERTY_CODEID_MOTYPE = "CodeID_SPClientCodeRelationEntity_Alias.MOType";
		public const string PROPERTY_CODEID_MOLENGTH = "CodeID_SPClientCodeRelationEntity_Alias.MOLength";
		public const string PROPERTY_CODEID_ORDERINDEX = "CodeID_SPClientCodeRelationEntity_Alias.OrderIndex";
		public const string PROPERTY_CODEID_SPCODE = "CodeID_SPClientCodeRelationEntity_Alias.SPCode";
		public const string PROPERTY_CODEID_SPCODETYPE = "CodeID_SPClientCodeRelationEntity_Alias.SPCodeType";
		public const string PROPERTY_CODEID_SPCODELENGTH = "CodeID_SPClientCodeRelationEntity_Alias.SPCodeLength";
		public const string PROPERTY_CODEID_HASFILTERS = "CodeID_SPClientCodeRelationEntity_Alias.HasFilters";
		public const string PROPERTY_CODEID_HASPARAMSCONVERT = "CodeID_SPClientCodeRelationEntity_Alias.HasParamsConvert";
		public const string PROPERTY_CODEID_ISDIABLE = "CodeID_SPClientCodeRelationEntity_Alias.IsDiable";
		public const string PROPERTY_CODEID_PRICE = "CodeID_SPClientCodeRelationEntity_Alias.Price";
		public const string PROPERTY_CODEID_OPERATIONTYPE = "CodeID_SPClientCodeRelationEntity_Alias.OperationType";
		public const string PROPERTY_CODEID_HASDAYTOTALLIMIT = "CodeID_SPClientCodeRelationEntity_Alias.HasDayTotalLimit";
		public const string PROPERTY_CODEID_DAYTOTALLIMITCOUNT = "CodeID_SPClientCodeRelationEntity_Alias.DayTotalLimitCount";
		public const string PROPERTY_CODEID_HASPHONELIMIT = "CodeID_SPClientCodeRelationEntity_Alias.HasPhoneLimit";
		public const string PROPERTY_CODEID_PHONELIMITDAYCOUNT = "CodeID_SPClientCodeRelationEntity_Alias.PhoneLimitDayCount";
		public const string PROPERTY_CODEID_PHONELIMITMONTHCOUNT = "CodeID_SPClientCodeRelationEntity_Alias.PhoneLimitMonthCount";
		public const string PROPERTY_CODEID_PHONELIMITTYPE = "CodeID_SPClientCodeRelationEntity_Alias.PhoneLimitType";
		public const string PROPERTY_CODEID_LIMITPROVINCE = "CodeID_SPClientCodeRelationEntity_Alias.LimitProvince";
		public const string PROPERTY_CODEID_LIMITPROVINCEAREA = "CodeID_SPClientCodeRelationEntity_Alias.LimitProvinceArea";
		public const string PROPERTY_CODEID_PARENTID = "CodeID_SPClientCodeRelationEntity_Alias.ParentID";
		public const string PROPERTY_CODEID_CREATEBY = "CodeID_SPClientCodeRelationEntity_Alias.CreateBy";
		public const string PROPERTY_CODEID_CREATEAT = "CodeID_SPClientCodeRelationEntity_Alias.CreateAt";
		public const string PROPERTY_CODEID_LASTMODIFYBY = "CodeID_SPClientCodeRelationEntity_Alias.LastModifyBy";
		public const string PROPERTY_CODEID_LASTMODIFYAT = "CodeID_SPClientCodeRelationEntity_Alias.LastModifyAt";
		public const string PROPERTY_CODEID_LASTMODIFYCOMMENT = "CodeID_SPClientCodeRelationEntity_Alias.LastModifyComment";
		#endregion
		#region clientID字段外键查询字段
        public const string PROPERTY_CLIENTID_ALIAS_NAME = "ClientID_SPClientCodeRelationEntity_Alias";
		public const string PROPERTY_CLIENTID_ID = "ClientID_SPClientCodeRelationEntity_Alias.Id";
		public const string PROPERTY_CLIENTID_NAME = "ClientID_SPClientCodeRelationEntity_Alias.Name";
		public const string PROPERTY_CLIENTID_DESCRIPTION = "ClientID_SPClientCodeRelationEntity_Alias.Description";
		public const string PROPERTY_CLIENTID_USERID = "ClientID_SPClientCodeRelationEntity_Alias.UserID";
		public const string PROPERTY_CLIENTID_ISDEFAULTCLIENT = "ClientID_SPClientCodeRelationEntity_Alias.IsDefaultClient";
		public const string PROPERTY_CLIENTID_SYNCDATA = "ClientID_SPClientCodeRelationEntity_Alias.SyncData";
		public const string PROPERTY_CLIENTID_SYCNRETRYTIMES = "ClientID_SPClientCodeRelationEntity_Alias.SycnRetryTimes";
		public const string PROPERTY_CLIENTID_SYNCTYPE = "ClientID_SPClientCodeRelationEntity_Alias.SyncType";
		public const string PROPERTY_CLIENTID_SYCNNOTINTERCEPTCOUNT = "ClientID_SPClientCodeRelationEntity_Alias.SycnNotInterceptCount";
		public const string PROPERTY_CLIENTID_SYCNDATAURL = "ClientID_SPClientCodeRelationEntity_Alias.SycnDataUrl";
		public const string PROPERTY_CLIENTID_SYCNOKMESSAGE = "ClientID_SPClientCodeRelationEntity_Alias.SycnOkMessage";
		public const string PROPERTY_CLIENTID_SYCNFAILEDMESSAGE = "ClientID_SPClientCodeRelationEntity_Alias.SycnFailedMessage";
		public const string PROPERTY_CLIENTID_ALIAS = "ClientID_SPClientCodeRelationEntity_Alias.Alias";
		public const string PROPERTY_CLIENTID_INTERCEPTRATE = "ClientID_SPClientCodeRelationEntity_Alias.InterceptRate";
		public const string PROPERTY_CLIENTID_DEFAULTPRICE = "ClientID_SPClientCodeRelationEntity_Alias.DefaultPrice";
		public const string PROPERTY_CLIENTID_DEFAULTSHOWRECORDDAYS = "ClientID_SPClientCodeRelationEntity_Alias.DefaultShowRecordDays";
		public const string PROPERTY_CLIENTID_CREATEBY = "ClientID_SPClientCodeRelationEntity_Alias.CreateBy";
		public const string PROPERTY_CLIENTID_CREATEAT = "ClientID_SPClientCodeRelationEntity_Alias.CreateAt";
		public const string PROPERTY_CLIENTID_LASTMODIFYBY = "ClientID_SPClientCodeRelationEntity_Alias.LastModifyBy";
		public const string PROPERTY_CLIENTID_LASTMODIFYAT = "ClientID_SPClientCodeRelationEntity_Alias.LastModifyAt";
		public const string PROPERTY_CLIENTID_LASTMODIFYCOMMENT = "ClientID_SPClientCodeRelationEntity_Alias.LastModifyComment";
		#endregion
      	
	
	
		 
		
		
		
		


		#region Public Property
		/// <summary>
		/// 
		/// </summary>		
		public int Id
		{
			get
			{
				return entity.Id;
			}
			set
			{
				entity.Id = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public SPCodeWrapper CodeID
		{
			get
			{
				return SPCodeWrapper.ConvertEntityToWrapper(entity.CodeID) ;
			}
			set
			{
				entity.CodeID = ((value == null) ? null : value.Entity);
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public SPSClientWrapper ClientID
		{
			get
			{
				return SPSClientWrapper.ConvertEntityToWrapper(entity.ClientID) ;
			}
			set
			{
				entity.ClientID = ((value == null) ? null : value.Entity);
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public decimal Price
		{
			get
			{
				return entity.Price;
			}
			set
			{
				entity.Price = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public decimal InterceptRate
		{
			get
			{
				return entity.InterceptRate;
			}
			set
			{
				entity.InterceptRate = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public bool UseClientDefaultSycnSetting
		{
			get
			{
				return entity.UseClientDefaultSycnSetting;
			}
			set
			{
				entity.UseClientDefaultSycnSetting = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public bool SyncData
		{
			get
			{
				return entity.SyncData;
			}
			set
			{
				entity.SyncData = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string SycnRetryTimes
		{
			get
			{
				return entity.SycnRetryTimes;
			}
			set
			{
				entity.SycnRetryTimes = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string SyncType
		{
			get
			{
				return entity.SyncType;
			}
			set
			{
				entity.SyncType = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string SycnDataUrl
		{
			get
			{
				return entity.SycnDataUrl;
			}
			set
			{
				entity.SycnDataUrl = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string SycnOkMessage
		{
			get
			{
				return entity.SycnOkMessage;
			}
			set
			{
				entity.SycnOkMessage = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string SycnFailedMessage
		{
			get
			{
				return entity.SycnFailedMessage;
			}
			set
			{
				entity.SycnFailedMessage = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public DateTime? StartDate
		{
			get
			{
				return entity.StartDate;
			}
			set
			{
				entity.StartDate = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public DateTime? EndDate
		{
			get
			{
				return entity.EndDate;
			}
			set
			{
				entity.EndDate = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public bool IsEnable
		{
			get
			{
				return entity.IsEnable;
			}
			set
			{
				entity.IsEnable = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public int SycnNotInterceptCount
		{
			get
			{
				return entity.SycnNotInterceptCount;
			}
			set
			{
				entity.SycnNotInterceptCount = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public int DefaultShowRecordDays
		{
			get
			{
				return entity.DefaultShowRecordDays;
			}
			set
			{
				entity.DefaultShowRecordDays = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public int? CreateBy
		{
			get
			{
				return entity.CreateBy;
			}
			set
			{
				entity.CreateBy = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public DateTime? CreateAt
		{
			get
			{
				return entity.CreateAt;
			}
			set
			{
				entity.CreateAt = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public int? LastModifyBy
		{
			get
			{
				return entity.LastModifyBy;
			}
			set
			{
				entity.LastModifyBy = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public DateTime? LastModifyAt
		{
			get
			{
				return entity.LastModifyAt;
			}
			set
			{
				entity.LastModifyAt = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string LastModifyComment
		{
			get
			{
				return entity.LastModifyComment;
			}
			set
			{
				entity.LastModifyComment = value;
			}
		}
		#endregion 


		#region Query Property
		
		
		#region codeID字段外键查询字段
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_CODEID_ID)]
        public int? CodeID_Id
        {
            get
            {
                if (this. CodeID == null)
                    return null;
                return  CodeID.Id;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_CODEID_NAME)]
        public string CodeID_Name
        {
            get
            {
                if (this. CodeID == null)
                    return null;
                return  CodeID.Name;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_CODEID_DESCRIPTION)]
        public string CodeID_Description
        {
            get
            {
                if (this. CodeID == null)
                    return null;
                return  CodeID.Description;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_CODEID_CODE)]
        public string CodeID_Code
        {
            get
            {
                if (this. CodeID == null)
                    return null;
                return  CodeID.Code;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_CODEID_CODETYPE)]
        public string CodeID_CodeType
        {
            get
            {
                if (this. CodeID == null)
                    return null;
                return  CodeID.CodeType;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_CODEID_CHANNELID)]
        public SPChannelWrapper CodeID_ChannelID
        {
            get
            {
                if (this. CodeID == null)
                    return null;
                return  CodeID.ChannelID;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_CODEID_MO)]
        public string CodeID_Mo
        {
            get
            {
                if (this. CodeID == null)
                    return null;
                return  CodeID.Mo;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_CODEID_MOTYPE)]
        public string CodeID_MOType
        {
            get
            {
                if (this. CodeID == null)
                    return null;
                return  CodeID.MOType;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_CODEID_MOLENGTH)]
        public int? CodeID_MOLength
        {
            get
            {
                if (this. CodeID == null)
                    return null;
                return  CodeID.MOLength;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_CODEID_ORDERINDEX)]
        public int? CodeID_OrderIndex
        {
            get
            {
                if (this. CodeID == null)
                    return null;
                return  CodeID.OrderIndex;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_CODEID_SPCODE)]
        public string CodeID_SPCode
        {
            get
            {
                if (this. CodeID == null)
                    return null;
                return  CodeID.SPCode;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_CODEID_SPCODETYPE)]
        public string CodeID_SPCodeType
        {
            get
            {
                if (this. CodeID == null)
                    return null;
                return  CodeID.SPCodeType;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_CODEID_SPCODELENGTH)]
        public int? CodeID_SPCodeLength
        {
            get
            {
                if (this. CodeID == null)
                    return null;
                return  CodeID.SPCodeLength;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_CODEID_HASFILTERS)]
        public bool? CodeID_HasFilters
        {
            get
            {
                if (this. CodeID == null)
                    return null;
                return  CodeID.HasFilters;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_CODEID_HASPARAMSCONVERT)]
        public bool? CodeID_HasParamsConvert
        {
            get
            {
                if (this. CodeID == null)
                    return null;
                return  CodeID.HasParamsConvert;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_CODEID_ISDIABLE)]
        public bool? CodeID_IsDiable
        {
            get
            {
                if (this. CodeID == null)
                    return null;
                return  CodeID.IsDiable;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_CODEID_PRICE)]
        public decimal? CodeID_Price
        {
            get
            {
                if (this. CodeID == null)
                    return null;
                return  CodeID.Price;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_CODEID_OPERATIONTYPE)]
        public string CodeID_OperationType
        {
            get
            {
                if (this. CodeID == null)
                    return null;
                return  CodeID.OperationType;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_CODEID_HASDAYTOTALLIMIT)]
        public bool? CodeID_HasDayTotalLimit
        {
            get
            {
                if (this. CodeID == null)
                    return null;
                return  CodeID.HasDayTotalLimit;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_CODEID_DAYTOTALLIMITCOUNT)]
        public int? CodeID_DayTotalLimitCount
        {
            get
            {
                if (this. CodeID == null)
                    return null;
                return  CodeID.DayTotalLimitCount;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_CODEID_HASPHONELIMIT)]
        public bool? CodeID_HasPhoneLimit
        {
            get
            {
                if (this. CodeID == null)
                    return null;
                return  CodeID.HasPhoneLimit;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_CODEID_PHONELIMITDAYCOUNT)]
        public int? CodeID_PhoneLimitDayCount
        {
            get
            {
                if (this. CodeID == null)
                    return null;
                return  CodeID.PhoneLimitDayCount;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_CODEID_PHONELIMITMONTHCOUNT)]
        public int? CodeID_PhoneLimitMonthCount
        {
            get
            {
                if (this. CodeID == null)
                    return null;
                return  CodeID.PhoneLimitMonthCount;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_CODEID_PHONELIMITTYPE)]
        public int? CodeID_PhoneLimitType
        {
            get
            {
                if (this. CodeID == null)
                    return null;
                return  CodeID.PhoneLimitType;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_CODEID_LIMITPROVINCE)]
        public bool? CodeID_LimitProvince
        {
            get
            {
                if (this. CodeID == null)
                    return null;
                return  CodeID.LimitProvince;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_CODEID_LIMITPROVINCEAREA)]
        public string CodeID_LimitProvinceArea
        {
            get
            {
                if (this. CodeID == null)
                    return null;
                return  CodeID.LimitProvinceArea;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_CODEID_PARENTID)]
        public SPCodeWrapper CodeID_ParentID
        {
            get
            {
                if (this. CodeID == null)
                    return null;
                return  CodeID.ParentID;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_CODEID_CREATEBY)]
        public int? CodeID_CreateBy
        {
            get
            {
                if (this. CodeID == null)
                    return null;
                return  CodeID.CreateBy;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_CODEID_CREATEAT)]
        public DateTime? CodeID_CreateAt
        {
            get
            {
                if (this. CodeID == null)
                    return null;
                return  CodeID.CreateAt;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_CODEID_LASTMODIFYBY)]
        public int? CodeID_LastModifyBy
        {
            get
            {
                if (this. CodeID == null)
                    return null;
                return  CodeID.LastModifyBy;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_CODEID_LASTMODIFYAT)]
        public DateTime? CodeID_LastModifyAt
        {
            get
            {
                if (this. CodeID == null)
                    return null;
                return  CodeID.LastModifyAt;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_CODEID_LASTMODIFYCOMMENT)]
        public string CodeID_LastModifyComment
        {
            get
            {
                if (this. CodeID == null)
                    return null;
                return  CodeID.LastModifyComment;
            }
        }
		#endregion
		#region clientID字段外键查询字段
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_CLIENTID_ID)]
        public int? ClientID_Id
        {
            get
            {
                if (this. ClientID == null)
                    return null;
                return  ClientID.Id;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_CLIENTID_NAME)]
        public string ClientID_Name
        {
            get
            {
                if (this. ClientID == null)
                    return null;
                return  ClientID.Name;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_CLIENTID_DESCRIPTION)]
        public string ClientID_Description
        {
            get
            {
                if (this. ClientID == null)
                    return null;
                return  ClientID.Description;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_CLIENTID_USERID)]
        public int? ClientID_UserID
        {
            get
            {
                if (this. ClientID == null)
                    return null;
                return  ClientID.UserID;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_CLIENTID_ISDEFAULTCLIENT)]
        public bool? ClientID_IsDefaultClient
        {
            get
            {
                if (this. ClientID == null)
                    return null;
                return  ClientID.IsDefaultClient;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_CLIENTID_SYNCDATA)]
        public bool? ClientID_SyncData
        {
            get
            {
                if (this. ClientID == null)
                    return null;
                return  ClientID.SyncData;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_CLIENTID_SYCNRETRYTIMES)]
        public int? ClientID_SycnRetryTimes
        {
            get
            {
                if (this. ClientID == null)
                    return null;
                return  ClientID.SycnRetryTimes;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_CLIENTID_SYNCTYPE)]
        public string ClientID_SyncType
        {
            get
            {
                if (this. ClientID == null)
                    return null;
                return  ClientID.SyncType;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_CLIENTID_SYCNNOTINTERCEPTCOUNT)]
        public int? ClientID_SycnNotInterceptCount
        {
            get
            {
                if (this. ClientID == null)
                    return null;
                return  ClientID.SycnNotInterceptCount;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_CLIENTID_SYCNDATAURL)]
        public string ClientID_SycnDataUrl
        {
            get
            {
                if (this. ClientID == null)
                    return null;
                return  ClientID.SycnDataUrl;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_CLIENTID_SYCNOKMESSAGE)]
        public string ClientID_SycnOkMessage
        {
            get
            {
                if (this. ClientID == null)
                    return null;
                return  ClientID.SycnOkMessage;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_CLIENTID_SYCNFAILEDMESSAGE)]
        public string ClientID_SycnFailedMessage
        {
            get
            {
                if (this. ClientID == null)
                    return null;
                return  ClientID.SycnFailedMessage;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_CLIENTID_ALIAS)]
        public string ClientID_Alias
        {
            get
            {
                if (this. ClientID == null)
                    return null;
                return  ClientID.Alias;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_CLIENTID_INTERCEPTRATE)]
        public decimal? ClientID_InterceptRate
        {
            get
            {
                if (this. ClientID == null)
                    return null;
                return  ClientID.InterceptRate;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_CLIENTID_DEFAULTPRICE)]
        public decimal? ClientID_DefaultPrice
        {
            get
            {
                if (this. ClientID == null)
                    return null;
                return  ClientID.DefaultPrice;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_CLIENTID_DEFAULTSHOWRECORDDAYS)]
        public int? ClientID_DefaultShowRecordDays
        {
            get
            {
                if (this. ClientID == null)
                    return null;
                return  ClientID.DefaultShowRecordDays;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_CLIENTID_CREATEBY)]
        public int? ClientID_CreateBy
        {
            get
            {
                if (this. ClientID == null)
                    return null;
                return  ClientID.CreateBy;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_CLIENTID_CREATEAT)]
        public DateTime? ClientID_CreateAt
        {
            get
            {
                if (this. ClientID == null)
                    return null;
                return  ClientID.CreateAt;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_CLIENTID_LASTMODIFYBY)]
        public int? ClientID_LastModifyBy
        {
            get
            {
                if (this. ClientID == null)
                    return null;
                return  ClientID.LastModifyBy;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_CLIENTID_LASTMODIFYAT)]
        public DateTime? ClientID_LastModifyAt
        {
            get
            {
                if (this. ClientID == null)
                    return null;
                return  ClientID.LastModifyAt;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_CLIENTID_LASTMODIFYCOMMENT)]
        public string ClientID_LastModifyComment
        {
            get
            {
                if (this. ClientID == null)
                    return null;
                return  ClientID.LastModifyComment;
            }
        }
		#endregion
      	
   
		#endregion


        #region "FKQuery"
		
        public static List<SPClientCodeRelationWrapper> FindAllByOrderByAndFilterAndCodeID(string orderByColumnName, bool isDesc,   SPCodeWrapper codeID,  PageQueryParams pageQueryParams)
        {
            return ConvertToWrapperList(businessProxy.FindAllByOrderByAndFilterAndCodeID(orderByColumnName, isDesc,   codeID.Entity, pageQueryParams));
        }

        public static List<SPClientCodeRelationWrapper> FindAllByCodeID(SPCodeWrapper codeID)
        {
            return ConvertToWrapperList(businessProxy.FindAllByCodeID(codeID.Entity));
        }
		
		
        public static List<SPClientCodeRelationWrapper> FindAllByOrderByAndFilterAndClientID(string orderByColumnName, bool isDesc,   SPSClientWrapper clientID,  PageQueryParams pageQueryParams)
        {
            return ConvertToWrapperList(businessProxy.FindAllByOrderByAndFilterAndClientID(orderByColumnName, isDesc,   clientID.Entity, pageQueryParams));
        }

        public static List<SPClientCodeRelationWrapper> FindAllByClientID(SPSClientWrapper clientID)
        {
            return ConvertToWrapperList(businessProxy.FindAllByClientID(clientID.Entity));
        }
		



        #endregion








        #region Static Common Data Operation
		
		internal static List<SPClientCodeRelationWrapper> ConvertToWrapperList(List<SPClientCodeRelationEntity> entitylist)
        {
            List<SPClientCodeRelationWrapper> list = new List<SPClientCodeRelationWrapper>();
            foreach (SPClientCodeRelationEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }

		internal static List<SPClientCodeRelationWrapper> ConvertToWrapperList(IList<SPClientCodeRelationEntity> entitylist)
        {
            List<SPClientCodeRelationWrapper> list = new List<SPClientCodeRelationWrapper>();
            foreach (SPClientCodeRelationEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }
		
		internal static List<SPClientCodeRelationEntity> ConvertToEntityList(List<SPClientCodeRelationWrapper> wrapperlist)
        {
            List<SPClientCodeRelationEntity> list = new List<SPClientCodeRelationEntity>();
            foreach (SPClientCodeRelationWrapper wrapper in wrapperlist)
            {
                list.Add(wrapper.entity);
            }
            return list;
        }

        internal static SPClientCodeRelationWrapper ConvertEntityToWrapper(SPClientCodeRelationEntity entity)
        {
            if (entity == null)
                return null;
				
            if (entity.Id == 0)
                return null;

            return new SPClientCodeRelationWrapper(entity);
        }
		
		#endregion

    }//End Class
}// End Namespace

