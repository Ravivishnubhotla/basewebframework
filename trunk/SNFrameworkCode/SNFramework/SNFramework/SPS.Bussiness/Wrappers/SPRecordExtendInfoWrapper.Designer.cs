// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using Spring.Context.Support;
using Common.Logging;
using Legendigital.Framework.Common.Bussiness.NHibernate;
using SPS.Entity.Tables;
using SPS.Bussiness.ServiceProxys.Tables.Container;
using SPS.Bussiness.ServiceProxys.Tables;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;

namespace SPS.Bussiness.Wrappers
{
    public partial class SPRecordExtendInfoWrapper    //: BaseSpringNHibernateWrapper<SPRecordExtendInfoEntity, ISPRecordExtendInfoServiceProxy, SPRecordExtendInfoWrapper,int>
    {
        #region Member

		internal static readonly ISPRecordExtendInfoServiceProxy businessProxy = ((SPS.Bussiness.ServiceProxys.Tables.Container.ServiceProxyContainer)(ContextRegistry.GetContext().GetObject("ServiceProxyContainerIocID", typeof(SPS.Bussiness.ServiceProxys.Tables.Container.ServiceProxyContainer)))).SPRecordExtendInfoServiceProxyInstance;
		
		
		internal SPRecordExtendInfoEntity Entity
        {
            get { return this.entity; }
        }
		
        #endregion

        #region Construtor
		public SPRecordExtendInfoWrapper() : base(new SPRecordExtendInfoEntity())
        {
            
        }

        internal SPRecordExtendInfoWrapper(SPRecordExtendInfoEntity entityObj)
            : base(entityObj)
        {
        }
		#endregion

        #region Process Column Name
        private static string ProcessColumnName(string columnName)
        {
            switch (columnName)
            {
		        case "RecordID_Id":
					return PROPERTY_RECORDID_ID;
		        case "RecordID_LinkID":
					return PROPERTY_RECORDID_LINKID;
		        case "RecordID_Mo":
					return PROPERTY_RECORDID_MO;
		        case "RecordID_Mobile":
					return PROPERTY_RECORDID_MOBILE;
		        case "RecordID_SpNumber":
					return PROPERTY_RECORDID_SPNUMBER;
		        case "RecordID_Province":
					return PROPERTY_RECORDID_PROVINCE;
		        case "RecordID_City":
					return PROPERTY_RECORDID_CITY;
		        case "RecordID_OperatorType":
					return PROPERTY_RECORDID_OPERATORTYPE;
		        case "RecordID_CreateDate":
					return PROPERTY_RECORDID_CREATEDATE;
		        case "RecordID_IsReport":
					return PROPERTY_RECORDID_ISREPORT;
		        case "RecordID_IsIntercept":
					return PROPERTY_RECORDID_ISINTERCEPT;
		        case "RecordID_IsSycnToClient":
					return PROPERTY_RECORDID_ISSYCNTOCLIENT;
		        case "RecordID_IsSycnSuccessed":
					return PROPERTY_RECORDID_ISSYCNSUCCESSED;
		        case "RecordID_IsStatOK":
					return PROPERTY_RECORDID_ISSTATOK;
		        case "RecordID_SycnRetryTimes":
					return PROPERTY_RECORDID_SYCNRETRYTIMES;
		        case "RecordID_ChannelID":
					return PROPERTY_RECORDID_CHANNELID;
		        case "RecordID_ClientID":
					return PROPERTY_RECORDID_CLIENTID;
		        case "RecordID_CodeID":
					return PROPERTY_RECORDID_CODEID;
		        case "RecordID_ClientCodeRelationID":
					return PROPERTY_RECORDID_CLIENTCODERELATIONID;
		        case "RecordID_Price":
					return PROPERTY_RECORDID_PRICE;
		        case "RecordID_Count":
					return PROPERTY_RECORDID_COUNT;
              default:
                    return columnName;
            }
        }

        private static void ProcessQueryFilters(List<QueryFilter> filters)
        {
            foreach (QueryFilter queryFilter in filters)
            {
                queryFilter.FilterFieldName = ProcessColumnName(queryFilter.FilterFieldName);
            }
        }
		#endregion
		
      #region 公共常量

		public static readonly string CLASS_FULL_NAME = "SPS.Entity.Tables.SPRecordExtendInfoEntity";
		public static readonly string PROPERTY_NAME_ID = "Id";
		public static readonly string PROPERTY_NAME_RECORDID = "RecordID";
		public static readonly string PROPERTY_NAME_IP = "Ip";
		public static readonly string PROPERTY_NAME_SSYCNDATAURL = "SSycnDataUrl";
		public static readonly string PROPERTY_NAME_SSYCNDATAFAILEDMESSAGE = "SSycnDataFailedMessage";
		public static readonly string PROPERTY_NAME_SSYCNMRDATAURL = "SSycnMRDataUrl";
		public static readonly string PROPERTY_NAME_SSYCNMRFAILEDMESSAGE = "SSycnMRFailedMessage";
		public static readonly string PROPERTY_NAME_SSYCNSTATUSDATAURL = "SSycnStatusDataUrl";
		public static readonly string PROPERTY_NAME_SSYCNSTATUSFAILEDMESSAGE = "SSycnStatusFailedMessage";
		public static readonly string PROPERTY_NAME_REQUESTCONTENT = "RequestContent";
		public static readonly string PROPERTY_NAME_EXTENDFIELD1 = "ExtendField1";
		public static readonly string PROPERTY_NAME_EXTENDFIELD2 = "ExtendField2";
		public static readonly string PROPERTY_NAME_EXTENDFIELD3 = "ExtendField3";
		public static readonly string PROPERTY_NAME_EXTENDFIELD4 = "ExtendField4";
		public static readonly string PROPERTY_NAME_EXTENDFIELD5 = "ExtendField5";
		public static readonly string PROPERTY_NAME_EXTENDFIELD6 = "ExtendField6";
		public static readonly string PROPERTY_NAME_EXTENDFIELD8 = "ExtendField8";
		public static readonly string PROPERTY_NAME_EXTENDFIELD7 = "ExtendField7";
		public static readonly string PROPERTY_NAME_EXTENDFIELD9 = "ExtendField9";
		public static readonly string PROPERTY_NAME_EXTENDFIELD10 = "ExtendField10";
		public static readonly string PROPERTY_NAME_STATE = "State";
		public static readonly string PROPERTY_NAME_FEETIME = "FeeTime";
		public static readonly string PROPERTY_NAME_STARTTIME = "StartTime";
		public static readonly string PROPERTY_NAME_ENDTIME = "EndTime";
		public static readonly string PROPERTY_NAME_ISSYCNMO = "IsSycnMO";
		public static readonly string PROPERTY_NAME_ISSYCNMR = "IsSycnMR";
		public static readonly string PROPERTY_NAME_ISSYCNSTATE = "IsSycnState";
		
        #endregion
	
 
		#region recordID字段外键查询字段
        public const string PROPERTY_RECORDID_ALIAS_NAME = "RecordID_SPRecordExtendInfoEntity_Alias";
		public const string PROPERTY_RECORDID_ID = "RecordID_SPRecordExtendInfoEntity_Alias.Id";
		public const string PROPERTY_RECORDID_LINKID = "RecordID_SPRecordExtendInfoEntity_Alias.LinkID";
		public const string PROPERTY_RECORDID_MO = "RecordID_SPRecordExtendInfoEntity_Alias.Mo";
		public const string PROPERTY_RECORDID_MOBILE = "RecordID_SPRecordExtendInfoEntity_Alias.Mobile";
		public const string PROPERTY_RECORDID_SPNUMBER = "RecordID_SPRecordExtendInfoEntity_Alias.SpNumber";
		public const string PROPERTY_RECORDID_PROVINCE = "RecordID_SPRecordExtendInfoEntity_Alias.Province";
		public const string PROPERTY_RECORDID_CITY = "RecordID_SPRecordExtendInfoEntity_Alias.City";
		public const string PROPERTY_RECORDID_OPERATORTYPE = "RecordID_SPRecordExtendInfoEntity_Alias.OperatorType";
		public const string PROPERTY_RECORDID_CREATEDATE = "RecordID_SPRecordExtendInfoEntity_Alias.CreateDate";
		public const string PROPERTY_RECORDID_ISREPORT = "RecordID_SPRecordExtendInfoEntity_Alias.IsReport";
		public const string PROPERTY_RECORDID_ISINTERCEPT = "RecordID_SPRecordExtendInfoEntity_Alias.IsIntercept";
		public const string PROPERTY_RECORDID_ISSYCNTOCLIENT = "RecordID_SPRecordExtendInfoEntity_Alias.IsSycnToClient";
		public const string PROPERTY_RECORDID_ISSYCNSUCCESSED = "RecordID_SPRecordExtendInfoEntity_Alias.IsSycnSuccessed";
		public const string PROPERTY_RECORDID_ISSTATOK = "RecordID_SPRecordExtendInfoEntity_Alias.IsStatOK";
		public const string PROPERTY_RECORDID_SYCNRETRYTIMES = "RecordID_SPRecordExtendInfoEntity_Alias.SycnRetryTimes";
		public const string PROPERTY_RECORDID_CHANNELID = "RecordID_SPRecordExtendInfoEntity_Alias.ChannelID";
		public const string PROPERTY_RECORDID_CLIENTID = "RecordID_SPRecordExtendInfoEntity_Alias.ClientID";
		public const string PROPERTY_RECORDID_CODEID = "RecordID_SPRecordExtendInfoEntity_Alias.CodeID";
		public const string PROPERTY_RECORDID_CLIENTCODERELATIONID = "RecordID_SPRecordExtendInfoEntity_Alias.ClientCodeRelationID";
		public const string PROPERTY_RECORDID_PRICE = "RecordID_SPRecordExtendInfoEntity_Alias.Price";
		public const string PROPERTY_RECORDID_COUNT = "RecordID_SPRecordExtendInfoEntity_Alias.Count";
		#endregion
      	
	
	
		 
		
		
		
		


		#region Public Property
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public int Id
		{
			get
			{
				return entity.Id;
			}
			set
			{
				entity.Id = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public SPRecordWrapper RecordID
		{
			get
			{
				return SPRecordWrapper.ConvertEntityToWrapper(entity.RecordID) ;
			}
			set
			{
				entity.RecordID = ((value == null) ? null : value.Entity);
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string Ip
		{
			get
			{
				return entity.Ip;
			}
			set
			{
				entity.Ip = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string SSycnDataUrl
		{
			get
			{
				return entity.SSycnDataUrl;
			}
			set
			{
				entity.SSycnDataUrl = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string SSycnDataFailedMessage
		{
			get
			{
				return entity.SSycnDataFailedMessage;
			}
			set
			{
				entity.SSycnDataFailedMessage = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string SSycnMRDataUrl
		{
			get
			{
				return entity.SSycnMRDataUrl;
			}
			set
			{
				entity.SSycnMRDataUrl = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string SSycnMRFailedMessage
		{
			get
			{
				return entity.SSycnMRFailedMessage;
			}
			set
			{
				entity.SSycnMRFailedMessage = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string SSycnStatusDataUrl
		{
			get
			{
				return entity.SSycnStatusDataUrl;
			}
			set
			{
				entity.SSycnStatusDataUrl = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string SSycnStatusFailedMessage
		{
			get
			{
				return entity.SSycnStatusFailedMessage;
			}
			set
			{
				entity.SSycnStatusFailedMessage = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string RequestContent
		{
			get
			{
				return entity.RequestContent;
			}
			set
			{
				entity.RequestContent = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string ExtendField1
		{
			get
			{
				return entity.ExtendField1;
			}
			set
			{
				entity.ExtendField1 = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string ExtendField2
		{
			get
			{
				return entity.ExtendField2;
			}
			set
			{
				entity.ExtendField2 = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string ExtendField3
		{
			get
			{
				return entity.ExtendField3;
			}
			set
			{
				entity.ExtendField3 = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string ExtendField4
		{
			get
			{
				return entity.ExtendField4;
			}
			set
			{
				entity.ExtendField4 = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string ExtendField5
		{
			get
			{
				return entity.ExtendField5;
			}
			set
			{
				entity.ExtendField5 = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string ExtendField6
		{
			get
			{
				return entity.ExtendField6;
			}
			set
			{
				entity.ExtendField6 = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string ExtendField8
		{
			get
			{
				return entity.ExtendField8;
			}
			set
			{
				entity.ExtendField8 = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string ExtendField7
		{
			get
			{
				return entity.ExtendField7;
			}
			set
			{
				entity.ExtendField7 = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string ExtendField9
		{
			get
			{
				return entity.ExtendField9;
			}
			set
			{
				entity.ExtendField9 = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string ExtendField10
		{
			get
			{
				return entity.ExtendField10;
			}
			set
			{
				entity.ExtendField10 = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string State
		{
			get
			{
				return entity.State;
			}
			set
			{
				entity.State = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string FeeTime
		{
			get
			{
				return entity.FeeTime;
			}
			set
			{
				entity.FeeTime = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string StartTime
		{
			get
			{
				return entity.StartTime;
			}
			set
			{
				entity.StartTime = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string EndTime
		{
			get
			{
				return entity.EndTime;
			}
			set
			{
				entity.EndTime = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public bool IsSycnMO
		{
			get
			{
				return entity.IsSycnMO;
			}
			set
			{
				entity.IsSycnMO = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public bool IsSycnMR
		{
			get
			{
				return entity.IsSycnMR;
			}
			set
			{
				entity.IsSycnMR = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public bool IsSycnState
		{
			get
			{
				return entity.IsSycnState;
			}
			set
			{
				entity.IsSycnState = value;
			}
		}
		#endregion 


		#region Query Property
		
		
		#region recordID字段外键查询字段
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_RECORDID_ID)]
        public int? RecordID_Id
        {
            get
            {
                if (this. RecordID == null)
                    return null;
                return  RecordID.Id;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_RECORDID_LINKID)]
        public string RecordID_LinkID
        {
            get
            {
                if (this. RecordID == null)
                    return null;
                return  RecordID.LinkID;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_RECORDID_MO)]
        public string RecordID_Mo
        {
            get
            {
                if (this. RecordID == null)
                    return null;
                return  RecordID.Mo;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_RECORDID_MOBILE)]
        public string RecordID_Mobile
        {
            get
            {
                if (this. RecordID == null)
                    return null;
                return  RecordID.Mobile;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_RECORDID_SPNUMBER)]
        public string RecordID_SpNumber
        {
            get
            {
                if (this. RecordID == null)
                    return null;
                return  RecordID.SpNumber;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_RECORDID_PROVINCE)]
        public string RecordID_Province
        {
            get
            {
                if (this. RecordID == null)
                    return null;
                return  RecordID.Province;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_RECORDID_CITY)]
        public string RecordID_City
        {
            get
            {
                if (this. RecordID == null)
                    return null;
                return  RecordID.City;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_RECORDID_OPERATORTYPE)]
        public string RecordID_OperatorType
        {
            get
            {
                if (this. RecordID == null)
                    return null;
                return  RecordID.OperatorType;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_RECORDID_CREATEDATE)]
        public DateTime? RecordID_CreateDate
        {
            get
            {
                if (this. RecordID == null)
                    return null;
                return  RecordID.CreateDate;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_RECORDID_ISREPORT)]
        public bool? RecordID_IsReport
        {
            get
            {
                if (this. RecordID == null)
                    return null;
                return  RecordID.IsReport;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_RECORDID_ISINTERCEPT)]
        public bool? RecordID_IsIntercept
        {
            get
            {
                if (this. RecordID == null)
                    return null;
                return  RecordID.IsIntercept;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_RECORDID_ISSYCNTOCLIENT)]
        public bool? RecordID_IsSycnToClient
        {
            get
            {
                if (this. RecordID == null)
                    return null;
                return  RecordID.IsSycnToClient;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_RECORDID_ISSYCNSUCCESSED)]
        public bool? RecordID_IsSycnSuccessed
        {
            get
            {
                if (this. RecordID == null)
                    return null;
                return  RecordID.IsSycnSuccessed;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_RECORDID_ISSTATOK)]
        public bool? RecordID_IsStatOK
        {
            get
            {
                if (this. RecordID == null)
                    return null;
                return  RecordID.IsStatOK;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_RECORDID_SYCNRETRYTIMES)]
        public int? RecordID_SycnRetryTimes
        {
            get
            {
                if (this. RecordID == null)
                    return null;
                return  RecordID.SycnRetryTimes;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_RECORDID_CHANNELID)]
        public SPChannelWrapper RecordID_ChannelID
        {
            get
            {
                if (this. RecordID == null)
                    return null;
                return  RecordID.ChannelID;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_RECORDID_CLIENTID)]
        public SPSClientWrapper RecordID_ClientID
        {
            get
            {
                if (this. RecordID == null)
                    return null;
                return  RecordID.ClientID;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_RECORDID_CODEID)]
        public SPCodeWrapper RecordID_CodeID
        {
            get
            {
                if (this. RecordID == null)
                    return null;
                return  RecordID.CodeID;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_RECORDID_CLIENTCODERELATIONID)]
        public SPClientCodeRelationWrapper RecordID_ClientCodeRelationID
        {
            get
            {
                if (this. RecordID == null)
                    return null;
                return  RecordID.ClientCodeRelationID;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_RECORDID_PRICE)]
        public decimal? RecordID_Price
        {
            get
            {
                if (this. RecordID == null)
                    return null;
                return  RecordID.Price;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_RECORDID_COUNT)]
        public int? RecordID_Count
        {
            get
            {
                if (this. RecordID == null)
                    return null;
                return  RecordID.Count;
            }
        }
		#endregion
      	
   
		#endregion


        #region "FKQuery"
		
        public static List<SPRecordExtendInfoWrapper> FindAllByOrderByAndFilterAndRecordID(string orderByColumnName, bool isDesc,   SPRecordWrapper recordID,  PageQueryParams pageQueryParams)
        {
            return ConvertToWrapperList(businessProxy.FindAllByOrderByAndFilterAndRecordID(orderByColumnName, isDesc,   recordID.Entity, pageQueryParams));
        }

        public static List<SPRecordExtendInfoWrapper> FindAllByRecordID(SPRecordWrapper recordID)
        {
            return ConvertToWrapperList(businessProxy.FindAllByRecordID(recordID.Entity));
        }
		



        #endregion








        #region Static Common Data Operation
		
		internal static List<SPRecordExtendInfoWrapper> ConvertToWrapperList(List<SPRecordExtendInfoEntity> entitylist)
        {
            List<SPRecordExtendInfoWrapper> list = new List<SPRecordExtendInfoWrapper>();
            foreach (SPRecordExtendInfoEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }

		internal static List<SPRecordExtendInfoWrapper> ConvertToWrapperList(IList<SPRecordExtendInfoEntity> entitylist)
        {
            List<SPRecordExtendInfoWrapper> list = new List<SPRecordExtendInfoWrapper>();
            foreach (SPRecordExtendInfoEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }
		
		internal static List<SPRecordExtendInfoEntity> ConvertToEntityList(List<SPRecordExtendInfoWrapper> wrapperlist)
        {
            List<SPRecordExtendInfoEntity> list = new List<SPRecordExtendInfoEntity>();
            foreach (SPRecordExtendInfoWrapper wrapper in wrapperlist)
            {
                list.Add(wrapper.entity);
            }
            return list;
        }

        internal static SPRecordExtendInfoWrapper ConvertEntityToWrapper(SPRecordExtendInfoEntity entity)
        {
            if (entity == null)
                return null;
				
            if (entity.Id == 0)
                return null;

            return new SPRecordExtendInfoWrapper(entity);
        }
		
		#endregion

    }//End Class
}// End Namespace

