// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using Spring.Context.Support;
using Common.Logging;
using Legendigital.Framework.Common.Bussiness.NHibernate;
using SPS.Entity.Tables;
using SPS.Bussiness.ServiceProxys.Tables.Container;
using SPS.Bussiness.ServiceProxys.Tables;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;

namespace SPS.Bussiness.Wrappers
{
    public partial class SPSDataSycnSettingWrapper    : BaseSpringNHibernateWrapper<SPSDataSycnSettingEntity, ISPSDataSycnSettingServiceProxy, SPSDataSycnSettingWrapper,int>
    {
        #region Member

		internal static readonly ISPSDataSycnSettingServiceProxy businessProxy = ((SPS.Bussiness.ServiceProxys.Tables.Container.ServiceProxyContainer)(ContextRegistry.GetContext().GetObject("ServiceProxyContainerIocID", typeof(SPS.Bussiness.ServiceProxys.Tables.Container.ServiceProxyContainer)))).SPSDataSycnSettingServiceProxyInstance;
		
		
		internal SPSDataSycnSettingEntity Entity
        {
            get { return this.entity; }
        }
		
        #endregion

        #region Construtor
		public SPSDataSycnSettingWrapper() : base(new SPSDataSycnSettingEntity())
        {
            
        }

        internal SPSDataSycnSettingWrapper(SPSDataSycnSettingEntity entityObj)
            : base(entityObj)
        {
        }
		#endregion

        #region Process Column Name
        private static string ProcessColumnName(string columnName)
        {
            switch (columnName)
            {
              default:
                    return columnName;
            }
        }

        private static void ProcessQueryFilters(List<QueryFilter> filters)
        {
            foreach (QueryFilter queryFilter in filters)
            {
                queryFilter.FilterFieldName = ProcessColumnName(queryFilter.FilterFieldName);
            }
        }
		#endregion
		
      #region 公共常量

		public static readonly string CLASS_FULL_NAME = "SPS.Entity.Tables.SPSDataSycnSettingEntity";
		public static readonly string PROPERTY_NAME_ID = "Id";
		public static readonly string PROPERTY_NAME_SYCNRETRYTIMES = "SycnRetryTimes";
		public static readonly string PROPERTY_NAME_SYNCTYPE = "SyncType";
		public static readonly string PROPERTY_NAME_SYCNMO = "SycnMO";
		public static readonly string PROPERTY_NAME_SYCNMOURL = "SycnMOUrl";
		public static readonly string PROPERTY_NAME_SYCNMOOKMESSAGE = "SycnMOOkMessage";
		public static readonly string PROPERTY_NAME_SYCNMOFAILEDMESSAGE = "SycnMOFailedMessage";
		public static readonly string PROPERTY_NAME_SYCNMR = "SycnMR";
		public static readonly string PROPERTY_NAME_SYCNMRURL = "SycnMRUrl";
		public static readonly string PROPERTY_NAME_SYCNMROKMESSAGE = "SycnMROkMessage";
		public static readonly string PROPERTY_NAME_SYCNMRFAILEDMESSAGE = "SycnMRFailedMessage";
		public static readonly string PROPERTY_NAME_SYCNSATE = "SycnSate";
		public static readonly string PROPERTY_NAME_SYCNSATEURL = "SycnSateUrl";
		public static readonly string PROPERTY_NAME_SYCNSATEOKMESSAGE = "SycnSateOkMessage";
		public static readonly string PROPERTY_NAME_SYCNSATEFAILEDMESSAGE = "SycnSateFailedMessage";
		
        #endregion
	
 
      	
	
	
		 
		
		
		
		


		#region Public Property
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public int Id
		{
			get
			{
				return entity.Id;
			}
			set
			{
				entity.Id = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public int? SycnRetryTimes
		{
			get
			{
				return entity.SycnRetryTimes;
			}
			set
			{
				entity.SycnRetryTimes = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string SyncType
		{
			get
			{
				return entity.SyncType;
			}
			set
			{
				entity.SyncType = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public bool? SycnMO
		{
			get
			{
				return entity.SycnMO;
			}
			set
			{
				entity.SycnMO = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string SycnMOUrl
		{
			get
			{
				return entity.SycnMOUrl;
			}
			set
			{
				entity.SycnMOUrl = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string SycnMOOkMessage
		{
			get
			{
				return entity.SycnMOOkMessage;
			}
			set
			{
				entity.SycnMOOkMessage = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string SycnMOFailedMessage
		{
			get
			{
				return entity.SycnMOFailedMessage;
			}
			set
			{
				entity.SycnMOFailedMessage = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public bool? SycnMR
		{
			get
			{
				return entity.SycnMR;
			}
			set
			{
				entity.SycnMR = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string SycnMRUrl
		{
			get
			{
				return entity.SycnMRUrl;
			}
			set
			{
				entity.SycnMRUrl = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string SycnMROkMessage
		{
			get
			{
				return entity.SycnMROkMessage;
			}
			set
			{
				entity.SycnMROkMessage = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string SycnMRFailedMessage
		{
			get
			{
				return entity.SycnMRFailedMessage;
			}
			set
			{
				entity.SycnMRFailedMessage = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public bool? SycnSate
		{
			get
			{
				return entity.SycnSate;
			}
			set
			{
				entity.SycnSate = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string SycnSateUrl
		{
			get
			{
				return entity.SycnSateUrl;
			}
			set
			{
				entity.SycnSateUrl = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string SycnSateOkMessage
		{
			get
			{
				return entity.SycnSateOkMessage;
			}
			set
			{
				entity.SycnSateOkMessage = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string SycnSateFailedMessage
		{
			get
			{
				return entity.SycnSateFailedMessage;
			}
			set
			{
				entity.SycnSateFailedMessage = value;
			}
		}
		#endregion 


		#region Query Property
		
		
      	
   
		#endregion


        #region "FKQuery"



        #endregion








        #region Static Common Data Operation
		
		internal static List<SPSDataSycnSettingWrapper> ConvertToWrapperList(List<SPSDataSycnSettingEntity> entitylist)
        {
            List<SPSDataSycnSettingWrapper> list = new List<SPSDataSycnSettingWrapper>();
            foreach (SPSDataSycnSettingEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }

		internal static List<SPSDataSycnSettingWrapper> ConvertToWrapperList(IList<SPSDataSycnSettingEntity> entitylist)
        {
            List<SPSDataSycnSettingWrapper> list = new List<SPSDataSycnSettingWrapper>();
            foreach (SPSDataSycnSettingEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }
		
		internal static List<SPSDataSycnSettingEntity> ConvertToEntityList(List<SPSDataSycnSettingWrapper> wrapperlist)
        {
            List<SPSDataSycnSettingEntity> list = new List<SPSDataSycnSettingEntity>();
            foreach (SPSDataSycnSettingWrapper wrapper in wrapperlist)
            {
                list.Add(wrapper.entity);
            }
            return list;
        }

        internal static SPSDataSycnSettingWrapper ConvertEntityToWrapper(SPSDataSycnSettingEntity entity)
        {
            if (entity == null)
                return null;
				
            if (entity.Id == 0)
                return null;

            return new SPSDataSycnSettingWrapper(entity);
        }
		
		#endregion

    }//End Class
}// End Namespace

