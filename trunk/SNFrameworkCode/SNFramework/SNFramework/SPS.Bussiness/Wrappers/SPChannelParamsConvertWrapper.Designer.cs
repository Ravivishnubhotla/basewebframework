// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using Spring.Context.Support;
using Common.Logging;
using SPS.Entity.Tables;
using SPS.Bussiness.ServiceProxys.Tables.Container;
using SPS.Bussiness.ServiceProxys.Tables;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;

namespace SPS.Bussiness.Wrappers
{
    public partial class SPChannelParamsConvertWrapper
    {
        #region Member

		internal static readonly ISPChannelParamsConvertServiceProxy businessProxy = ((SPS.Bussiness.ServiceProxys.Tables.Container.ServiceProxyContainer)(ContextRegistry.GetContext().GetObject("ServiceProxyContainerIocID", typeof(SPS.Bussiness.ServiceProxys.Tables.Container.ServiceProxyContainer)))).SPChannelParamsConvertServiceProxyInstance;
	 
	 
        internal SPChannelParamsConvertEntity entity;
		
		private static ILog logger = null;

        public static ILog Logger
        {
            get
            {
                if (logger == null)
                    logger = LogManager.GetLogger(typeof(SPChannelParamsConvertWrapper));
                return logger;
            }
        }

        #endregion

        #region Construtor
        public SPChannelParamsConvertWrapper() : this(new SPChannelParamsConvertEntity())
        {
            
        }

        internal SPChannelParamsConvertWrapper(SPChannelParamsConvertEntity entityObj)
        {
            entity = entityObj;
        }
		#endregion
		
		#region Equals 和 HashCode 方法覆盖
		public override bool Equals(object obj)
        {
            if (obj == null && entity!=null)
            {
                if (entity.Id == 0)
                    return true;

                return false;
            }
            return entity.Equals(obj);
        }

        public override int GetHashCode()
        {
            return entity.GetHashCode();
        }
		#endregion
		
        #region 公共常量

		public static readonly string CLASS_FULL_NAME = "SPS.Entity.Tables.SPChannelParamsConvertEntity";
		public static readonly string PROPERTY_NAME_ID = "Id";
		public static readonly string PROPERTY_NAME_NAME = "Name";
		public static readonly string PROPERTY_NAME_PARAMSVALUE = "ParamsValue";
		public static readonly string PROPERTY_NAME_PARAMSCONVERTTO = "ParamsConvertTo";
		public static readonly string PROPERTY_NAME_PARAMSCONVERTTYPE = "ParamsConvertType";
		public static readonly string PROPERTY_NAME_PARAMSCONVERTCONDITION = "ParamsConvertCondition";
		public static readonly string PROPERTY_NAME_CHANNELID = "ChannelID";
		public static readonly string PROPERTY_NAME_CREATEBY = "CreateBy";
		public static readonly string PROPERTY_NAME_CREATEAT = "CreateAt";
		public static readonly string PROPERTY_NAME_LASTMODIFYBY = "LastModifyBy";
		public static readonly string PROPERTY_NAME_LASTMODIFYAT = "LastModifyAt";
		
        #endregion


		#region Public Property
		/// <summary>
		/// 
		/// </summary>		
		public int Id
		{
			get
			{
				return entity.Id;
			}
			set
			{
				entity.Id = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string Name
		{
			get
			{
				return entity.Name;
			}
			set
			{
				entity.Name = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string ParamsValue
		{
			get
			{
				return entity.ParamsValue;
			}
			set
			{
				entity.ParamsValue = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string ParamsConvertTo
		{
			get
			{
				return entity.ParamsConvertTo;
			}
			set
			{
				entity.ParamsConvertTo = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string ParamsConvertType
		{
			get
			{
				return entity.ParamsConvertType;
			}
			set
			{
				entity.ParamsConvertType = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string ParamsConvertCondition
		{
			get
			{
				return entity.ParamsConvertCondition;
			}
			set
			{
				entity.ParamsConvertCondition = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public SPChannelWrapper ChannelID
		{
			get
			{
				return SPChannelWrapper.ConvertEntityToWrapper(entity.ChannelID) ;
			}
			set
			{
				entity.ChannelID = ((value == null) ? null : value.entity);
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public int? CreateBy
		{
			get
			{
				return entity.CreateBy;
			}
			set
			{
				entity.CreateBy = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public DateTime? CreateAt
		{
			get
			{
				return entity.CreateAt;
			}
			set
			{
				entity.CreateAt = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public int? LastModifyBy
		{
			get
			{
				return entity.LastModifyBy;
			}
			set
			{
				entity.LastModifyBy = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public DateTime? LastModifyAt
		{
			get
			{
				return entity.LastModifyAt;
			}
			set
			{
				entity.LastModifyAt = value;
			}
		}
		#endregion 





        #region "FKQuery"
		
        public static List<SPChannelParamsConvertWrapper> FindAllByOrderByAndFilterAndChannelID(string orderByColumnName, bool isDesc,   SPChannelWrapper channelID,  PageQueryParams pageQueryParams)
        {
            return ConvertToWrapperList(businessProxy.FindAllByOrderByAndFilterAndChannelID(orderByColumnName, isDesc,   channelID.entity, pageQueryParams));
        }

        public static List<SPChannelParamsConvertWrapper> FindAllByChannelID(SPChannelWrapper channelID)
        {
            return ConvertToWrapperList(businessProxy.FindAllByChannelID(channelID.entity));
        }
		



        #endregion








        #region Static Common Data Operation
		
		internal static List<SPChannelParamsConvertWrapper> ConvertToWrapperList(List<SPChannelParamsConvertEntity> entitylist)
        {
            List<SPChannelParamsConvertWrapper> list = new List<SPChannelParamsConvertWrapper>();
            foreach (SPChannelParamsConvertEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }

		internal static List<SPChannelParamsConvertWrapper> ConvertToWrapperList(IList<SPChannelParamsConvertEntity> entitylist)
        {
            List<SPChannelParamsConvertWrapper> list = new List<SPChannelParamsConvertWrapper>();
            foreach (SPChannelParamsConvertEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }
		
		internal static List<SPChannelParamsConvertEntity> ConvertToEntityList(List<SPChannelParamsConvertWrapper> wrapperlist)
        {
            List<SPChannelParamsConvertEntity> list = new List<SPChannelParamsConvertEntity>();
            foreach (SPChannelParamsConvertWrapper wrapper in wrapperlist)
            {
                list.Add(wrapper.entity);
            }
            return list;
        }

        internal static SPChannelParamsConvertWrapper ConvertEntityToWrapper(SPChannelParamsConvertEntity entity)
        {
            if (entity == null)
                return null;
				
            if (entity.Id == 0)
                return null;

            return new SPChannelParamsConvertWrapper(entity);
        }
		
		#endregion

    }//End Class
}// End Namespace

