// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using Spring.Context.Support;
using Common.Logging;
using Legendigital.Framework.Common.Bussiness.NHibernate;
using SPS.Entity.Tables;
using SPS.Bussiness.ServiceProxys.Tables.Container;
using SPS.Bussiness.ServiceProxys.Tables;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;

namespace SPS.Bussiness.Wrappers
{
    public partial class SPPhoneAreaWrapper   
    {
        #region Member

		internal static readonly ISPPhoneAreaServiceProxy businessProxy = ((SPS.Bussiness.ServiceProxys.Tables.Container.ServiceProxyContainer)(ContextRegistry.GetContext().GetObject("ServiceProxyContainerIocID", typeof(SPS.Bussiness.ServiceProxys.Tables.Container.ServiceProxyContainer)))).SPPhoneAreaServiceProxyInstance;
		
		
		internal SPPhoneAreaEntity Entity
        {
            get { return this.entity; }
        }
		
        #endregion

        #region Construtor
		public SPPhoneAreaWrapper() : base(new SPPhoneAreaEntity())
        {
            
        }

        internal SPPhoneAreaWrapper(SPPhoneAreaEntity entityObj)
            : base(entityObj)
        {
        }
		#endregion

        #region Process Column Name
        private static string ProcessColumnName(string columnName)
        {
            switch (columnName)
            {
              default:
                    return columnName;
            }
        }

        private static void ProcessQueryFilters(List<QueryFilter> filters)
        {
            foreach (QueryFilter queryFilter in filters)
            {
                queryFilter.FilterFieldName = ProcessColumnName(queryFilter.FilterFieldName);
            }
        }
		#endregion
		
      #region 公共常量

		public static readonly string CLASS_FULL_NAME = "SPS.Entity.Tables.SPPhoneAreaEntity";
		public static readonly string PROPERTY_NAME_ID = "Id";
		public static readonly string PROPERTY_NAME_PROVINCE = "Province";
		public static readonly string PROPERTY_NAME_CITY = "City";
		public static readonly string PROPERTY_NAME_PHONEPREFIX = "PhonePrefix";
		public static readonly string PROPERTY_NAME_CODETYPE = "CodeType";
		
        #endregion
	
 
      	
	
	
		 
		
		
		
		


		#region Public Property
		/// <summary>
		/// 
		/// </summary>		
		public int Id
		{
			get
			{
				return entity.Id;
			}
			set
			{
				entity.Id = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string Province
		{
			get
			{
				return entity.Province;
			}
			set
			{
				entity.Province = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string City
		{
			get
			{
				return entity.City;
			}
			set
			{
				entity.City = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string PhonePrefix
		{
			get
			{
				return entity.PhonePrefix;
			}
			set
			{
				entity.PhonePrefix = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string CodeType
		{
			get
			{
				return entity.CodeType;
			}
			set
			{
				entity.CodeType = value;
			}
		}
		#endregion 


		#region Query Property
		
		
      	
   
		#endregion


        #region "FKQuery"



        #endregion








        #region Static Common Data Operation
		
		internal static List<SPPhoneAreaWrapper> ConvertToWrapperList(List<SPPhoneAreaEntity> entitylist)
        {
            List<SPPhoneAreaWrapper> list = new List<SPPhoneAreaWrapper>();
            foreach (SPPhoneAreaEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }

		internal static List<SPPhoneAreaWrapper> ConvertToWrapperList(IList<SPPhoneAreaEntity> entitylist)
        {
            List<SPPhoneAreaWrapper> list = new List<SPPhoneAreaWrapper>();
            foreach (SPPhoneAreaEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }
		
		internal static List<SPPhoneAreaEntity> ConvertToEntityList(List<SPPhoneAreaWrapper> wrapperlist)
        {
            List<SPPhoneAreaEntity> list = new List<SPPhoneAreaEntity>();
            foreach (SPPhoneAreaWrapper wrapper in wrapperlist)
            {
                list.Add(wrapper.entity);
            }
            return list;
        }

        internal static SPPhoneAreaWrapper ConvertEntityToWrapper(SPPhoneAreaEntity entity)
        {
            if (entity == null)
                return null;
				
            if (entity.Id == 0)
                return null;

            return new SPPhoneAreaWrapper(entity);
        }
		
		#endregion

    }//End Class
}// End Namespace

