// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using Spring.Context.Support;
using Common.Logging;
using Legendigital.Framework.Common.Bussiness.NHibernate;
using SPS.Entity.Tables;
using SPS.Bussiness.ServiceProxys.Tables.Container;
using SPS.Bussiness.ServiceProxys.Tables;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;

namespace SPS.Bussiness.Wrappers
{
    public partial class SPAdPackWrapper    //: BaseSpringNHibernateWrapper<SPAdPackEntity, ISPAdPackServiceProxy, SPAdPackWrapper,int>
    {
        #region Member

		internal static readonly ISPAdPackServiceProxy businessProxy = ((SPS.Bussiness.ServiceProxys.Tables.Container.ServiceProxyContainer)(ContextRegistry.GetContext().GetObject("ServiceProxyContainerIocID", typeof(SPS.Bussiness.ServiceProxys.Tables.Container.ServiceProxyContainer)))).SPAdPackServiceProxyInstance;
		
		
		internal SPAdPackEntity Entity
        {
            get { return this.entity; }
        }
		
        #endregion

        #region Construtor
		public SPAdPackWrapper() : base(new SPAdPackEntity())
        {
            
        }

        internal SPAdPackWrapper(SPAdPackEntity entityObj)
            : base(entityObj)
        {
        }
		#endregion

        #region Process Column Name
        private static string ProcessColumnName(string columnName)
        {
            switch (columnName)
            {
		        case "SPAdID_Id":
					return PROPERTY_SPADID_ID;
		        case "SPAdID_SPAdID":
					return PROPERTY_SPADID_SPADID;
		        case "SPAdID_SPAdPackID":
					return PROPERTY_SPADID_SPADPACKID;
		        case "SPAdID_SPClientID":
					return PROPERTY_SPADID_SPCLIENTID;
		        case "SPAdID_StartDate":
					return PROPERTY_SPADID_STARTDATE;
		        case "SPAdID_EndDate":
					return PROPERTY_SPADID_ENDDATE;
		        case "SPAdID_CreateBy":
					return PROPERTY_SPADID_CREATEBY;
		        case "SPAdID_CreateAt":
					return PROPERTY_SPADID_CREATEAT;
		        case "SPAdID_LastModifyBy":
					return PROPERTY_SPADID_LASTMODIFYBY;
		        case "SPAdID_LastModifyAt":
					return PROPERTY_SPADID_LASTMODIFYAT;
		        case "SPAdID_LastModifyComment":
					return PROPERTY_SPADID_LASTMODIFYCOMMENT;
              default:
                    return columnName;
            }
        }

        private static void ProcessQueryFilters(List<QueryFilter> filters)
        {
            foreach (QueryFilter queryFilter in filters)
            {
                queryFilter.FilterFieldName = ProcessColumnName(queryFilter.FilterFieldName);
            }
        }
		#endregion
		
      #region 公共常量

		public static readonly string CLASS_FULL_NAME = "SPS.Entity.Tables.SPAdPackEntity";
		public static readonly string PROPERTY_NAME_ID = "Id";
		public static readonly string PROPERTY_NAME_SPADID = "SPAdID";
		public static readonly string PROPERTY_NAME_NAME = "Name";
		public static readonly string PROPERTY_NAME_CODE = "Code";
		public static readonly string PROPERTY_NAME_DESCRIPTION = "Description";
		
        #endregion
	
 
		#region sPAdID字段外键查询字段
        public const string PROPERTY_SPADID_ALIAS_NAME = "SPAdID_SPAdPackEntity_Alias";
		public const string PROPERTY_SPADID_ID = "SPAdID_SPAdPackEntity_Alias.Id";
		public const string PROPERTY_SPADID_SPADID = "SPAdID_SPAdPackEntity_Alias.SPAdID";
		public const string PROPERTY_SPADID_SPADPACKID = "SPAdID_SPAdPackEntity_Alias.SPAdPackID";
		public const string PROPERTY_SPADID_SPCLIENTID = "SPAdID_SPAdPackEntity_Alias.SPClientID";
		public const string PROPERTY_SPADID_STARTDATE = "SPAdID_SPAdPackEntity_Alias.StartDate";
		public const string PROPERTY_SPADID_ENDDATE = "SPAdID_SPAdPackEntity_Alias.EndDate";
		public const string PROPERTY_SPADID_CREATEBY = "SPAdID_SPAdPackEntity_Alias.CreateBy";
		public const string PROPERTY_SPADID_CREATEAT = "SPAdID_SPAdPackEntity_Alias.CreateAt";
		public const string PROPERTY_SPADID_LASTMODIFYBY = "SPAdID_SPAdPackEntity_Alias.LastModifyBy";
		public const string PROPERTY_SPADID_LASTMODIFYAT = "SPAdID_SPAdPackEntity_Alias.LastModifyAt";
		public const string PROPERTY_SPADID_LASTMODIFYCOMMENT = "SPAdID_SPAdPackEntity_Alias.LastModifyComment";
		#endregion
      	
	
	
		 
		
		
		
		


		#region Public Property
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public int Id
		{
			get
			{
				return entity.Id;
			}
			set
			{
				entity.Id = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public SPAdAssignedHistortyWrapper SPAdID
		{
			get
			{
				return SPAdAssignedHistortyWrapper.ConvertEntityToWrapper(entity.SPAdID) ;
			}
			set
			{
				entity.SPAdID = ((value == null) ? null : value.Entity);
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string Name
		{
			get
			{
				return entity.Name;
			}
			set
			{
				entity.Name = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string Code
		{
			get
			{
				return entity.Code;
			}
			set
			{
				entity.Code = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string Description
		{
			get
			{
				return entity.Description;
			}
			set
			{
				entity.Description = value;
			}
		}
		#endregion 


		#region Query Property
		
		
		#region sPAdID字段外键查询字段
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_SPADID_ID)]
        public int? SPAdID_Id
        {
            get
            {
                if (this. SPAdID == null)
                    return null;
                return  SPAdID.Id;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_SPADID_SPADID)]
        public int? SPAdID_SPAdID
        {
            get
            {
                if (this. SPAdID == null)
                    return null;
                return  SPAdID.SPAdID;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_SPADID_SPADPACKID)]
        public int? SPAdID_SPAdPackID
        {
            get
            {
                if (this. SPAdID == null)
                    return null;
                return  SPAdID.SPAdPackID;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_SPADID_SPCLIENTID)]
        public SPSClientWrapper SPAdID_SPClientID
        {
            get
            {
                if (this. SPAdID == null)
                    return null;
                return  SPAdID.SPClientID;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_SPADID_STARTDATE)]
        public DateTime? SPAdID_StartDate
        {
            get
            {
                if (this. SPAdID == null)
                    return null;
                return  SPAdID.StartDate;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_SPADID_ENDDATE)]
        public DateTime? SPAdID_EndDate
        {
            get
            {
                if (this. SPAdID == null)
                    return null;
                return  SPAdID.EndDate;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_SPADID_CREATEBY)]
        public int? SPAdID_CreateBy
        {
            get
            {
                if (this. SPAdID == null)
                    return null;
                return  SPAdID.CreateBy;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_SPADID_CREATEAT)]
        public DateTime? SPAdID_CreateAt
        {
            get
            {
                if (this. SPAdID == null)
                    return null;
                return  SPAdID.CreateAt;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_SPADID_LASTMODIFYBY)]
        public int? SPAdID_LastModifyBy
        {
            get
            {
                if (this. SPAdID == null)
                    return null;
                return  SPAdID.LastModifyBy;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_SPADID_LASTMODIFYAT)]
        public DateTime? SPAdID_LastModifyAt
        {
            get
            {
                if (this. SPAdID == null)
                    return null;
                return  SPAdID.LastModifyAt;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_SPADID_LASTMODIFYCOMMENT)]
        public string SPAdID_LastModifyComment
        {
            get
            {
                if (this. SPAdID == null)
                    return null;
                return  SPAdID.LastModifyComment;
            }
        }
		#endregion
      	
   
		#endregion


        #region "FKQuery"
		
        public static List<SPAdPackWrapper> FindAllByOrderByAndFilterAndSPAdID(string orderByColumnName, bool isDesc,   SPAdAssignedHistortyWrapper sPAdID,  PageQueryParams pageQueryParams)
        {
            return ConvertToWrapperList(businessProxy.FindAllByOrderByAndFilterAndSPAdID(orderByColumnName, isDesc,   sPAdID.Entity, pageQueryParams));
        }

        public static List<SPAdPackWrapper> FindAllBySPAdID(SPAdAssignedHistortyWrapper sPAdID)
        {
            return ConvertToWrapperList(businessProxy.FindAllBySPAdID(sPAdID.Entity));
        }
		



        #endregion








        #region Static Common Data Operation
		
		internal static List<SPAdPackWrapper> ConvertToWrapperList(List<SPAdPackEntity> entitylist)
        {
            List<SPAdPackWrapper> list = new List<SPAdPackWrapper>();
            foreach (SPAdPackEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }

		internal static List<SPAdPackWrapper> ConvertToWrapperList(IList<SPAdPackEntity> entitylist)
        {
            List<SPAdPackWrapper> list = new List<SPAdPackWrapper>();
            foreach (SPAdPackEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }
		
		internal static List<SPAdPackEntity> ConvertToEntityList(List<SPAdPackWrapper> wrapperlist)
        {
            List<SPAdPackEntity> list = new List<SPAdPackEntity>();
            foreach (SPAdPackWrapper wrapper in wrapperlist)
            {
                list.Add(wrapper.entity);
            }
            return list;
        }

        internal static SPAdPackWrapper ConvertEntityToWrapper(SPAdPackEntity entity)
        {
            if (entity == null)
                return null;
				
            if (entity.Id == 0)
                return null;

            return new SPAdPackWrapper(entity);
        }
		
		#endregion

    }//End Class
}// End Namespace

