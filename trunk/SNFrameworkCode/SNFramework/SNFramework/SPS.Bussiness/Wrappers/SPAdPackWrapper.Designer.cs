// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using Spring.Context.Support;
using Common.Logging;
using Legendigital.Framework.Common.Bussiness.NHibernate;
using SPS.Entity.Tables;
using SPS.Bussiness.ServiceProxys.Tables.Container;
using SPS.Bussiness.ServiceProxys.Tables;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;

namespace SPS.Bussiness.Wrappers
{
    public partial class SPAdPackWrapper    //: BaseSpringNHibernateWrapper<SPAdPackEntity, ISPAdPackServiceProxy, SPAdPackWrapper,int>
    {
        #region Member

		internal static readonly ISPAdPackServiceProxy businessProxy = ((SPS.Bussiness.ServiceProxys.Tables.Container.ServiceProxyContainer)(ContextRegistry.GetContext().GetObject("ServiceProxyContainerIocID", typeof(SPS.Bussiness.ServiceProxys.Tables.Container.ServiceProxyContainer)))).SPAdPackServiceProxyInstance;
		
		
		internal SPAdPackEntity Entity
        {
            get { return this.entity; }
        }
		
        #endregion

        #region Construtor
		public SPAdPackWrapper() : base(new SPAdPackEntity())
        {
            
        }

        internal SPAdPackWrapper(SPAdPackEntity entityObj)
            : base(entityObj)
        {
        }
		#endregion

        #region Process Column Name
        private static string ProcessColumnName(string columnName)
        {
            switch (columnName)
            {
		        case "SPAdID_Id":
					return PROPERTY_SPADID_ID;
		        case "SPAdID_Name":
					return PROPERTY_SPADID_NAME;
		        case "SPAdID_Code":
					return PROPERTY_SPADID_CODE;
		        case "SPAdID_ImageUrl":
					return PROPERTY_SPADID_IMAGEURL;
		        case "SPAdID_AdPrice":
					return PROPERTY_SPADID_ADPRICE;
		        case "SPAdID_AccountType":
					return PROPERTY_SPADID_ACCOUNTTYPE;
		        case "SPAdID_ApplyStatus":
					return PROPERTY_SPADID_APPLYSTATUS;
		        case "SPAdID_AdType":
					return PROPERTY_SPADID_ADTYPE;
		        case "SPAdID_AdText":
					return PROPERTY_SPADID_ADTEXT;
		        case "SPAdID_Description":
					return PROPERTY_SPADID_DESCRIPTION;
		        case "SPAdID_IsDisable":
					return PROPERTY_SPADID_ISDISABLE;
		        case "SPAdID_AssignedClient":
					return PROPERTY_SPADID_ASSIGNEDCLIENT;
		        case "SPAdID_UpperID":
					return PROPERTY_SPADID_UPPERID;
		        case "SPAdID_CreateBy":
					return PROPERTY_SPADID_CREATEBY;
		        case "SPAdID_CreateAt":
					return PROPERTY_SPADID_CREATEAT;
		        case "SPAdID_LastModifyBy":
					return PROPERTY_SPADID_LASTMODIFYBY;
		        case "SPAdID_LastModifyAt":
					return PROPERTY_SPADID_LASTMODIFYAT;
		        case "SPAdID_LastModifyComment":
					return PROPERTY_SPADID_LASTMODIFYCOMMENT;
              default:
                    return columnName;
            }
        }

        private static void ProcessQueryFilters(List<QueryFilter> filters)
        {
            foreach (QueryFilter queryFilter in filters)
            {
                queryFilter.FilterFieldName = ProcessColumnName(queryFilter.FilterFieldName);
            }
        }
		#endregion
		
      #region 公共常量

		public static readonly string CLASS_FULL_NAME = "SPS.Entity.Tables.SPAdPackEntity";
		public static readonly string PROPERTY_NAME_ID = "Id";
		public static readonly string PROPERTY_NAME_SPADID = "SPAdID";
		public static readonly string PROPERTY_NAME_NAME = "Name";
		public static readonly string PROPERTY_NAME_CODE = "Code";
		public static readonly string PROPERTY_NAME_DESCRIPTION = "Description";
		
        #endregion
	
 
		#region sPAdID字段外键查询字段
        public const string PROPERTY_SPADID_ALIAS_NAME = "SPAdID_SPAdPackEntity_Alias";
		public const string PROPERTY_SPADID_ID = "SPAdID_SPAdPackEntity_Alias.Id";
		public const string PROPERTY_SPADID_NAME = "SPAdID_SPAdPackEntity_Alias.Name";
		public const string PROPERTY_SPADID_CODE = "SPAdID_SPAdPackEntity_Alias.Code";
		public const string PROPERTY_SPADID_IMAGEURL = "SPAdID_SPAdPackEntity_Alias.ImageUrl";
		public const string PROPERTY_SPADID_ADPRICE = "SPAdID_SPAdPackEntity_Alias.AdPrice";
		public const string PROPERTY_SPADID_ACCOUNTTYPE = "SPAdID_SPAdPackEntity_Alias.AccountType";
		public const string PROPERTY_SPADID_APPLYSTATUS = "SPAdID_SPAdPackEntity_Alias.ApplyStatus";
		public const string PROPERTY_SPADID_ADTYPE = "SPAdID_SPAdPackEntity_Alias.AdType";
		public const string PROPERTY_SPADID_ADTEXT = "SPAdID_SPAdPackEntity_Alias.AdText";
		public const string PROPERTY_SPADID_DESCRIPTION = "SPAdID_SPAdPackEntity_Alias.Description";
		public const string PROPERTY_SPADID_ISDISABLE = "SPAdID_SPAdPackEntity_Alias.IsDisable";
		public const string PROPERTY_SPADID_ASSIGNEDCLIENT = "SPAdID_SPAdPackEntity_Alias.AssignedClient";
		public const string PROPERTY_SPADID_UPPERID = "SPAdID_SPAdPackEntity_Alias.UpperID";
		public const string PROPERTY_SPADID_CREATEBY = "SPAdID_SPAdPackEntity_Alias.CreateBy";
		public const string PROPERTY_SPADID_CREATEAT = "SPAdID_SPAdPackEntity_Alias.CreateAt";
		public const string PROPERTY_SPADID_LASTMODIFYBY = "SPAdID_SPAdPackEntity_Alias.LastModifyBy";
		public const string PROPERTY_SPADID_LASTMODIFYAT = "SPAdID_SPAdPackEntity_Alias.LastModifyAt";
		public const string PROPERTY_SPADID_LASTMODIFYCOMMENT = "SPAdID_SPAdPackEntity_Alias.LastModifyComment";
		#endregion
      	
	
	
		 
		
		
		
		


		#region Public Property
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public int Id
		{
			get
			{
				return entity.Id;
			}
			set
			{
				entity.Id = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public SPAdvertisementWrapper SPAdID
		{
			get
			{
				return SPAdvertisementWrapper.ConvertEntityToWrapper(entity.SPAdID) ;
			}
			set
			{
				entity.SPAdID = ((value == null) ? null : value.Entity);
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string Name
		{
			get
			{
				return entity.Name;
			}
			set
			{
				entity.Name = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string Code
		{
			get
			{
				return entity.Code;
			}
			set
			{
				entity.Code = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string Description
		{
			get
			{
				return entity.Description;
			}
			set
			{
				entity.Description = value;
			}
		}
		#endregion 


		#region Query Property
		
		
		#region sPAdID字段外键查询字段
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_SPADID_ID)]
        public int? SPAdID_Id
        {
            get
            {
                if (this. SPAdID == null)
                    return null;
                return  SPAdID.Id;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_SPADID_NAME)]
        public string SPAdID_Name
        {
            get
            {
                if (this. SPAdID == null)
                    return null;
                return  SPAdID.Name;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_SPADID_CODE)]
        public string SPAdID_Code
        {
            get
            {
                if (this. SPAdID == null)
                    return null;
                return  SPAdID.Code;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_SPADID_IMAGEURL)]
        public string SPAdID_ImageUrl
        {
            get
            {
                if (this. SPAdID == null)
                    return null;
                return  SPAdID.ImageUrl;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_SPADID_ADPRICE)]
        public string SPAdID_AdPrice
        {
            get
            {
                if (this. SPAdID == null)
                    return null;
                return  SPAdID.AdPrice;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_SPADID_ACCOUNTTYPE)]
        public string SPAdID_AccountType
        {
            get
            {
                if (this. SPAdID == null)
                    return null;
                return  SPAdID.AccountType;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_SPADID_APPLYSTATUS)]
        public string SPAdID_ApplyStatus
        {
            get
            {
                if (this. SPAdID == null)
                    return null;
                return  SPAdID.ApplyStatus;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_SPADID_ADTYPE)]
        public string SPAdID_AdType
        {
            get
            {
                if (this. SPAdID == null)
                    return null;
                return  SPAdID.AdType;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_SPADID_ADTEXT)]
        public string SPAdID_AdText
        {
            get
            {
                if (this. SPAdID == null)
                    return null;
                return  SPAdID.AdText;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_SPADID_DESCRIPTION)]
        public string SPAdID_Description
        {
            get
            {
                if (this. SPAdID == null)
                    return null;
                return  SPAdID.Description;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_SPADID_ISDISABLE)]
        public bool? SPAdID_IsDisable
        {
            get
            {
                if (this. SPAdID == null)
                    return null;
                return  SPAdID.IsDisable;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_SPADID_ASSIGNEDCLIENT)]
        public int? SPAdID_AssignedClient
        {
            get
            {
                if (this. SPAdID == null)
                    return null;
                return  SPAdID.AssignedClient;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_SPADID_UPPERID)]
        public SPUpperWrapper SPAdID_UpperID
        {
            get
            {
                if (this. SPAdID == null)
                    return null;
                return  SPAdID.UpperID;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_SPADID_CREATEBY)]
        public int? SPAdID_CreateBy
        {
            get
            {
                if (this. SPAdID == null)
                    return null;
                return  SPAdID.CreateBy;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_SPADID_CREATEAT)]
        public DateTime? SPAdID_CreateAt
        {
            get
            {
                if (this. SPAdID == null)
                    return null;
                return  SPAdID.CreateAt;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_SPADID_LASTMODIFYBY)]
        public int? SPAdID_LastModifyBy
        {
            get
            {
                if (this. SPAdID == null)
                    return null;
                return  SPAdID.LastModifyBy;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_SPADID_LASTMODIFYAT)]
        public DateTime? SPAdID_LastModifyAt
        {
            get
            {
                if (this. SPAdID == null)
                    return null;
                return  SPAdID.LastModifyAt;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_SPADID_LASTMODIFYCOMMENT)]
        public string SPAdID_LastModifyComment
        {
            get
            {
                if (this. SPAdID == null)
                    return null;
                return  SPAdID.LastModifyComment;
            }
        }
		#endregion
      	
   
		#endregion


        #region "FKQuery"
		
        public static List<SPAdPackWrapper> FindAllByOrderByAndFilterAndSPAdID(string orderByColumnName, bool isDesc,   SPAdvertisementWrapper sPAdID,  PageQueryParams pageQueryParams)
        {
            return ConvertToWrapperList(businessProxy.FindAllByOrderByAndFilterAndSPAdID(orderByColumnName, isDesc,   sPAdID.Entity, pageQueryParams));
        }

        public static List<SPAdPackWrapper> FindAllBySPAdID(SPAdvertisementWrapper sPAdID)
        {
            return ConvertToWrapperList(businessProxy.FindAllBySPAdID(sPAdID.Entity));
        }
		



        #endregion








        #region Static Common Data Operation
		
		internal static List<SPAdPackWrapper> ConvertToWrapperList(List<SPAdPackEntity> entitylist)
        {
            List<SPAdPackWrapper> list = new List<SPAdPackWrapper>();
            foreach (SPAdPackEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }

		internal static List<SPAdPackWrapper> ConvertToWrapperList(IList<SPAdPackEntity> entitylist)
        {
            List<SPAdPackWrapper> list = new List<SPAdPackWrapper>();
            foreach (SPAdPackEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }
		
		internal static List<SPAdPackEntity> ConvertToEntityList(List<SPAdPackWrapper> wrapperlist)
        {
            List<SPAdPackEntity> list = new List<SPAdPackEntity>();
            foreach (SPAdPackWrapper wrapper in wrapperlist)
            {
                list.Add(wrapper.entity);
            }
            return list;
        }

        internal static SPAdPackWrapper ConvertEntityToWrapper(SPAdPackEntity entity)
        {
            if (entity == null)
                return null;
				
            if (entity.Id == 0)
                return null;

            return new SPAdPackWrapper(entity);
        }
		
		#endregion

    }//End Class
}// End Namespace

