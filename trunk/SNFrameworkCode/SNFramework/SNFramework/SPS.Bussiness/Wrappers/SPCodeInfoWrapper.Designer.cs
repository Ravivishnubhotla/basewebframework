// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using Spring.Context.Support;
using Common.Logging;
using SPS.Entity.Tables;
using SPS.Bussiness.ServiceProxys.Tables.Container;
using SPS.Bussiness.ServiceProxys.Tables;

namespace SPS.Bussiness.Wrappers
{
    public partial class SPCodeInfoWrapper
    {
        #region Member

		internal static readonly ISPCodeInfoServiceProxy businessProxy = ((SPS.Bussiness.ServiceProxys.Tables.Container.ServiceProxyContainer)(ContextRegistry.GetContext().GetObject("ServiceProxyContainerIocID", typeof(SPS.Bussiness.ServiceProxys.Tables.Container.ServiceProxyContainer)))).SPCodeInfoServiceProxyInstance;
		//internal static readonly ISPCodeInfoServiceProxy businessProxy = ((ServiceProxyContainer)(ContextRegistry.GetContext().GetObject("ServiceProxyContainerIocID"))).SPCodeInfoServiceProxyInstance;

        internal SPCodeInfoEntity entity;
		
		private static ILog logger = null;

        public static ILog Logger
        {
            get
            {
                if (logger == null)
                    logger = LogManager.GetLogger(typeof(SPCodeInfoWrapper));
                return logger;
            }
        }

        #endregion

        #region Construtor
        public SPCodeInfoWrapper() : this(new SPCodeInfoEntity())
        {
            
        }

        internal SPCodeInfoWrapper(SPCodeInfoEntity entityObj)
        {
            entity = entityObj;
        }
		#endregion
		
		#region Equals 和 HashCode 方法覆盖
		public override bool Equals(object obj)
        {
            if (obj == null && entity!=null)
            {
                if (entity.Id == 0)
                    return true;

                return false;
            }
            return entity.Equals(obj);
        }

        public override int GetHashCode()
        {
            return entity.GetHashCode();
        }
		#endregion
		
        #region 公共常量

		public static readonly string CLASS_FULL_NAME = "SPS.Entity.Tables.SPCodeInfoEntity";
		public static readonly string PROPERTY_NAME_ID = "Id";
		public static readonly string PROPERTY_NAME_SPCODEID = "SPCodeID";
		public static readonly string PROPERTY_NAME_PROVINCE = "Province";
		public static readonly string PROPERTY_NAME_DISABLECITY = "DisableCity";
		public static readonly string PROPERTY_NAME_DAYLIMIT = "DayLimit";
		public static readonly string PROPERTY_NAME_MONTHLIMIT = "MonthLimit";
		public static readonly string PROPERTY_NAME_SENDTEXT = "SendText";
		
        #endregion


		#region Public Property
		/// <summary>
		/// 
		/// </summary>		
		public int Id
		{
			get
			{
				return entity.Id;
			}
			set
			{
				entity.Id = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public SPCodeWrapper SPCodeID
		{
			get
			{
				return SPCodeWrapper.ConvertEntityToWrapper(entity.SPCodeID) ;
			}
			set
			{
				entity.SPCodeID = ((value == null) ? null : value.entity);
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string Province
		{
			get
			{
				return entity.Province;
			}
			set
			{
				entity.Province = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string DisableCity
		{
			get
			{
				return entity.DisableCity;
			}
			set
			{
				entity.DisableCity = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string DayLimit
		{
			get
			{
				return entity.DayLimit;
			}
			set
			{
				entity.DayLimit = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string MonthLimit
		{
			get
			{
				return entity.MonthLimit;
			}
			set
			{
				entity.MonthLimit = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string SendText
		{
			get
			{
				return entity.SendText;
			}
			set
			{
				entity.SendText = value;
			}
		}
		#endregion 





        #region "FKQuery"
		
        public static List<SPCodeInfoWrapper> FindAllByOrderByAndFilterAndSPCodeID(string orderByColumnName, bool isDesc,int pageIndex, int pageSize,    SPCodeWrapper sPCodeID,  out int recordCount)
        {
            return ConvertToWrapperList(businessProxy.FindAllByOrderByAndFilterAndSPCodeID(orderByColumnName, isDesc,pageIndex, pageSize,   sPCodeID.entity,out recordCount));
        }

        public static List<SPCodeInfoWrapper> FindAllBySPCodeID(SPCodeWrapper sPCodeID)
        {
            return ConvertToWrapperList(businessProxy.FindAllBySPCodeID(sPCodeID.entity));
        }
		



        #endregion

        #region Static Common Data Operation
		
		internal static List<SPCodeInfoWrapper> ConvertToWrapperList(List<SPCodeInfoEntity> entitylist)
        {
            List<SPCodeInfoWrapper> list = new List<SPCodeInfoWrapper>();
            foreach (SPCodeInfoEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }

		internal static List<SPCodeInfoWrapper> ConvertToWrapperList(IList<SPCodeInfoEntity> entitylist)
        {
            List<SPCodeInfoWrapper> list = new List<SPCodeInfoWrapper>();
            foreach (SPCodeInfoEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }
		
		internal static List<SPCodeInfoEntity> ConvertToEntityList(List<SPCodeInfoWrapper> wrapperlist)
        {
            List<SPCodeInfoEntity> list = new List<SPCodeInfoEntity>();
            foreach (SPCodeInfoWrapper wrapper in wrapperlist)
            {
                list.Add(wrapper.entity);
            }
            return list;
        }

        internal static SPCodeInfoWrapper ConvertEntityToWrapper(SPCodeInfoEntity entity)
        {
            if (entity == null)
                return null;
				
            if (entity.Id == 0)
                return null;

            return new SPCodeInfoWrapper(entity);
        }
		
		#endregion

    }//End Class
}// End Namespace

