// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using Spring.Context.Support;
using Common.Logging;
using Legendigital.Framework.Common.Bussiness.NHibernate;
using SPS.Entity.Tables;
using SPS.Bussiness.ServiceProxys.Tables.Container;
using SPS.Bussiness.ServiceProxys.Tables;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;

namespace SPS.Bussiness.Wrappers
{
    public partial class SPAdvertisementWrapper    //: BaseSpringNHibernateWrapper<SPAdvertisementEntity, ISPAdvertisementServiceProxy, SPAdvertisementWrapper,int>
    {
        #region Member

		internal static readonly ISPAdvertisementServiceProxy businessProxy = ((SPS.Bussiness.ServiceProxys.Tables.Container.ServiceProxyContainer)(ContextRegistry.GetContext().GetObject("ServiceProxyContainerIocID", typeof(SPS.Bussiness.ServiceProxys.Tables.Container.ServiceProxyContainer)))).SPAdvertisementServiceProxyInstance;
		
		
		internal SPAdvertisementEntity Entity
        {
            get { return this.entity; }
        }
		
        #endregion

        #region Construtor
		public SPAdvertisementWrapper() : base(new SPAdvertisementEntity())
        {
            
        }

        internal SPAdvertisementWrapper(SPAdvertisementEntity entityObj)
            : base(entityObj)
        {
        }
		#endregion

        #region Process Column Name
        private static string ProcessColumnName(string columnName)
        {
            switch (columnName)
            {
              default:
                    return columnName;
            }
        }

        private static void ProcessQueryFilters(List<QueryFilter> filters)
        {
            foreach (QueryFilter queryFilter in filters)
            {
                queryFilter.FilterFieldName = ProcessColumnName(queryFilter.FilterFieldName);
            }
        }
		#endregion
		
      #region 公共常量

		public static readonly string CLASS_FULL_NAME = "SPS.Entity.Tables.SPAdvertisementEntity";
		public static readonly string PROPERTY_NAME_ID = "Id";
		public static readonly string PROPERTY_NAME_NAME = "Name";
		public static readonly string PROPERTY_NAME_CODE = "Code";
		public static readonly string PROPERTY_NAME_IMAGEURL = "ImageUrl";
		public static readonly string PROPERTY_NAME_ADPRICE = "AdPrice";
		public static readonly string PROPERTY_NAME_ACCOUNTTYPE = "AccountType";
		public static readonly string PROPERTY_NAME_APPLYSTATUS = "ApplyStatus";
		public static readonly string PROPERTY_NAME_ADTYPE = "AdType";
		public static readonly string PROPERTY_NAME_ADTEXT = "AdText";
		public static readonly string PROPERTY_NAME_DESCRIPTION = "Description";
		public static readonly string PROPERTY_NAME_ISDISABLE = "IsDisable";
		public static readonly string PROPERTY_NAME_ASSIGNEDCLIENT = "AssignedClient";
		public static readonly string PROPERTY_NAME_CREATEBY = "CreateBy";
		public static readonly string PROPERTY_NAME_CREATEAT = "CreateAt";
		public static readonly string PROPERTY_NAME_LASTMODIFYBY = "LastModifyBy";
		public static readonly string PROPERTY_NAME_LASTMODIFYAT = "LastModifyAt";
		public static readonly string PROPERTY_NAME_LASTMODIFYCOMMENT = "LastModifyComment";
		
        #endregion
	
 
      	
	
	
		 
		
		
		
		


		#region Public Property
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public int Id
		{
			get
			{
				return entity.Id;
			}
			set
			{
				entity.Id = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string Name
		{
			get
			{
				return entity.Name;
			}
			set
			{
				entity.Name = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string Code
		{
			get
			{
				return entity.Code;
			}
			set
			{
				entity.Code = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string ImageUrl
		{
			get
			{
				return entity.ImageUrl;
			}
			set
			{
				entity.ImageUrl = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string AdPrice
		{
			get
			{
				return entity.AdPrice;
			}
			set
			{
				entity.AdPrice = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string AccountType
		{
			get
			{
				return entity.AccountType;
			}
			set
			{
				entity.AccountType = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string ApplyStatus
		{
			get
			{
				return entity.ApplyStatus;
			}
			set
			{
				entity.ApplyStatus = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string AdType
		{
			get
			{
				return entity.AdType;
			}
			set
			{
				entity.AdType = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string AdText
		{
			get
			{
				return entity.AdText;
			}
			set
			{
				entity.AdText = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string Description
		{
			get
			{
				return entity.Description;
			}
			set
			{
				entity.Description = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public bool? IsDisable
		{
			get
			{
				return entity.IsDisable;
			}
			set
			{
				entity.IsDisable = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public int? AssignedClient
		{
			get
			{
				return entity.AssignedClient;
			}
			set
			{
				entity.AssignedClient = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public int CreateBy
		{
			get
			{
				return entity.CreateBy;
			}
			set
			{
				entity.CreateBy = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public DateTime CreateAt
		{
			get
			{
				return entity.CreateAt;
			}
			set
			{
				entity.CreateAt = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public int? LastModifyBy
		{
			get
			{
				return entity.LastModifyBy;
			}
			set
			{
				entity.LastModifyBy = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public DateTime? LastModifyAt
		{
			get
			{
				return entity.LastModifyAt;
			}
			set
			{
				entity.LastModifyAt = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string LastModifyComment
		{
			get
			{
				return entity.LastModifyComment;
			}
			set
			{
				entity.LastModifyComment = value;
			}
		}
		#endregion 


		#region Query Property
		
		
      	
   
		#endregion


        #region "FKQuery"



        #endregion








        #region Static Common Data Operation
		
		internal static List<SPAdvertisementWrapper> ConvertToWrapperList(List<SPAdvertisementEntity> entitylist)
        {
            List<SPAdvertisementWrapper> list = new List<SPAdvertisementWrapper>();
            foreach (SPAdvertisementEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }

		internal static List<SPAdvertisementWrapper> ConvertToWrapperList(IList<SPAdvertisementEntity> entitylist)
        {
            List<SPAdvertisementWrapper> list = new List<SPAdvertisementWrapper>();
            foreach (SPAdvertisementEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }
		
		internal static List<SPAdvertisementEntity> ConvertToEntityList(List<SPAdvertisementWrapper> wrapperlist)
        {
            List<SPAdvertisementEntity> list = new List<SPAdvertisementEntity>();
            foreach (SPAdvertisementWrapper wrapper in wrapperlist)
            {
                list.Add(wrapper.entity);
            }
            return list;
        }

        internal static SPAdvertisementWrapper ConvertEntityToWrapper(SPAdvertisementEntity entity)
        {
            if (entity == null)
                return null;
				
            if (entity.Id == 0)
                return null;

            return new SPAdvertisementWrapper(entity);
        }
		
		#endregion

    }//End Class
}// End Namespace

