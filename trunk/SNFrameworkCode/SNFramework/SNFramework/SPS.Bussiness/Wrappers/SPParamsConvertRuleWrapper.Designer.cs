// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using Spring.Context.Support;
using Common.Logging;
using SPS.Entity.Tables;
using SPS.Bussiness.ServiceProxys.Tables.Container;
using SPS.Bussiness.ServiceProxys.Tables;

namespace SPS.Bussiness.Wrappers
{
    public partial class SPParamsConvertRuleWrapper
    {
        #region Member

		internal static readonly ISPParamsConvertRuleServiceProxy businessProxy = ((SPS.Bussiness.ServiceProxys.Tables.Container.ServiceProxyContainer)(ContextRegistry.GetContext().GetObject("ServiceProxyContainerIocID", typeof(SPS.Bussiness.ServiceProxys.Tables.Container.ServiceProxyContainer)))).SPParamsConvertRuleServiceProxyInstance;
		//internal static readonly ISPParamsConvertRuleServiceProxy businessProxy = ((ServiceProxyContainer)(ContextRegistry.GetContext().GetObject("ServiceProxyContainerIocID"))).SPParamsConvertRuleServiceProxyInstance;

        internal SPParamsConvertRuleEntity entity;
		
		private static ILog logger = null;

        public static ILog Logger
        {
            get
            {
                if (logger == null)
                    logger = LogManager.GetLogger(typeof(SPParamsConvertRuleWrapper));
                return logger;
            }
        }

        #endregion

        #region Construtor
        public SPParamsConvertRuleWrapper() : this(new SPParamsConvertRuleEntity())
        {
            
        }

        internal SPParamsConvertRuleWrapper(SPParamsConvertRuleEntity entityObj)
        {
            entity = entityObj;
        }
		#endregion
		
		#region Equals 和 HashCode 方法覆盖
		public override bool Equals(object obj)
        {
            if (obj == null && entity!=null)
            {
                if (entity.Id == 0)
                    return true;

                return false;
            }
            return entity.Equals(obj);
        }

        public override int GetHashCode()
        {
            return entity.GetHashCode();
        }
		#endregion
		
        #region 公共常量

		public static readonly string CLASS_FULL_NAME = "SPS.Entity.Tables.SPParamsConvertRuleEntity";
		public static readonly string PROPERTY_NAME_ID = "Id";
		public static readonly string PROPERTY_NAME_PARENTDATAID = "ParentDataID";
		public static readonly string PROPERTY_NAME_PARENTDATATYPE = "ParentDataType";
		public static readonly string PROPERTY_NAME_CONVERTCODE = "ConvertCode";
		public static readonly string PROPERTY_NAME_CONVERTTYPE = "ConvertType";
		
        #endregion


		#region Public Property
		/// <summary>
		/// 
		/// </summary>		
		public int Id
		{
			get
			{
				return entity.Id;
			}
			set
			{
				entity.Id = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public int? ParentDataID
		{
			get
			{
				return entity.ParentDataID;
			}
			set
			{
				entity.ParentDataID = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string ParentDataType
		{
			get
			{
				return entity.ParentDataType;
			}
			set
			{
				entity.ParentDataType = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string ConvertCode
		{
			get
			{
				return entity.ConvertCode;
			}
			set
			{
				entity.ConvertCode = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string ConvertType
		{
			get
			{
				return entity.ConvertType;
			}
			set
			{
				entity.ConvertType = value;
			}
		}
		#endregion 





        #region "FKQuery"



        #endregion

        #region Static Common Data Operation
		
		internal static List<SPParamsConvertRuleWrapper> ConvertToWrapperList(List<SPParamsConvertRuleEntity> entitylist)
        {
            List<SPParamsConvertRuleWrapper> list = new List<SPParamsConvertRuleWrapper>();
            foreach (SPParamsConvertRuleEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }

		internal static List<SPParamsConvertRuleWrapper> ConvertToWrapperList(IList<SPParamsConvertRuleEntity> entitylist)
        {
            List<SPParamsConvertRuleWrapper> list = new List<SPParamsConvertRuleWrapper>();
            foreach (SPParamsConvertRuleEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }
		
		internal static List<SPParamsConvertRuleEntity> ConvertToEntityList(List<SPParamsConvertRuleWrapper> wrapperlist)
        {
            List<SPParamsConvertRuleEntity> list = new List<SPParamsConvertRuleEntity>();
            foreach (SPParamsConvertRuleWrapper wrapper in wrapperlist)
            {
                list.Add(wrapper.entity);
            }
            return list;
        }

        internal static SPParamsConvertRuleWrapper ConvertEntityToWrapper(SPParamsConvertRuleEntity entity)
        {
            if (entity == null)
                return null;
				
            if (entity.Id == 0)
                return null;

            return new SPParamsConvertRuleWrapper(entity);
        }
		
		#endregion

    }//End Class
}// End Namespace

