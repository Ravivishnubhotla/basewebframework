// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using Spring.Context.Support;
using Common.Logging;
using SPS.Entity.Tables;
using SPS.Bussiness.ServiceProxys.Tables.Container;
using SPS.Bussiness.ServiceProxys.Tables;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;

namespace SPS.Bussiness.Wrappers
{
    public partial class SPCodeWrapper
    {
        #region Member

		internal static readonly ISPCodeServiceProxy businessProxy = ((SPS.Bussiness.ServiceProxys.Tables.Container.ServiceProxyContainer)(ContextRegistry.GetContext().GetObject("ServiceProxyContainerIocID", typeof(SPS.Bussiness.ServiceProxys.Tables.Container.ServiceProxyContainer)))).SPCodeServiceProxyInstance;
	 
	 
        internal SPCodeEntity entity;
		
		private static ILog logger = null;

        public static ILog Logger
        {
            get
            {
                if (logger == null)
                    logger = LogManager.GetLogger(typeof(SPCodeWrapper));
                return logger;
            }
        }

        #endregion

        #region Construtor
        public SPCodeWrapper() : this(new SPCodeEntity())
        {
            
        }

        internal SPCodeWrapper(SPCodeEntity entityObj)
        {
            entity = entityObj;
        }
		#endregion
		
		#region Equals 和 HashCode 方法覆盖
		public override bool Equals(object obj)
        {
            if (obj == null && entity!=null)
            {
                if (entity.Id == 0)
                    return true;

                return false;
            }
            return entity.Equals(obj);
        }

        public override int GetHashCode()
        {
            return entity.GetHashCode();
        }
		#endregion
		
        #region 公共常量

		public static readonly string CLASS_FULL_NAME = "SPS.Entity.Tables.SPCodeEntity";
		public static readonly string PROPERTY_NAME_ID = "Id";
		public static readonly string PROPERTY_NAME_NAME = "Name";
		public static readonly string PROPERTY_NAME_DESCRIPTION = "Description";
		public static readonly string PROPERTY_NAME_CODE = "Code";
		public static readonly string PROPERTY_NAME_CHANNELID = "ChannelID";
		public static readonly string PROPERTY_NAME_MO = "Mo";
		public static readonly string PROPERTY_NAME_MOTYPE = "MOType";
		public static readonly string PROPERTY_NAME_ORDERINDEX = "OrderIndex";
		public static readonly string PROPERTY_NAME_SPCODE = "SPCode";
		public static readonly string PROPERTY_NAME_PROVINCE = "Province";
		public static readonly string PROPERTY_NAME_DISABLECITY = "DisableCity";
		public static readonly string PROPERTY_NAME_ISDIABLE = "IsDiable";
		public static readonly string PROPERTY_NAME_SPTYPE = "SPType";
		public static readonly string PROPERTY_NAME_CODELENGTH = "CodeLength";
		public static readonly string PROPERTY_NAME_DAYLIMIT = "DayLimit";
		public static readonly string PROPERTY_NAME_MONTHLIMIT = "MonthLimit";
		public static readonly string PROPERTY_NAME_PRICE = "Price";
		public static readonly string PROPERTY_NAME_SENDTEXT = "SendText";
		public static readonly string PROPERTY_NAME_HASFILTERS = "HasFilters";
		public static readonly string PROPERTY_NAME_CREATEBY = "CreateBy";
		public static readonly string PROPERTY_NAME_CREATEAT = "CreateAt";
		public static readonly string PROPERTY_NAME_LASTMODIFYBY = "LastModifyBy";
		public static readonly string PROPERTY_NAME_LASTMODIFYAT = "LastModifyAt";
		public static readonly string PROPERTY_NAME_HASPARAMSCONVERT = "HasParamsConvert";
		
        #endregion


		#region Public Property
		/// <summary>
		/// 
		/// </summary>		
		public int Id
		{
			get
			{
				return entity.Id;
			}
			set
			{
				entity.Id = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string Name
		{
			get
			{
				return entity.Name;
			}
			set
			{
				entity.Name = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string Description
		{
			get
			{
				return entity.Description;
			}
			set
			{
				entity.Description = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string Code
		{
			get
			{
				return entity.Code;
			}
			set
			{
				entity.Code = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public SPChannelWrapper ChannelID
		{
			get
			{
				return SPChannelWrapper.ConvertEntityToWrapper(entity.ChannelID) ;
			}
			set
			{
				entity.ChannelID = ((value == null) ? null : value.entity);
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string Mo
		{
			get
			{
				return entity.Mo;
			}
			set
			{
				entity.Mo = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string MOType
		{
			get
			{
				return entity.MOType;
			}
			set
			{
				entity.MOType = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public int? OrderIndex
		{
			get
			{
				return entity.OrderIndex;
			}
			set
			{
				entity.OrderIndex = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string SPCode
		{
			get
			{
				return entity.SPCode;
			}
			set
			{
				entity.SPCode = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string Province
		{
			get
			{
				return entity.Province;
			}
			set
			{
				entity.Province = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string DisableCity
		{
			get
			{
				return entity.DisableCity;
			}
			set
			{
				entity.DisableCity = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public bool IsDiable
		{
			get
			{
				return entity.IsDiable;
			}
			set
			{
				entity.IsDiable = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string SPType
		{
			get
			{
				return entity.SPType;
			}
			set
			{
				entity.SPType = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public int? CodeLength
		{
			get
			{
				return entity.CodeLength;
			}
			set
			{
				entity.CodeLength = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string DayLimit
		{
			get
			{
				return entity.DayLimit;
			}
			set
			{
				entity.DayLimit = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string MonthLimit
		{
			get
			{
				return entity.MonthLimit;
			}
			set
			{
				entity.MonthLimit = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public decimal? Price
		{
			get
			{
				return entity.Price;
			}
			set
			{
				entity.Price = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string SendText
		{
			get
			{
				return entity.SendText;
			}
			set
			{
				entity.SendText = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public bool HasFilters
		{
			get
			{
				return entity.HasFilters;
			}
			set
			{
				entity.HasFilters = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public int? CreateBy
		{
			get
			{
				return entity.CreateBy;
			}
			set
			{
				entity.CreateBy = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public DateTime? CreateAt
		{
			get
			{
				return entity.CreateAt;
			}
			set
			{
				entity.CreateAt = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public int? LastModifyBy
		{
			get
			{
				return entity.LastModifyBy;
			}
			set
			{
				entity.LastModifyBy = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public DateTime? LastModifyAt
		{
			get
			{
				return entity.LastModifyAt;
			}
			set
			{
				entity.LastModifyAt = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public bool HasParamsConvert
		{
			get
			{
				return entity.HasParamsConvert;
			}
			set
			{
				entity.HasParamsConvert = value;
			}
		}
		#endregion 





        #region "FKQuery"
		
        public static List<SPCodeWrapper> FindAllByOrderByAndFilterAndChannelID(string orderByColumnName, bool isDesc,   SPChannelWrapper channelID,  PageQueryParams pageQueryParams)
        {
            return ConvertToWrapperList(businessProxy.FindAllByOrderByAndFilterAndChannelID(orderByColumnName, isDesc,   channelID.entity, pageQueryParams));
        }

        public static List<SPCodeWrapper> FindAllByChannelID(SPChannelWrapper channelID)
        {
            return ConvertToWrapperList(businessProxy.FindAllByChannelID(channelID.entity));
        }
		



        #endregion








        #region Static Common Data Operation
		
		internal static List<SPCodeWrapper> ConvertToWrapperList(List<SPCodeEntity> entitylist)
        {
            List<SPCodeWrapper> list = new List<SPCodeWrapper>();
            foreach (SPCodeEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }

		internal static List<SPCodeWrapper> ConvertToWrapperList(IList<SPCodeEntity> entitylist)
        {
            List<SPCodeWrapper> list = new List<SPCodeWrapper>();
            foreach (SPCodeEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }
		
		internal static List<SPCodeEntity> ConvertToEntityList(List<SPCodeWrapper> wrapperlist)
        {
            List<SPCodeEntity> list = new List<SPCodeEntity>();
            foreach (SPCodeWrapper wrapper in wrapperlist)
            {
                list.Add(wrapper.entity);
            }
            return list;
        }

        internal static SPCodeWrapper ConvertEntityToWrapper(SPCodeEntity entity)
        {
            if (entity == null)
                return null;
				
            if (entity.Id == 0)
                return null;

            return new SPCodeWrapper(entity);
        }
		
		#endregion

    }//End Class
}// End Namespace

