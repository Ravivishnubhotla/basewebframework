// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using Spring.Context.Support;
using Common.Logging;
using Legendigital.Framework.Common.Bussiness.NHibernate;
using SPS.Entity.Tables;
using SPS.Bussiness.ServiceProxys.Tables.Container;
using SPS.Bussiness.ServiceProxys.Tables;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;

namespace SPS.Bussiness.Wrappers
{
    public partial class SPSClientWrapper   
    {
        #region Member

		internal static readonly ISPSClientServiceProxy businessProxy = ((SPS.Bussiness.ServiceProxys.Tables.Container.ServiceProxyContainer)(ContextRegistry.GetContext().GetObject("ServiceProxyContainerIocID", typeof(SPS.Bussiness.ServiceProxys.Tables.Container.ServiceProxyContainer)))).SPSClientServiceProxyInstance;
		
		
		internal SPSClientEntity Entity
        {
            get { return this.entity; }
        }
		
        #endregion

        #region Construtor
		public SPSClientWrapper() : base(new SPSClientEntity())
        {
            
        }

        internal SPSClientWrapper(SPSClientEntity entityObj)
            : base(entityObj)
        {
        }
		#endregion

        #region Process Column Name
        private static string ProcessColumnName(string columnName)
        {
            switch (columnName)
            {
		        case "SyncDataSetting_Id":
					return PROPERTY_SYNCDATASETTING_ID;
		        case "SyncDataSetting_SycnRetryTimes":
					return PROPERTY_SYNCDATASETTING_SYCNRETRYTIMES;
		        case "SyncDataSetting_SyncType":
					return PROPERTY_SYNCDATASETTING_SYNCTYPE;
		        case "SyncDataSetting_SycnMO":
					return PROPERTY_SYNCDATASETTING_SYCNMO;
		        case "SyncDataSetting_SycnMOUrl":
					return PROPERTY_SYNCDATASETTING_SYCNMOURL;
		        case "SyncDataSetting_SycnMOOkMessage":
					return PROPERTY_SYNCDATASETTING_SYCNMOOKMESSAGE;
		        case "SyncDataSetting_SycnMOFailedMessage":
					return PROPERTY_SYNCDATASETTING_SYCNMOFAILEDMESSAGE;
		        case "SyncDataSetting_SycnMR":
					return PROPERTY_SYNCDATASETTING_SYCNMR;
		        case "SyncDataSetting_SycnMRUrl":
					return PROPERTY_SYNCDATASETTING_SYCNMRURL;
		        case "SyncDataSetting_SycnMROkMessage":
					return PROPERTY_SYNCDATASETTING_SYCNMROKMESSAGE;
		        case "SyncDataSetting_SycnMRFailedMessage":
					return PROPERTY_SYNCDATASETTING_SYCNMRFAILEDMESSAGE;
		        case "SyncDataSetting_SycnSate":
					return PROPERTY_SYNCDATASETTING_SYCNSATE;
		        case "SyncDataSetting_SycnSateUrl":
					return PROPERTY_SYNCDATASETTING_SYCNSATEURL;
		        case "SyncDataSetting_SycnSateOkMessage":
					return PROPERTY_SYNCDATASETTING_SYCNSATEOKMESSAGE;
		        case "SyncDataSetting_SycnSateFailedMessage":
					return PROPERTY_SYNCDATASETTING_SYCNSATEFAILEDMESSAGE;
              default:
                    return columnName;
            }
        }

        private static void ProcessQueryFilters(List<QueryFilter> filters)
        {
            foreach (QueryFilter queryFilter in filters)
            {
                queryFilter.FilterFieldName = ProcessColumnName(queryFilter.FilterFieldName);
            }
        }
		#endregion
		
      #region 公共常量

		public static readonly string CLASS_FULL_NAME = "SPS.Entity.Tables.SPSClientEntity";
		public static readonly string PROPERTY_NAME_ID = "Id";
		public static readonly string PROPERTY_NAME_NAME = "Name";
		public static readonly string PROPERTY_NAME_DESCRIPTION = "Description";
		public static readonly string PROPERTY_NAME_USERID = "UserID";
		public static readonly string PROPERTY_NAME_ISDEFAULTCLIENT = "IsDefaultClient";
		public static readonly string PROPERTY_NAME_SYNCDATA = "SyncData";
		public static readonly string PROPERTY_NAME_SYCNNOTINTERCEPTCOUNT = "SycnNotInterceptCount";
		public static readonly string PROPERTY_NAME_SYNCDATASETTING = "SyncDataSetting";
		public static readonly string PROPERTY_NAME_ALIAS = "Alias";
		public static readonly string PROPERTY_NAME_INTERCEPTRATE = "InterceptRate";
		public static readonly string PROPERTY_NAME_DEFAULTPRICE = "DefaultPrice";
		public static readonly string PROPERTY_NAME_DEFAULTSHOWRECORDDAYS = "DefaultShowRecordDays";
		public static readonly string PROPERTY_NAME_CREATEBY = "CreateBy";
		public static readonly string PROPERTY_NAME_CREATEAT = "CreateAt";
		public static readonly string PROPERTY_NAME_LASTMODIFYBY = "LastModifyBy";
		public static readonly string PROPERTY_NAME_LASTMODIFYAT = "LastModifyAt";
		public static readonly string PROPERTY_NAME_LASTMODIFYCOMMENT = "LastModifyComment";
		
        #endregion
	
 
		#region syncDataSetting字段外键查询字段
        public const string PROPERTY_SYNCDATASETTING_ALIAS_NAME = "SyncDataSetting_SPSClientEntity_Alias";
		public const string PROPERTY_SYNCDATASETTING_ID = "SyncDataSetting_SPSClientEntity_Alias.Id";
		public const string PROPERTY_SYNCDATASETTING_SYCNRETRYTIMES = "SyncDataSetting_SPSClientEntity_Alias.SycnRetryTimes";
		public const string PROPERTY_SYNCDATASETTING_SYNCTYPE = "SyncDataSetting_SPSClientEntity_Alias.SyncType";
		public const string PROPERTY_SYNCDATASETTING_SYCNMO = "SyncDataSetting_SPSClientEntity_Alias.SycnMO";
		public const string PROPERTY_SYNCDATASETTING_SYCNMOURL = "SyncDataSetting_SPSClientEntity_Alias.SycnMOUrl";
		public const string PROPERTY_SYNCDATASETTING_SYCNMOOKMESSAGE = "SyncDataSetting_SPSClientEntity_Alias.SycnMOOkMessage";
		public const string PROPERTY_SYNCDATASETTING_SYCNMOFAILEDMESSAGE = "SyncDataSetting_SPSClientEntity_Alias.SycnMOFailedMessage";
		public const string PROPERTY_SYNCDATASETTING_SYCNMR = "SyncDataSetting_SPSClientEntity_Alias.SycnMR";
		public const string PROPERTY_SYNCDATASETTING_SYCNMRURL = "SyncDataSetting_SPSClientEntity_Alias.SycnMRUrl";
		public const string PROPERTY_SYNCDATASETTING_SYCNMROKMESSAGE = "SyncDataSetting_SPSClientEntity_Alias.SycnMROkMessage";
		public const string PROPERTY_SYNCDATASETTING_SYCNMRFAILEDMESSAGE = "SyncDataSetting_SPSClientEntity_Alias.SycnMRFailedMessage";
		public const string PROPERTY_SYNCDATASETTING_SYCNSATE = "SyncDataSetting_SPSClientEntity_Alias.SycnSate";
		public const string PROPERTY_SYNCDATASETTING_SYCNSATEURL = "SyncDataSetting_SPSClientEntity_Alias.SycnSateUrl";
		public const string PROPERTY_SYNCDATASETTING_SYCNSATEOKMESSAGE = "SyncDataSetting_SPSClientEntity_Alias.SycnSateOkMessage";
		public const string PROPERTY_SYNCDATASETTING_SYCNSATEFAILEDMESSAGE = "SyncDataSetting_SPSClientEntity_Alias.SycnSateFailedMessage";
		#endregion
      	
	
	
		 
		
		
		
		


		#region Public Property
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public int Id
		{
			get
			{
				return entity.Id;
			}
			set
			{
				entity.Id = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string Name
		{
			get
			{
				return entity.Name;
			}
			set
			{
				entity.Name = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string Description
		{
			get
			{
				return entity.Description;
			}
			set
			{
				entity.Description = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public int UserID
		{
			get
			{
				return entity.UserID;
			}
			set
			{
				entity.UserID = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public bool? IsDefaultClient
		{
			get
			{
				return entity.IsDefaultClient;
			}
			set
			{
				entity.IsDefaultClient = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public bool SyncData
		{
			get
			{
				return entity.SyncData;
			}
			set
			{
				entity.SyncData = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public int? SycnNotInterceptCount
		{
			get
			{
				return entity.SycnNotInterceptCount;
			}
			set
			{
				entity.SycnNotInterceptCount = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public SPSDataSycnSettingWrapper SyncDataSetting
		{
			get
			{
				return SPSDataSycnSettingWrapper.ConvertEntityToWrapper(entity.SyncDataSetting) ;
			}
			set
			{
				entity.SyncDataSetting = ((value == null) ? null : value.Entity);
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string Alias
		{
			get
			{
				return entity.Alias;
			}
			set
			{
				entity.Alias = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public decimal InterceptRate
		{
			get
			{
				return entity.InterceptRate;
			}
			set
			{
				entity.InterceptRate = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public decimal DefaultPrice
		{
			get
			{
				return entity.DefaultPrice;
			}
			set
			{
				entity.DefaultPrice = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public int DefaultShowRecordDays
		{
			get
			{
				return entity.DefaultShowRecordDays;
			}
			set
			{
				entity.DefaultShowRecordDays = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public int? CreateBy
		{
			get
			{
				return entity.CreateBy;
			}
			set
			{
				entity.CreateBy = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public DateTime? CreateAt
		{
			get
			{
				return entity.CreateAt;
			}
			set
			{
				entity.CreateAt = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public int? LastModifyBy
		{
			get
			{
				return entity.LastModifyBy;
			}
			set
			{
				entity.LastModifyBy = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public DateTime? LastModifyAt
		{
			get
			{
				return entity.LastModifyAt;
			}
			set
			{
				entity.LastModifyAt = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string LastModifyComment
		{
			get
			{
				return entity.LastModifyComment;
			}
			set
			{
				entity.LastModifyComment = value;
			}
		}
		#endregion 


		#region Query Property
		
		
		#region syncDataSetting字段外键查询字段
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_SYNCDATASETTING_ID)]
        public int? SyncDataSetting_Id
        {
            get
            {
                if (this. SyncDataSetting == null)
                    return null;
                return  SyncDataSetting.Id;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_SYNCDATASETTING_SYCNRETRYTIMES)]
        public int? SyncDataSetting_SycnRetryTimes
        {
            get
            {
                if (this. SyncDataSetting == null)
                    return null;
                return  SyncDataSetting.SycnRetryTimes;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_SYNCDATASETTING_SYNCTYPE)]
        public string SyncDataSetting_SyncType
        {
            get
            {
                if (this. SyncDataSetting == null)
                    return null;
                return  SyncDataSetting.SyncType;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_SYNCDATASETTING_SYCNMO)]
        public bool? SyncDataSetting_SycnMO
        {
            get
            {
                if (this. SyncDataSetting == null)
                    return null;
                return  SyncDataSetting.SycnMO;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_SYNCDATASETTING_SYCNMOURL)]
        public string SyncDataSetting_SycnMOUrl
        {
            get
            {
                if (this. SyncDataSetting == null)
                    return null;
                return  SyncDataSetting.SycnMOUrl;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_SYNCDATASETTING_SYCNMOOKMESSAGE)]
        public string SyncDataSetting_SycnMOOkMessage
        {
            get
            {
                if (this. SyncDataSetting == null)
                    return null;
                return  SyncDataSetting.SycnMOOkMessage;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_SYNCDATASETTING_SYCNMOFAILEDMESSAGE)]
        public string SyncDataSetting_SycnMOFailedMessage
        {
            get
            {
                if (this. SyncDataSetting == null)
                    return null;
                return  SyncDataSetting.SycnMOFailedMessage;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_SYNCDATASETTING_SYCNMR)]
        public bool? SyncDataSetting_SycnMR
        {
            get
            {
                if (this. SyncDataSetting == null)
                    return null;
                return  SyncDataSetting.SycnMR;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_SYNCDATASETTING_SYCNMRURL)]
        public string SyncDataSetting_SycnMRUrl
        {
            get
            {
                if (this. SyncDataSetting == null)
                    return null;
                return  SyncDataSetting.SycnMRUrl;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_SYNCDATASETTING_SYCNMROKMESSAGE)]
        public string SyncDataSetting_SycnMROkMessage
        {
            get
            {
                if (this. SyncDataSetting == null)
                    return null;
                return  SyncDataSetting.SycnMROkMessage;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_SYNCDATASETTING_SYCNMRFAILEDMESSAGE)]
        public string SyncDataSetting_SycnMRFailedMessage
        {
            get
            {
                if (this. SyncDataSetting == null)
                    return null;
                return  SyncDataSetting.SycnMRFailedMessage;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_SYNCDATASETTING_SYCNSATE)]
        public bool? SyncDataSetting_SycnSate
        {
            get
            {
                if (this. SyncDataSetting == null)
                    return null;
                return  SyncDataSetting.SycnSate;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_SYNCDATASETTING_SYCNSATEURL)]
        public string SyncDataSetting_SycnSateUrl
        {
            get
            {
                if (this. SyncDataSetting == null)
                    return null;
                return  SyncDataSetting.SycnSateUrl;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_SYNCDATASETTING_SYCNSATEOKMESSAGE)]
        public string SyncDataSetting_SycnSateOkMessage
        {
            get
            {
                if (this. SyncDataSetting == null)
                    return null;
                return  SyncDataSetting.SycnSateOkMessage;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_SYNCDATASETTING_SYCNSATEFAILEDMESSAGE)]
        public string SyncDataSetting_SycnSateFailedMessage
        {
            get
            {
                if (this. SyncDataSetting == null)
                    return null;
                return  SyncDataSetting.SycnSateFailedMessage;
            }
        }
		#endregion
      	
   
		#endregion


        #region "FKQuery"
		
        public static List<SPSClientWrapper> FindAllByOrderByAndFilterAndSyncDataSetting(string orderByColumnName, bool isDesc,   SPSDataSycnSettingWrapper syncDataSetting,  PageQueryParams pageQueryParams)
        {
            return ConvertToWrapperList(businessProxy.FindAllByOrderByAndFilterAndSyncDataSetting(orderByColumnName, isDesc,   syncDataSetting.Entity, pageQueryParams));
        }

        public static List<SPSClientWrapper> FindAllBySyncDataSetting(SPSDataSycnSettingWrapper syncDataSetting)
        {
            return ConvertToWrapperList(businessProxy.FindAllBySyncDataSetting(syncDataSetting.Entity));
        }
		



        #endregion








        #region Static Common Data Operation
		
		internal static List<SPSClientWrapper> ConvertToWrapperList(List<SPSClientEntity> entitylist)
        {
            List<SPSClientWrapper> list = new List<SPSClientWrapper>();
            foreach (SPSClientEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }

		internal static List<SPSClientWrapper> ConvertToWrapperList(IList<SPSClientEntity> entitylist)
        {
            List<SPSClientWrapper> list = new List<SPSClientWrapper>();
            foreach (SPSClientEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }
		
		internal static List<SPSClientEntity> ConvertToEntityList(List<SPSClientWrapper> wrapperlist)
        {
            List<SPSClientEntity> list = new List<SPSClientEntity>();
            foreach (SPSClientWrapper wrapper in wrapperlist)
            {
                list.Add(wrapper.entity);
            }
            return list;
        }

        internal static SPSClientWrapper ConvertEntityToWrapper(SPSClientEntity entity)
        {
            if (entity == null)
                return null;
				
            if (entity.Id == 0)
                return null;

            return new SPSClientWrapper(entity);
        }
		
		#endregion

    }//End Class
}// End Namespace

