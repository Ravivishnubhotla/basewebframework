// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using Spring.Context.Support;
using Common.Logging;
using SPS.Entity.Tables;
using SPS.Bussiness.ServiceProxys.Tables.Container;
using SPS.Bussiness.ServiceProxys.Tables;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;

namespace SPS.Bussiness.Wrappers
{
    public partial class SPChannelWrapper
    {
        #region Member

		internal static readonly ISPChannelServiceProxy businessProxy = ((SPS.Bussiness.ServiceProxys.Tables.Container.ServiceProxyContainer)(ContextRegistry.GetContext().GetObject("ServiceProxyContainerIocID", typeof(SPS.Bussiness.ServiceProxys.Tables.Container.ServiceProxyContainer)))).SPChannelServiceProxyInstance;
	 
	 
        internal SPChannelEntity entity;
		
		private static ILog logger = null;

        public static ILog Logger
        {
            get
            {
                if (logger == null)
                    logger = LogManager.GetLogger(typeof(SPChannelWrapper));
                return logger;
            }
        }

        #endregion

        #region Construtor
        public SPChannelWrapper() : this(new SPChannelEntity())
        {
            
        }

        internal SPChannelWrapper(SPChannelEntity entityObj)
        {
            entity = entityObj;
        }
		#endregion
		
		#region Equals 和 HashCode 方法覆盖
		public override bool Equals(object obj)
        {
            if (obj == null && entity!=null)
            {
                if (entity.Id == 0)
                    return true;

                return false;
            }
            return entity.Equals(obj);
        }

        public override int GetHashCode()
        {
            return entity.GetHashCode();
        }
		#endregion
		
        #region 公共常量

		public static readonly string CLASS_FULL_NAME = "SPS.Entity.Tables.SPChannelEntity";
		public static readonly string PROPERTY_NAME_ID = "Id";
		public static readonly string PROPERTY_NAME_NAME = "Name";
		public static readonly string PROPERTY_NAME_DESCRIPTION = "Description";
		public static readonly string PROPERTY_NAME_CODE = "Code";
		public static readonly string PROPERTY_NAME_RECIEVEDURL = "RecievedUrl";
		public static readonly string PROPERTY_NAME_RECIEVEDNAME = "RecievedName";
		public static readonly string PROPERTY_NAME_ISALLOWNULLLINKID = "IsAllowNullLinkID";
		public static readonly string PROPERTY_NAME_ISMONITORREQUEST = "IsMonitorRequest";
		public static readonly string PROPERTY_NAME_ISDISABLE = "IsDisable";
		public static readonly string PROPERTY_NAME_DATAOKMESSAGE = "DataOkMessage";
		public static readonly string PROPERTY_NAME_DATAFAILEDMESSAGE = "DataFailedMessage";
		public static readonly string PROPERTY_NAME_REPORTOKMESSAGE = "ReportOkMessage";
		public static readonly string PROPERTY_NAME_REPORTFAILEDMESSAGE = "ReportFailedMessage";
		public static readonly string PROPERTY_NAME_STATSENDONCE = "StatSendOnce";
		public static readonly string PROPERTY_NAME_TYPEREQUEST = "TypeRequest";
		public static readonly string PROPERTY_NAME_DATAPARAMNAME = "DataParamName";
		public static readonly string PROPERTY_NAME_DATAPARAMVALUE = "DataParamValue";
		public static readonly string PROPERTY_NAME_REPORTPARAMNAME = "ReportParamName";
		public static readonly string PROPERTY_NAME_REPORTPARAMVALUE = "ReportParamValue";
		public static readonly string PROPERTY_NAME_HASFILTERS = "HasFilters";
		public static readonly string PROPERTY_NAME_STATUSPARAMNAME = "StatusParamName";
		public static readonly string PROPERTY_NAME_STATUSPARAMVALUE = "StatusParamValue";
		public static readonly string PROPERTY_NAME_PRICE = "Price";
		public static readonly string PROPERTY_NAME_DEFAULTRATE = "DefaultRate";
		public static readonly string PROPERTY_NAME_HASSTATREPORT = "HasStatReport";
		public static readonly string PROPERTY_NAME_CHANNELDETAILINFO = "ChannelDetailInfo";
		public static readonly string PROPERTY_NAME_UPPERID = "UpperID";
		public static readonly string PROPERTY_NAME_ISLOGREQUEST = "IsLogRequest";
		public static readonly string PROPERTY_NAME_CHANNELTYPE = "ChannelType";
		public static readonly string PROPERTY_NAME_CHANNELSTATUS = "ChannelStatus";
		
        #endregion


		#region Public Property
		/// <summary>
		/// 
		/// </summary>		
		public int Id
		{
			get
			{
				return entity.Id;
			}
			set
			{
				entity.Id = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string Name
		{
			get
			{
				return entity.Name;
			}
			set
			{
				entity.Name = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string Description
		{
			get
			{
				return entity.Description;
			}
			set
			{
				entity.Description = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string Code
		{
			get
			{
				return entity.Code;
			}
			set
			{
				entity.Code = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string RecievedUrl
		{
			get
			{
				return entity.RecievedUrl;
			}
			set
			{
				entity.RecievedUrl = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string RecievedName
		{
			get
			{
				return entity.RecievedName;
			}
			set
			{
				entity.RecievedName = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public bool? IsAllowNullLinkID
		{
			get
			{
				return entity.IsAllowNullLinkID;
			}
			set
			{
				entity.IsAllowNullLinkID = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public bool? IsMonitorRequest
		{
			get
			{
				return entity.IsMonitorRequest;
			}
			set
			{
				entity.IsMonitorRequest = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public bool? IsDisable
		{
			get
			{
				return entity.IsDisable;
			}
			set
			{
				entity.IsDisable = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string DataOkMessage
		{
			get
			{
				return entity.DataOkMessage;
			}
			set
			{
				entity.DataOkMessage = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string DataFailedMessage
		{
			get
			{
				return entity.DataFailedMessage;
			}
			set
			{
				entity.DataFailedMessage = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string ReportOkMessage
		{
			get
			{
				return entity.ReportOkMessage;
			}
			set
			{
				entity.ReportOkMessage = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string ReportFailedMessage
		{
			get
			{
				return entity.ReportFailedMessage;
			}
			set
			{
				entity.ReportFailedMessage = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public bool? StatSendOnce
		{
			get
			{
				return entity.StatSendOnce;
			}
			set
			{
				entity.StatSendOnce = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public bool? TypeRequest
		{
			get
			{
				return entity.TypeRequest;
			}
			set
			{
				entity.TypeRequest = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string DataParamName
		{
			get
			{
				return entity.DataParamName;
			}
			set
			{
				entity.DataParamName = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string DataParamValue
		{
			get
			{
				return entity.DataParamValue;
			}
			set
			{
				entity.DataParamValue = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string ReportParamName
		{
			get
			{
				return entity.ReportParamName;
			}
			set
			{
				entity.ReportParamName = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string ReportParamValue
		{
			get
			{
				return entity.ReportParamValue;
			}
			set
			{
				entity.ReportParamValue = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public bool? HasFilters
		{
			get
			{
				return entity.HasFilters;
			}
			set
			{
				entity.HasFilters = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string StatusParamName
		{
			get
			{
				return entity.StatusParamName;
			}
			set
			{
				entity.StatusParamName = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string StatusParamValue
		{
			get
			{
				return entity.StatusParamValue;
			}
			set
			{
				entity.StatusParamValue = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public decimal? Price
		{
			get
			{
				return entity.Price;
			}
			set
			{
				entity.Price = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public decimal? DefaultRate
		{
			get
			{
				return entity.DefaultRate;
			}
			set
			{
				entity.DefaultRate = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public bool? HasStatReport
		{
			get
			{
				return entity.HasStatReport;
			}
			set
			{
				entity.HasStatReport = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string ChannelDetailInfo
		{
			get
			{
				return entity.ChannelDetailInfo;
			}
			set
			{
				entity.ChannelDetailInfo = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public SPUpperWrapper UpperID
		{
			get
			{
				return SPUpperWrapper.ConvertEntityToWrapper(entity.UpperID) ;
			}
			set
			{
				entity.UpperID = ((value == null) ? null : value.entity);
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public bool? IsLogRequest
		{
			get
			{
				return entity.IsLogRequest;
			}
			set
			{
				entity.IsLogRequest = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string ChannelType
		{
			get
			{
				return entity.ChannelType;
			}
			set
			{
				entity.ChannelType = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string ChannelStatus
		{
			get
			{
				return entity.ChannelStatus;
			}
			set
			{
				entity.ChannelStatus = value;
			}
		}
		#endregion 





        #region "FKQuery"
		
        public static List<SPChannelWrapper> FindAllByOrderByAndFilterAndUpperID(string orderByColumnName, bool isDesc,   SPUpperWrapper upperID,  PageQueryParams pageQueryParams)
        {
            return ConvertToWrapperList(businessProxy.FindAllByOrderByAndFilterAndUpperID(orderByColumnName, isDesc,   upperID.entity, pageQueryParams));
        }

        public static List<SPChannelWrapper> FindAllByUpperID(SPUpperWrapper upperID)
        {
            return ConvertToWrapperList(businessProxy.FindAllByUpperID(upperID.entity));
        }
		



        #endregion








        #region Static Common Data Operation
		
		internal static List<SPChannelWrapper> ConvertToWrapperList(List<SPChannelEntity> entitylist)
        {
            List<SPChannelWrapper> list = new List<SPChannelWrapper>();
            foreach (SPChannelEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }

		internal static List<SPChannelWrapper> ConvertToWrapperList(IList<SPChannelEntity> entitylist)
        {
            List<SPChannelWrapper> list = new List<SPChannelWrapper>();
            foreach (SPChannelEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }
		
		internal static List<SPChannelEntity> ConvertToEntityList(List<SPChannelWrapper> wrapperlist)
        {
            List<SPChannelEntity> list = new List<SPChannelEntity>();
            foreach (SPChannelWrapper wrapper in wrapperlist)
            {
                list.Add(wrapper.entity);
            }
            return list;
        }

        internal static SPChannelWrapper ConvertEntityToWrapper(SPChannelEntity entity)
        {
            if (entity == null)
                return null;
				
            if (entity.Id == 0)
                return null;

            return new SPChannelWrapper(entity);
        }
		
		#endregion

    }//End Class
}// End Namespace

