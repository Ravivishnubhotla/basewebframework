// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using Spring.Context.Support;
using Common.Logging;
using SPS.Entity.Tables;
using SPS.Bussiness.ServiceProxys.Tables.Container;
using SPS.Bussiness.ServiceProxys.Tables;

namespace SPS.Bussiness.Wrappers
{
    public partial class SPChannelWrapper
    {
        #region Member

		internal static readonly ISPChannelServiceProxy businessProxy = ((SPS.Bussiness.ServiceProxys.Tables.Container.ServiceProxyContainer)(ContextRegistry.GetContext().GetObject("ServiceProxyContainerIocID", typeof(SPS.Bussiness.ServiceProxys.Tables.Container.ServiceProxyContainer)))).SPChannelServiceProxyInstance;
		//internal static readonly ISPChannelServiceProxy businessProxy = ((ServiceProxyContainer)(ContextRegistry.GetContext().GetObject("ServiceProxyContainerIocID"))).SPChannelServiceProxyInstance;

        internal SPChannelEntity entity;
		
		private static ILog logger = null;

        public static ILog Logger
        {
            get
            {
                if (logger == null)
                    logger = LogManager.GetLogger(typeof(SPChannelWrapper));
                return logger;
            }
        }

        #endregion

        #region Construtor
        public SPChannelWrapper() : this(new SPChannelEntity())
        {
            
        }

        internal SPChannelWrapper(SPChannelEntity entityObj)
        {
            entity = entityObj;
        }
		#endregion
		
		#region Equals 和 HashCode 方法覆盖
		public override bool Equals(object obj)
        {
            if (obj == null && entity!=null)
            {
                if (entity.Id == 0)
                    return true;

                return false;
            }
            return entity.Equals(obj);
        }

        public override int GetHashCode()
        {
            return entity.GetHashCode();
        }
		#endregion
		
        #region 公共常量

		public static readonly string CLASS_FULL_NAME = "SPS.Entity.Tables.SPChannelEntity";
		public static readonly string PROPERTY_NAME_ID = "Id";
		public static readonly string PROPERTY_NAME_NAME = "Name";
		public static readonly string PROPERTY_NAME_CODE = "Code";
		public static readonly string PROPERTY_NAME_DATAOKMESSAGE = "DataOkMessage";
		public static readonly string PROPERTY_NAME_DATAFAILEDMESSAGE = "DataFailedMessage";
		public static readonly string PROPERTY_NAME_DESCRIPTION = "Description";
		public static readonly string PROPERTY_NAME_DATAADAPTERTYPE = "DataAdapterType";
		public static readonly string PROPERTY_NAME_DATAADAPTERURL = "DataAdapterUrl";
		public static readonly string PROPERTY_NAME_CHANNELTYPE = "ChannelType";
		public static readonly string PROPERTY_NAME_IVRFEETIMETYPE = "IVRFeeTimeType";
		public static readonly string PROPERTY_NAME_IVRTIMEFORMAT = "IVRTimeFormat";
		public static readonly string PROPERTY_NAME_ISSTATEREPORT = "IsStateReport";
		public static readonly string PROPERTY_NAME_STATEREPORTTYPE = "StateReportType";
		public static readonly string PROPERTY_NAME_REPORTOKMESSAGE = "ReportOkMessage";
		public static readonly string PROPERTY_NAME_REPORTFAILEDMESSAGE = "ReportFailedMessage";
		public static readonly string PROPERTY_NAME_STATEREPORTPARAMNAME = "StateReportParamName";
		public static readonly string PROPERTY_NAME_STATEREPORTPARAMVALUE = "StateReportParamValue";
		public static readonly string PROPERTY_NAME_REQUESTTYPEPARAMNAME = "RequestTypeParamName";
		public static readonly string PROPERTY_NAME_REQUESTTYPEPARAMSTATEREPORTVALUE = "RequestTypeParamStateReportValue";
		public static readonly string PROPERTY_NAME_REQUESTTYPEPARAMDATAREPORTVALUE = "RequestTypeParamDataReportValue";
		public static readonly string PROPERTY_NAME_HASFILTERS = "HasFilters";
		public static readonly string PROPERTY_NAME_ISMONITORREQUEST = "IsMonitorRequest";
		public static readonly string PROPERTY_NAME_ISLOGREQUEST = "IsLogRequest";
		public static readonly string PROPERTY_NAME_ISPARAMSCONVERT = "IsParamsConvert";
		public static readonly string PROPERTY_NAME_ISAUTOLINKID = "IsAutoLinkID";
		public static readonly string PROPERTY_NAME_AUTOLINKIDFIELDS = "AutoLinkIDFields";
		public static readonly string PROPERTY_NAME_LOGREQUESTTYPE = "LogRequestType";
		public static readonly string PROPERTY_NAME_PRICE = "Price";
		public static readonly string PROPERTY_NAME_DEFAULTRATE = "DefaultRate";
		public static readonly string PROPERTY_NAME_CHANNELDETAILINFO = "ChannelDetailInfo";
		public static readonly string PROPERTY_NAME_UPPERID = "UpperID";
		public static readonly string PROPERTY_NAME_CHANNELSTATUS = "ChannelStatus";
		public static readonly string PROPERTY_NAME_ISDISABLE = "IsDisable";
		public static readonly string PROPERTY_NAME_CREATEBY = "CreateBy";
		public static readonly string PROPERTY_NAME_CREATEAT = "CreateAt";
		public static readonly string PROPERTY_NAME_LASTMODIFYBY = "LastModifyBy";
		public static readonly string PROPERTY_NAME_LASTMODIFYAT = "LastModifyAt";
		public static readonly string PROPERTY_NAME_LASTMODIFYCOMMENT = "LastModifyComment";
		
        #endregion


		#region Public Property
		/// <summary>
		/// 
		/// </summary>		
		public int Id
		{
			get
			{
				return entity.Id;
			}
			set
			{
				entity.Id = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string Name
		{
			get
			{
				return entity.Name;
			}
			set
			{
				entity.Name = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string Code
		{
			get
			{
				return entity.Code;
			}
			set
			{
				entity.Code = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string DataOkMessage
		{
			get
			{
				return entity.DataOkMessage;
			}
			set
			{
				entity.DataOkMessage = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string DataFailedMessage
		{
			get
			{
				return entity.DataFailedMessage;
			}
			set
			{
				entity.DataFailedMessage = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string Description
		{
			get
			{
				return entity.Description;
			}
			set
			{
				entity.Description = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string DataAdapterType
		{
			get
			{
				return entity.DataAdapterType;
			}
			set
			{
				entity.DataAdapterType = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string DataAdapterUrl
		{
			get
			{
				return entity.DataAdapterUrl;
			}
			set
			{
				entity.DataAdapterUrl = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string ChannelType
		{
			get
			{
				return entity.ChannelType;
			}
			set
			{
				entity.ChannelType = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string IVRFeeTimeType
		{
			get
			{
				return entity.IVRFeeTimeType;
			}
			set
			{
				entity.IVRFeeTimeType = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string IVRTimeFormat
		{
			get
			{
				return entity.IVRTimeFormat;
			}
			set
			{
				entity.IVRTimeFormat = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public bool IsStateReport
		{
			get
			{
				return entity.IsStateReport;
			}
			set
			{
				entity.IsStateReport = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string StateReportType
		{
			get
			{
				return entity.StateReportType;
			}
			set
			{
				entity.StateReportType = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string ReportOkMessage
		{
			get
			{
				return entity.ReportOkMessage;
			}
			set
			{
				entity.ReportOkMessage = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string ReportFailedMessage
		{
			get
			{
				return entity.ReportFailedMessage;
			}
			set
			{
				entity.ReportFailedMessage = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string StateReportParamName
		{
			get
			{
				return entity.StateReportParamName;
			}
			set
			{
				entity.StateReportParamName = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string StateReportParamValue
		{
			get
			{
				return entity.StateReportParamValue;
			}
			set
			{
				entity.StateReportParamValue = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string RequestTypeParamName
		{
			get
			{
				return entity.RequestTypeParamName;
			}
			set
			{
				entity.RequestTypeParamName = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string RequestTypeParamStateReportValue
		{
			get
			{
				return entity.RequestTypeParamStateReportValue;
			}
			set
			{
				entity.RequestTypeParamStateReportValue = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string RequestTypeParamDataReportValue
		{
			get
			{
				return entity.RequestTypeParamDataReportValue;
			}
			set
			{
				entity.RequestTypeParamDataReportValue = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public bool HasFilters
		{
			get
			{
				return entity.HasFilters;
			}
			set
			{
				entity.HasFilters = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public bool IsMonitorRequest
		{
			get
			{
				return entity.IsMonitorRequest;
			}
			set
			{
				entity.IsMonitorRequest = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public bool IsLogRequest
		{
			get
			{
				return entity.IsLogRequest;
			}
			set
			{
				entity.IsLogRequest = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public bool IsParamsConvert
		{
			get
			{
				return entity.IsParamsConvert;
			}
			set
			{
				entity.IsParamsConvert = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public bool IsAutoLinkID
		{
			get
			{
				return entity.IsAutoLinkID;
			}
			set
			{
				entity.IsAutoLinkID = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string AutoLinkIDFields
		{
			get
			{
				return entity.AutoLinkIDFields;
			}
			set
			{
				entity.AutoLinkIDFields = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string LogRequestType
		{
			get
			{
				return entity.LogRequestType;
			}
			set
			{
				entity.LogRequestType = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public decimal? Price
		{
			get
			{
				return entity.Price;
			}
			set
			{
				entity.Price = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public decimal? DefaultRate
		{
			get
			{
				return entity.DefaultRate;
			}
			set
			{
				entity.DefaultRate = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string ChannelDetailInfo
		{
			get
			{
				return entity.ChannelDetailInfo;
			}
			set
			{
				entity.ChannelDetailInfo = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public SPUpperWrapper UpperID
		{
			get
			{
				return SPUpperWrapper.ConvertEntityToWrapper(entity.UpperID) ;
			}
			set
			{
				entity.UpperID = ((value == null) ? null : value.entity);
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string ChannelStatus
		{
			get
			{
				return entity.ChannelStatus;
			}
			set
			{
				entity.ChannelStatus = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public bool IsDisable
		{
			get
			{
				return entity.IsDisable;
			}
			set
			{
				entity.IsDisable = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public int? CreateBy
		{
			get
			{
				return entity.CreateBy;
			}
			set
			{
				entity.CreateBy = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public DateTime? CreateAt
		{
			get
			{
				return entity.CreateAt;
			}
			set
			{
				entity.CreateAt = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public int? LastModifyBy
		{
			get
			{
				return entity.LastModifyBy;
			}
			set
			{
				entity.LastModifyBy = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public DateTime? LastModifyAt
		{
			get
			{
				return entity.LastModifyAt;
			}
			set
			{
				entity.LastModifyAt = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string LastModifyComment
		{
			get
			{
				return entity.LastModifyComment;
			}
			set
			{
				entity.LastModifyComment = value;
			}
		}
		#endregion 





        #region "FKQuery"
		
        public static List<SPChannelWrapper> FindAllByOrderByAndFilterAndUpperID(string orderByColumnName, bool isDesc,int pageIndex, int pageSize,    SPUpperWrapper upperID,  out int recordCount)
        {
            return ConvertToWrapperList(businessProxy.FindAllByOrderByAndFilterAndUpperID(orderByColumnName, isDesc,pageIndex, pageSize,   upperID.entity,out recordCount));
        }

        public static List<SPChannelWrapper> FindAllByUpperID(SPUpperWrapper upperID)
        {
            return ConvertToWrapperList(businessProxy.FindAllByUpperID(upperID.entity));
        }
		



        #endregion

        #region Static Common Data Operation
		
		internal static List<SPChannelWrapper> ConvertToWrapperList(List<SPChannelEntity> entitylist)
        {
            List<SPChannelWrapper> list = new List<SPChannelWrapper>();
            foreach (SPChannelEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }

		internal static List<SPChannelWrapper> ConvertToWrapperList(IList<SPChannelEntity> entitylist)
        {
            List<SPChannelWrapper> list = new List<SPChannelWrapper>();
            foreach (SPChannelEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }
		
		internal static List<SPChannelEntity> ConvertToEntityList(List<SPChannelWrapper> wrapperlist)
        {
            List<SPChannelEntity> list = new List<SPChannelEntity>();
            foreach (SPChannelWrapper wrapper in wrapperlist)
            {
                list.Add(wrapper.entity);
            }
            return list;
        }

        internal static SPChannelWrapper ConvertEntityToWrapper(SPChannelEntity entity)
        {
            if (entity == null)
                return null;
				
            if (entity.Id == 0)
                return null;

            return new SPChannelWrapper(entity);
        }
		
		#endregion

    }//End Class
}// End Namespace

