// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using Legendigital.Framework.Common.Bussiness.Interfaces;
using Legendigital.Framework.Common.Data.Interfaces;
using Legendigital.Framework.Common.Bussiness.NHibernate;
using SPS.Bussiness.ConstClass;
using SPS.Data.Tables;
using SPS.Entity.Tables;


namespace SPS.Bussiness.ServiceProxys.Tables
{
	public interface ISPCodeServiceProxy : IBaseSpringNHibernateEntityServiceProxy<SPCodeEntity> ,ISPCodeServiceProxyDesigner
    {
	    void QuickAddCode(SPCodeEntity codeEntity, bool hasSubCode, string subCode);
    }

    internal partial class SPCodeServiceProxy : ISPCodeServiceProxy
    {

        public static SPCodeEntity NewDefaultCode(SPChannelEntity channelEntity)
        {
            SPCodeEntity code = new SPCodeEntity();

            code.Name = channelEntity.Name + "默认编码";
            code.Description = channelEntity.Name + "默认编码";
            code.ChannelID = channelEntity;
            code.OrderIndex = 0;
            code.Code = channelEntity.Code + "DefaultCode";
            code.Mo  = "";
            code.MOType = DictionaryConst.Dictionary_CodeType_CodeDefault_Key;
            code.HasFilters = false;
            code.SPCode = "";
            code.CodeLength = 0;
            code.SPType = "";
            code.IsDiable = false;
            code.DayLimit = "";
            code.MonthLimit = "";
            code.SendText = "";
            code.Price = 0;

            return code;
        }

        public void QuickAddCode(SPCodeEntity codeEntity, bool hasSubCode, string subCode)
        {
            if (this.SelfDataObj.GetCodeByCode(codeEntity.Code)!=null)
            {
                throw new Exception("编码已存在！");
            }
            if (!codeEntity.HasFilters && this.SelfDataObj.GetCodeByMoAndSPCodeAndMoTypeAndNoFilter(codeEntity.Mo, codeEntity.SPCode, codeEntity.MOType) != null)
            {
                throw new Exception("该指令已存在！");
            }

            this.SelfDataObj.Save(codeEntity);

            if(codeEntity.MOType == DictionaryConst.Dictionary_CodeType_CodeStartWith_Key && hasSubCode)
            {
                string[] subcodes = subCode.Split(("|").ToCharArray());
                foreach (string subc in subcodes)
                {
                    SPCodeEntity subcode = new SPCodeEntity();

                    subcode.Name = codeEntity.Name + subc;
                    subcode.Description = codeEntity.Description;
                    subcode.Code = codeEntity.Code + subc;
                    subcode.ChannelID = codeEntity.ChannelID;
                    subcode.Mo = codeEntity.Mo + subc;
                    subcode.MOType = codeEntity.MOType;
                    subcode.OrderIndex = codeEntity.OrderIndex + 1;
                    subcode.SPCode = codeEntity.SPCode;
                    subcode.Province = codeEntity.Province;
                    subcode.DisableCity = codeEntity.DisableCity;
                    subcode.IsDiable = false;
                    subcode.SPType = "1";
                    subcode.CodeLength = codeEntity.Mo.Length;
                    subcode.DayLimit = codeEntity.DayLimit;
                    subcode.MonthLimit = codeEntity.MonthLimit;
                    subcode.Price = codeEntity.Price;
                    subcode.SendText = codeEntity.SendText;
                    subcode.HasFilters = codeEntity.HasFilters;
                    subcode.HasParamsConvert = codeEntity.HasParamsConvert;

                    this.SelfDataObj.Save(subcode);
                }
            }
 
        }
    }
}
