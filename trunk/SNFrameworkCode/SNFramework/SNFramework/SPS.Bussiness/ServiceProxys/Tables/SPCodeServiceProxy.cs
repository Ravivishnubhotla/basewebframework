// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using Legendigital.Framework.Common.BaseFramework.Bussiness.SystemConst;
using Legendigital.Framework.Common.Bussiness.Interfaces;
using Legendigital.Framework.Common.Data.Interfaces;
using Legendigital.Framework.Common.Bussiness.NHibernate;
using SPS.Bussiness.ConstClass;
using SPS.Bussiness.Wrappers;
using SPS.Data.Tables;
using SPS.Entity.Tables;
using Spring.Transaction.Interceptor;


namespace SPS.Bussiness.ServiceProxys.Tables
{
    public interface ISPCodeServiceProxy : IBaseSpringNHibernateEntityServiceProxy<SPCodeEntity, int>, ISPCodeServiceProxyDesigner
    {
	    void QuickAddCode(SPCodeEntity codeEntity, bool hasSubCode, string subCode);
        List<SPCodeEntity> FindAllByChannelIDAndClientIDAndMoAndSpNumber(int? channelId, int? clientId, string mo, string spcode);
    }

    internal partial class SPCodeServiceProxy : BaseSpringNHibernateEntityServiceProxy<SPCodeEntity,int>, ISPCodeServiceProxy
    {

        public static SPCodeEntity NewDefaultCode(SPChannelEntity channelEntity)
        {
            SPCodeEntity code = new SPCodeEntity();

            code.Name = channelEntity.Name + "默认编码";
            code.Description = channelEntity.Name + "默认编码";
            code.ChannelID = channelEntity;
            code.OrderIndex = 0;
            code.Code = channelEntity.Code + "DefaultCode";
            code.Mo  = "";
            code.MOLength = code.Mo.Length;
            code.MOType = DictionaryConst.Dictionary_CodeType_CodeDefault_Key;
            code.HasFilters = false;
            code.SPCodeType = DictionaryConst.Dictionary_CodeType_CodeDefault_Key;
            code.SPCode = "";
            code.SPCodeLength = code.SPCode.Length;
            code.IsDiable = false;
            //code.DayLimit = "";
            //code.MonthLimit = "";
            //code.SendText = "";
            code.Price = 0;

            return code;
        }

        [Transaction(ReadOnly = false)]
        public void QuickAddCode(SPCodeEntity codeEntity, bool hasSubCode, string subCode)
        {
            if (this.SelfDataObj.GetCodeByCode(codeEntity.Code)!=null)
            {
                throw new Exception("编码已存在！");
            }
            if (!codeEntity.HasFilters && this.SelfDataObj.GetCodeByMoAndSPCodeAndMoTypeAndNoFilter(codeEntity.Mo, codeEntity.SPCode, codeEntity.MOType, codeEntity.SPCodeType, codeEntity.CodeType, codeEntity.LimitProvince, codeEntity.LimitProvinceArea) != null)
            {
                throw new Exception("该指令已存在！");
            }

            this.SelfDataObj.Save(codeEntity);

            if(codeEntity.MOType == DictionaryConst.Dictionary_CodeType_CodeStartWith_Key && hasSubCode)
            {
                string[] subcodes = subCode.Split(("|").ToCharArray());
                foreach (string subc in subcodes)
                {
                    SPCodeEntity subcode = new SPCodeEntity();

                    subcode.Name = codeEntity.Name + subc;
                    subcode.Description = codeEntity.Description;
                    subcode.Code = codeEntity.Code + subc;
                    subcode.ChannelID = codeEntity.ChannelID;
                    subcode.Mo = codeEntity.Mo + subc;
                    subcode.MOType = codeEntity.MOType;
                    subcode.MOLength = subcode.Mo.Length;
                    subcode.SPCode = codeEntity.SPCode;
                    subcode.SPCodeType = "1";
                    subcode.SPCodeLength = subcode.SPCode.Length;

                    subcode.OrderIndex = codeEntity.OrderIndex + 1;

                    subcode.IsDiable = codeEntity.IsDiable;
                    subcode.IsMatchCase = codeEntity.IsMatchCase;
                    subcode.LimitProvince = false;
                    subcode.LimitProvinceArea = "";

                    subcode.ParentID = codeEntity;

                    subcode.HasPhoneLimit = false;
 
 
                    subcode.Price = codeEntity.Price;
 
                    subcode.HasFilters = false;
                    subcode.HasParamsConvert = false;

                    this.SelfDataObj.Save(subcode);
                }
            }
 
        }

        public List<SPCodeEntity> FindAllByChannelIDAndClientIDAndMoAndSpNumber(int? channelId, int? clientId, string mo, string spcode)
        {
            SPChannelEntity channel = null;
            if (channelId.HasValue)
                channel = this.DataObjectsContainerIocID.SPChannelDataObjectInstance.Load(channelId.Value);
            SPSClientEntity client = null;
            if (clientId.HasValue)
                client = this.DataObjectsContainerIocID.SPSClientDataObjectInstance.Load(clientId.Value);

            return
                this.DataObjectsContainerIocID.SPCodeDataObjectInstance.FindAllByChannelIDAndClientIDAndMoAndSpNumber(
                    channel, client, mo, spcode);
        }
    }
}
