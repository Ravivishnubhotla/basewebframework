// --------------------------------------------------------------------------------------------------------------------
// <copyright company="foreveross" file="SPAdAssignedHistortyServiceProxy.cs">
//   Copyright (c) Foreveross Enterprises. All rights reserved.
// </copyright>
// <summary>
//   Generated by MyGeneration Version # (1.3.0.9)
// </summary>
// --------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using Legendigital.Framework.Common.Bussiness.Interfaces;
using Legendigital.Framework.Common.Data.Interfaces;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;
using Legendigital.Framework.Common.Bussiness.NHibernate;
using SPS.Data.Tables;
using SPS.Entity.Tables;
using Spring.Transaction;
using Spring.Transaction.Interceptor;


namespace SPS.Bussiness.ServiceProxys.Tables
{
	public interface ISPAdAssignedHistortyServiceProxy : IBaseSpringNHibernateEntityServiceProxy<SPAdAssignedHistortyEntity,int> ,ISPAdAssignedHistortyServiceProxyDesigner
    {
	    List<SPAdPackEntity> FindAllCLientAssignedAdPack(SPSClientEntity client);
	    void ClientAssignedAdPack(SPSClientEntity spsClientEntity, SPAdPackEntity spAdPackEntity);
	    void RemoveAdAssigned(SPAdPackEntity spAdPackEntity, SPSClientEntity spsClientEntity);
	    SPSClientEntity GetAdPackAssignedClient(SPAdPackEntity spAdPackEntity);
    }

    internal partial class SPAdAssignedHistortyServiceProxy : BaseSpringNHibernateEntityServiceProxy<SPAdAssignedHistortyEntity, int>, ISPAdAssignedHistortyServiceProxy
    {
        public List<SPAdPackEntity> FindAllCLientAssignedAdPack(SPSClientEntity client)
        {
            List<SPAdAssignedHistortyEntity> adAssignedHistortys = this.SelfDataObj.FindAllCLientAssignedAdPack(client);

            List<SPAdPackEntity> spads = new List<SPAdPackEntity>();

            foreach (SPAdAssignedHistortyEntity assignedHistorty in adAssignedHistortys)
            {
                if(!spads.Contains(assignedHistorty.SPAdPackID))
                {
                    spads.Add(assignedHistorty.SPAdPackID);
                }
            }

            return spads;
        }

        [Transaction(TransactionPropagation.Required, ReadOnly = false)]
        public void ClientAssignedAdPack(SPSClientEntity spsClientEntity, SPAdPackEntity spAdPackEntity)
        {
            SPAdAssignedHistortyEntity spAdAssignedHistorty = this.SelfDataObj.FindAssignedHistortybyAdPack(spAdPackEntity);

            if(spAdAssignedHistorty!=null)
            {
                spAdAssignedHistorty.EndDate = System.DateTime.Now;

                this.SelfDataObj.Update(spAdAssignedHistorty);
            }

            SPAdAssignedHistortyEntity newspAdAssignedHistorty = new SPAdAssignedHistortyEntity();

            newspAdAssignedHistorty.SPAdID = spAdPackEntity.SPAdID.Id;
            newspAdAssignedHistorty.SPAdPackID = spAdPackEntity;
            newspAdAssignedHistorty.SPClientID = spsClientEntity;
            newspAdAssignedHistorty.StartDate = System.DateTime.Now;
            newspAdAssignedHistorty.CreateAt = System.DateTime.Now;

            this.SelfDataObj.Save(newspAdAssignedHistorty);
        }
        
        [Transaction(TransactionPropagation.Required, ReadOnly = false)]
        public void RemoveAdAssigned(SPAdPackEntity spAdPackEntity, SPSClientEntity spsClientEntity)
        {
            SPAdAssignedHistortyEntity spAdAssignedHistorty = this.SelfDataObj.FindAssignedHistortybyAdPack(spAdPackEntity);

            if (spAdAssignedHistorty != null)
            {
                spAdAssignedHistorty.EndDate = System.DateTime.Now;

                this.SelfDataObj.Update(spAdAssignedHistorty);
            }
        }

        public SPSClientEntity GetAdPackAssignedClient(SPAdPackEntity spAdPackEntity)
        {
            SPAdAssignedHistortyEntity spAdAssignedHistorty = this.SelfDataObj.FindAssignedHistortybyAdPack(spAdPackEntity);

            if (spAdAssignedHistorty != null)
            {
                return spAdAssignedHistorty.SPClientID;
            }

            return null;
        }
    }
}
