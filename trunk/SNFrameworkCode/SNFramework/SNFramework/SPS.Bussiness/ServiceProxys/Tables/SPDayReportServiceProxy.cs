// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Data;
using System.Text;
using Legendigital.Framework.Common.Bussiness.Interfaces;
using Legendigital.Framework.Common.Data.Interfaces;
using Legendigital.Framework.Common.Bussiness.NHibernate;
using SPS.Bussiness.Wrappers;
using SPS.Data.AdoNet;
using SPS.Data.Tables;
using SPS.Entity.Tables;
using Spring.Transaction.Interceptor;


namespace SPS.Bussiness.ServiceProxys.Tables
{
    public interface ISPDayReportServiceProxy : IBaseSpringNHibernateEntityServiceProxy<SPDayReportEntity, int>, ISPDayReportServiceProxyDesigner
    {


        List<SPDayReportEntity> CaculateReport(DateTime reportDate);
	    void ReBulidReport(DateTime date);
	    List<SPDayReportEntity> QueryReport(DateTime startDate, DateTime endDate);
	    List<SPDayReportEntity> CaculateReport(DateTime reportDate, SPSClientEntity clientEntity);
	    List<SPDayReportEntity> QueryReport(DateTime startDate, DateTime endDate, SPSClientEntity clientEntity);
        DataSet QueryRecordProvine(DateTime? startDate, DateTime? endDate, DayReportType dayReportType, int? channelId, int? codeID, int? clientID);

	    DataSet QueryChannelInvoiceReport(DateTime? startDate, DateTime? endDate, int? channelId, int? codeId);
	    DataSet QueryClientInvoiceReport(DateTime? startDate, DateTime? endDate, int? clientId, int? codeId);
	    DataSet QueryChannelOperatorReport(DateTime? startDate, DateTime? endDate, int? channelId, int? codeId);
	    DataSet QueryClientOperatorReport(DateTime? startDate, DateTime? endDate, int? clientId, int? codeId);
	    DataSet QueryChannelProvinceReport(DateTime? startDate, DateTime? endDate, int? channelId, int? codeId);
	    DataSet QueryClientProvinceReport(DateTime? startDate, DateTime? endDate, int? clientId, int? codeId);
    }

    internal partial class SPDayReportServiceProxy : ISPDayReportServiceProxy
    {
        public List<SPDayReportEntity> CaculateReport(DateTime reportDate)
        {
            DataTable dtAll = AdoNetDb.CaculateReport(reportDate, DayReportType.AllUp);
            DataTable dtAllUpSuccess = AdoNetDb.CaculateReport(reportDate, DayReportType.AllUpSuccess);
            DataTable dtIntercept = AdoNetDb.CaculateReport(reportDate, DayReportType.Intercept);
            DataTable dtDown = AdoNetDb.CaculateReport(reportDate, DayReportType.Down);
            DataTable dtDownNotSycn = AdoNetDb.CaculateReport(reportDate, DayReportType.DownNotSycn);
            DataTable dtDownSycnFailed = AdoNetDb.CaculateReport(reportDate, DayReportType.DownSycnFailed);
            DataTable dtDownSycnSuccess = AdoNetDb.CaculateReport(reportDate, DayReportType.DownSycnSuccess);

            List<SPDayReportEntity> spDayReportEntities = new List<SPDayReportEntity>();

            foreach (DataRow dataRow in dtAll.Rows)
            {
                int channelID = (int) dataRow["ChannelID"];
                int clientID = (int) dataRow["ClientID"];
                int codeID = (int) dataRow["CodeID"];

                SPDayReportEntity spDayReport = new SPDayReportEntity();
                spDayReport.ReportDate = reportDate.Date;
                spDayReport.ChannelID =  this.DataObjectsContainerIocID.SPChannelDataObjectInstance.Load(channelID);
                spDayReport.ClientID = this.DataObjectsContainerIocID.SPSClientDataObjectInstance.Load(clientID);
                spDayReport.CodeID = this.DataObjectsContainerIocID.SPCodeDataObjectInstance.Load(codeID);
                spDayReport.TotalCount = (int) dataRow["RecordCount"];
                spDayReport.TotalSuccessCount = FindCountInDataTable(dtAllUpSuccess, channelID, clientID, codeID);
                spDayReport.InterceptCount = FindCountInDataTable(dtIntercept, channelID, clientID, codeID);
                spDayReport.DownTotalCount = FindCountInDataTable(dtDown, channelID, clientID, codeID);
                spDayReport.DownSycnSuccess = FindCountInDataTable(dtDownSycnSuccess, channelID, clientID, codeID);
                spDayReport.DownNotSycn = FindCountInDataTable(dtDownNotSycn, channelID, clientID, codeID);
                spDayReport.DownSycnFailed = FindCountInDataTable(dtDownSycnFailed, channelID, clientID, codeID);

                spDayReportEntities.Add(spDayReport);

            }

            return spDayReportEntities;
        }

        public List<SPDayReportEntity> CaculateReport(DateTime reportDate, SPSClientEntity clientEntity)
        {
            DataTable dtDown = AdoNetDb.CaculateReport(reportDate, DayReportType.Down, clientEntity);
            DataTable dtDownNotSycn = AdoNetDb.CaculateReport(reportDate, DayReportType.DownNotSycn, clientEntity);
            DataTable dtDownSycnFailed = AdoNetDb.CaculateReport(reportDate, DayReportType.DownSycnFailed, clientEntity);
            DataTable dtDownSycnSuccess = AdoNetDb.CaculateReport(reportDate, DayReportType.DownSycnSuccess, clientEntity);

            List<SPDayReportEntity> spDayReportEntities = new List<SPDayReportEntity>();

            foreach (DataRow dataRow in dtDown.Rows)
            {
                int channelID = (int)dataRow["ChannelID"];
                int clientID = clientEntity.Id;
                int codeID = (int)dataRow["CodeID"];

                SPDayReportEntity spDayReport = new SPDayReportEntity();
                spDayReport.ReportDate = reportDate.Date;
                spDayReport.ChannelID = this.DataObjectsContainerIocID.SPChannelDataObjectInstance.Load(channelID);
                spDayReport.ClientID = this.DataObjectsContainerIocID.SPSClientDataObjectInstance.Load(clientID);
                spDayReport.CodeID = this.DataObjectsContainerIocID.SPCodeDataObjectInstance.Load(codeID);
                spDayReport.DownTotalCount = FindCountInDataTable(dtDown, channelID, codeID);
                spDayReport.DownSycnSuccess = FindCountInDataTable(dtDownSycnSuccess, channelID, codeID);
                spDayReport.DownNotSycn = FindCountInDataTable(dtDownNotSycn, channelID, codeID);
                spDayReport.DownSycnFailed = FindCountInDataTable(dtDownSycnFailed, channelID, codeID);

                spDayReportEntities.Add(spDayReport);

            }

            return spDayReportEntities;
        }

        public List<SPDayReportEntity> QueryReport(DateTime startDate, DateTime endDate, SPSClientEntity clientEntity)
        {
            return SelfDataObj.QueryReport(startDate.Date, endDate.Date,clientEntity);
        }

        public DataSet QueryRecordProvine(DateTime? startDate, DateTime? endDate, DayReportType dayReportType, int? channelId, int? codeID, int? clientID)
        {
            return AdoNetDb.QueryRecordProvine(startDate, endDate, dayReportType, channelId, codeID, clientID);
        }

        public DataSet QueryChannelInvoiceReport(DateTime? startDate, DateTime? endDate, int? channelId, int? codeId)
        {
            return AdoNetDb.QueryChannelInvoiceReport(startDate, endDate, channelId, codeId);
        }

        public DataSet QueryClientInvoiceReport(DateTime? startDate, DateTime? endDate, int? clientId, int? codeId)
        {
            return AdoNetDb.QueryClientInvoiceReport(startDate, endDate, clientId, codeId);
        }

        public DataSet QueryChannelOperatorReport(DateTime? startDate, DateTime? endDate, int? channelId, int? codeId)
        {
            return AdoNetDb.QueryChannelOperatorReport(startDate, endDate, channelId, codeId);
        }

        public DataSet QueryClientOperatorReport(DateTime? startDate, DateTime? endDate, int? clientId, int? codeId)
        {
            return AdoNetDb.QueryClientOperatorReport(startDate, endDate, clientId, codeId);
        }

        public DataSet QueryChannelProvinceReport(DateTime? startDate, DateTime? endDate, int? channelId, int? codeId)
        {
            return AdoNetDb.QueryChannelProvinceReport(startDate, endDate, channelId, codeId);
        }

        public DataSet QueryClientProvinceReport(DateTime? startDate, DateTime? endDate, int? clientId, int? codeId)
        {
            return AdoNetDb.QueryClientProvinceReport(startDate, endDate, clientId, codeId);
        }


        [Transaction(ReadOnly = false)]
        public void ReBulidReport(DateTime date)
        {
            this.AdoNetDb.RestAllReportedData(date);

            List<SPDayReportEntity> allReports = this.SelfDataObj.FindByDate(date);

            foreach (SPDayReportEntity spDayReportEntity in allReports)
            {
                this.SelfDataObj.Delete(spDayReportEntity);
            }

            List<SPDayReportEntity> generateReports = CaculateReport(date);

            foreach (SPDayReportEntity spDayReportEntity in generateReports)
            {
                this.SelfDataObj.Save(spDayReportEntity);
            }

            this.AdoNetDb.ClearAllReportedData(date);
        }

        public List<SPDayReportEntity> QueryReport(DateTime startDate, DateTime endDate)
        {
            return SelfDataObj.QueryReport(startDate.Date, endDate.Date);
        }


        private int FindCountInDataTable(DataTable dtIntercept, int channelId, int codeId)
        {
            string filterSql = string.Format("  ChannelID = {0} and CodeID ={1} ",  channelId, codeId);

            DataRow[] drs = dtIntercept.Select(filterSql);

            if (drs.Length > 0)
            {
                return (int)drs[0]["RecordCount"];
            }

            return 0;
        }

        private int FindCountInDataTable(DataTable dtIntercept, int channelId, int clientId, int codeId)
        {
            string filterSql = string.Format(" ClientID = {0} and ChannelID = {1} and CodeID ={2} ", clientId, channelId, codeId);

            DataRow[] drs = dtIntercept.Select(filterSql);

            if(drs.Length>0)
            {
                return (int) drs[0]["RecordCount"];
            }

            return 0;
        }
    }
}
