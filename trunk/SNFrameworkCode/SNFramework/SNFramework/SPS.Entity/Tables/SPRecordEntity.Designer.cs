// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;

namespace SPS.Entity.Tables
{
	/// <summary>
	///	
	/// </summary>
	[DataContract]
	public partial class SPRecordEntity : ICloneable
	{
        #region 公共常量

		public static readonly string CLASS_FULL_NAME = "SPS.Entity.Tables.SPRecordEntity";
		public static readonly string PROPERTY_NAME_ID = "Id";
		public static readonly string PROPERTY_NAME_LINKID = "LinkID";
		public static readonly string PROPERTY_NAME_MO = "Mo";
		public static readonly string PROPERTY_NAME_MOBILE = "Mobile";
		public static readonly string PROPERTY_NAME_SPNUMBER = "SpNumber";
		public static readonly string PROPERTY_NAME_PROVINCE = "Province";
		public static readonly string PROPERTY_NAME_CITY = "City";
		public static readonly string PROPERTY_NAME_CREATEDATE = "CreateDate";
		public static readonly string PROPERTY_NAME_ISREPORT = "IsReport";
		public static readonly string PROPERTY_NAME_ISINTERCEPT = "IsIntercept";
		public static readonly string PROPERTY_NAME_ISSYCNTOCLIENT = "IsSycnToClient";
		public static readonly string PROPERTY_NAME_ISSYCNSUCCESSED = "IsSycnSuccessed";
		public static readonly string PROPERTY_NAME_ISSTATOK = "IsStatOK";
		public static readonly string PROPERTY_NAME_SYCNRETRYTIMES = "SycnRetryTimes";
		public static readonly string PROPERTY_NAME_CHANNELID = "ChannelID";
		public static readonly string PROPERTY_NAME_CLIENTID = "ClientID";
		public static readonly string PROPERTY_NAME_CODEID = "CodeID";
		public static readonly string PROPERTY_NAME_PRICE = "Price";
		public static readonly string PROPERTY_NAME_COUNT = "Count";
		
        #endregion
	
        #region 私有成员变量

		private bool _isChanged;		
		private bool _isDeleted;
		
		private int _id;
		private string _linkID;
		private string _mo;
		private string _mobile;
		private string _spNumber;
		private string _province;
		private string _city;
		private DateTime? _createDate;
		private bool? _isReport;
		private bool? _isIntercept;
		private bool? _isSycnToClient;
		private bool? _isSycnSuccessed;
		private bool? _isStatOK;
		private int? _sycnRetryTimes;
		private SPChannelEntity _channelID;
		private SPSClientEntity _clientID;
		private SPCodeEntity _codeID;
		private decimal? _price;
		private int? _count;
		
		#endregion

		#region 构造函数
		/// <summary>
		/// 默认构造函数
		/// </summary>
		public SPRecordEntity()
		{
			_id = 0;
			_linkID = null;
			_mo = null;
			_mobile = null;
			_spNumber = null;
			_province = null;
			_city = null;
			_createDate = null;
			_isReport = null;
			_isIntercept = null;
			_isSycnToClient = null;
			_isSycnSuccessed = null;
			_isStatOK = null;
			_sycnRetryTimes = null;
			_channelID = null;
			_clientID = null;
			_codeID = null;
			_price = null;
			_count = null;
		}
		#endregion

		#region 全构造函数
		/// <summary>
		/// 全构造函数
		/// </summary>
		public SPRecordEntity( int id, string linkID, string mo, string mobile, string spNumber, string province, string city, DateTime? createDate, bool? isReport, bool? isIntercept, bool? isSycnToClient, bool? isSycnSuccessed, bool? isStatOK, int? sycnRetryTimes, SPChannelEntity channelID, SPSClientEntity clientID, SPCodeEntity codeID, decimal? price, int? count)
		{
			_id = id;
			_linkID = linkID;
			_mo = mo;
			_mobile = mobile;
			_spNumber = spNumber;
			_province = province;
			_city = city;
			_createDate = createDate;
			_isReport = isReport;
			_isIntercept = isIntercept;
			_isSycnToClient = isSycnToClient;
			_isSycnSuccessed = isSycnSuccessed;
			_isStatOK = isStatOK;
			_sycnRetryTimes = sycnRetryTimes;
			_channelID = channelID;
			_clientID = clientID;
			_codeID = codeID;
			_price = price;
			_count = count;
		}
		#endregion     
	
	    #region 公共属性

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual int Id
		{
			get { return _id; }

			set	
			{
				_isChanged |= (_id != value); _id = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string LinkID
		{
			get { return _linkID; }

			set	
			{

				if( value != null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for LinkID", value, value.ToString());
				_isChanged |= (_linkID != value); _linkID = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string Mo
		{
			get { return _mo; }

			set	
			{

				if( value != null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Mo", value, value.ToString());
				_isChanged |= (_mo != value); _mo = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string Mobile
		{
			get { return _mobile; }

			set	
			{

				if( value != null && value.Length > 40)
					throw new ArgumentOutOfRangeException("Invalid value for Mobile", value, value.ToString());
				_isChanged |= (_mobile != value); _mobile = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string SpNumber
		{
			get { return _spNumber; }

			set	
			{

				if( value != null && value.Length > 40)
					throw new ArgumentOutOfRangeException("Invalid value for SpNumber", value, value.ToString());
				_isChanged |= (_spNumber != value); _spNumber = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string Province
		{
			get { return _province; }

			set	
			{

				if( value != null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Province", value, value.ToString());
				_isChanged |= (_province != value); _province = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string City
		{
			get { return _city; }

			set	
			{

				if( value != null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for City", value, value.ToString());
				_isChanged |= (_city != value); _city = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual DateTime? CreateDate
		{
			get { return _createDate; }

			set	
			{
				_isChanged |= (_createDate != value); _createDate = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual bool? IsReport
		{
			get { return _isReport; }

			set	
			{
				_isChanged |= (_isReport != value); _isReport = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual bool? IsIntercept
		{
			get { return _isIntercept; }

			set	
			{
				_isChanged |= (_isIntercept != value); _isIntercept = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual bool? IsSycnToClient
		{
			get { return _isSycnToClient; }

			set	
			{
				_isChanged |= (_isSycnToClient != value); _isSycnToClient = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual bool? IsSycnSuccessed
		{
			get { return _isSycnSuccessed; }

			set	
			{
				_isChanged |= (_isSycnSuccessed != value); _isSycnSuccessed = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual bool? IsStatOK
		{
			get { return _isStatOK; }

			set	
			{
				_isChanged |= (_isStatOK != value); _isStatOK = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual int? SycnRetryTimes
		{
			get { return _sycnRetryTimes; }

			set	
			{
				_isChanged |= (_sycnRetryTimes != value); _sycnRetryTimes = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual SPChannelEntity ChannelID
		{
			get { return _channelID; }

			set	
			{
				_isChanged |= (_channelID != value); _channelID = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual SPSClientEntity ClientID
		{
			get { return _clientID; }

			set	
			{
				_isChanged |= (_clientID != value); _clientID = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual SPCodeEntity CodeID
		{
			get { return _codeID; }

			set	
			{
				_isChanged |= (_codeID != value); _codeID = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual decimal? Price
		{
			get { return _price; }

			set	
			{
				_isChanged |= (_price != value); _price = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual int? Count
		{
			get { return _count; }

			set	
			{
				_isChanged |= (_count != value); _count = value;
			}
		}
		/// <summary>
		/// 返回对象是否被改变。
		/// </summary>
		public virtual bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public virtual bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 

        #region 公共方法
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public virtual void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion

		#region Equals 和 HashCode 方法覆盖
		/// <summary>
		/// local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals( object obj )
		{
			if( this == obj ) return true;
			
			if( ( obj == null ) || ( obj.GetType() != this.GetType() ) ) return false;
			
			SPRecordEntity castObj = (SPRecordEntity)obj;
			
			return ( castObj != null ) && ( this._id == castObj.Id );
		}
		
		/// <summary>
		/// local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			
			int hash = 57; 
			hash = 27 * hash * _id.GetHashCode();

			return hash; 
		}
		#endregion
	
		#region ICloneable methods
		
		public virtual object Clone()
		{
			return this.MemberwiseClone();
		}
		
		#endregion
	
	}
}
