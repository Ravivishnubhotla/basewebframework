// --------------------------------------------------------------------------------------------------------------------
// <copyright company="foreveross" file="SPSDataSycnSettingEntity.Designer.cs">
//   Copyright (c) Foreveross Enterprises. All rights reserved.
// </copyright>
// <summary>
//   Generated by MyGeneration Version # (1.3.0.9)
// </summary>
// --------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Legendigital.Framework.Common.Entity;

namespace SPS.Entity.Tables
{
	/// <summary>
	///	
	/// </summary>
	[DataContract]
	public partial class SPSDataSycnSettingEntity  : BaseTableEntity<int>,ICloneable
	{
      #region 公共常量

		public static readonly string CLASS_FULL_NAME = "SPS.Entity.Tables.SPSDataSycnSettingEntity";
		public static readonly string PROPERTY_NAME_ID = "Id";
		public static readonly string PROPERTY_NAME_SYCNRETRYTIMES = "SycnRetryTimes";
		public static readonly string PROPERTY_NAME_SYNCTYPE = "SyncType";
		public static readonly string PROPERTY_NAME_SYCNMO = "SycnMO";
		public static readonly string PROPERTY_NAME_SYCNMOURL = "SycnMOUrl";
		public static readonly string PROPERTY_NAME_SYCNMOOKMESSAGE = "SycnMOOkMessage";
		public static readonly string PROPERTY_NAME_SYCNMOFAILEDMESSAGE = "SycnMOFailedMessage";
		public static readonly string PROPERTY_NAME_SYCNMR = "SycnMR";
		public static readonly string PROPERTY_NAME_SYCNMRURL = "SycnMRUrl";
		public static readonly string PROPERTY_NAME_SYCNMROKMESSAGE = "SycnMROkMessage";
		public static readonly string PROPERTY_NAME_SYCNMRFAILEDMESSAGE = "SycnMRFailedMessage";
		public static readonly string PROPERTY_NAME_SYCNSATE = "SycnSate";
		public static readonly string PROPERTY_NAME_SYCNSATEURL = "SycnSateUrl";
		public static readonly string PROPERTY_NAME_SYCNSATEOKMESSAGE = "SycnSateOkMessage";
		public static readonly string PROPERTY_NAME_SYCNSATEFAILEDMESSAGE = "SycnSateFailedMessage";
		
        #endregion
	
 
      	
	
	
		 
		
		
		
		
	
        #region 私有成员变量

 
		
		private int _id;
		private int? _sycnRetryTimes;
		private string _syncType;
		private bool? _sycnMO;
		private string _sycnMOUrl;
		private string _sycnMOOkMessage;
		private string _sycnMOFailedMessage;
		private bool? _sycnMR;
		private string _sycnMRUrl;
		private string _sycnMROkMessage;
		private string _sycnMRFailedMessage;
		private bool? _sycnSate;
		private string _sycnSateUrl;
		private string _sycnSateOkMessage;
		private string _sycnSateFailedMessage;
		
		#endregion

		#region 构造函数
		/// <summary>
		/// 默认构造函数
		/// </summary>
		public SPSDataSycnSettingEntity()
		{
			_id = 0;
			_sycnRetryTimes = null;
			_syncType = null;
			_sycnMO = null;
			_sycnMOUrl = null;
			_sycnMOOkMessage = null;
			_sycnMOFailedMessage = null;
			_sycnMR = null;
			_sycnMRUrl = null;
			_sycnMROkMessage = null;
			_sycnMRFailedMessage = null;
			_sycnSate = null;
			_sycnSateUrl = null;
			_sycnSateOkMessage = null;
			_sycnSateFailedMessage = null;
		}
		#endregion

		#region 全构造函数
		/// <summary>
		/// 全构造函数
		/// </summary>
		public SPSDataSycnSettingEntity( int id, int? sycnRetryTimes, string syncType, bool? sycnMO, string sycnMOUrl, string sycnMOOkMessage, string sycnMOFailedMessage, bool? sycnMR, string sycnMRUrl, string sycnMROkMessage, string sycnMRFailedMessage, bool? sycnSate, string sycnSateUrl, string sycnSateOkMessage, string sycnSateFailedMessage)
		{
			_id = id;
			_sycnRetryTimes = sycnRetryTimes;
			_syncType = syncType;
			_sycnMO = sycnMO;
			_sycnMOUrl = sycnMOUrl;
			_sycnMOOkMessage = sycnMOOkMessage;
			_sycnMOFailedMessage = sycnMOFailedMessage;
			_sycnMR = sycnMR;
			_sycnMRUrl = sycnMRUrl;
			_sycnMROkMessage = sycnMROkMessage;
			_sycnMRFailedMessage = sycnMRFailedMessage;
			_sycnSate = sycnSate;
			_sycnSateUrl = sycnSateUrl;
			_sycnSateOkMessage = sycnSateOkMessage;
			_sycnSateFailedMessage = sycnSateFailedMessage;
		}
		#endregion     
	
	    #region 公共属性

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual int Id
		{
			get { return _id; }

			set	
			{
				_isChanged |= (_id != value); _id = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual int? SycnRetryTimes
		{
			get { return _sycnRetryTimes; }

			set	
			{
				_isChanged |= (_sycnRetryTimes != value); _sycnRetryTimes = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string SyncType
		{
			get { return _syncType; }

			set	
			{

				if( value != null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for SyncType", value, value.ToString());
				_isChanged |= (_syncType != value); _syncType = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual bool? SycnMO
		{
			get { return _sycnMO; }

			set	
			{
				_isChanged |= (_sycnMO != value); _sycnMO = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string SycnMOUrl
		{
			get { return _sycnMOUrl; }

			set	
			{

				if( value != null && value.Length > 400)
					throw new ArgumentOutOfRangeException("Invalid value for SycnMOUrl", value, value.ToString());
				_isChanged |= (_sycnMOUrl != value); _sycnMOUrl = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string SycnMOOkMessage
		{
			get { return _sycnMOOkMessage; }

			set	
			{

				if( value != null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for SycnMOOkMessage", value, value.ToString());
				_isChanged |= (_sycnMOOkMessage != value); _sycnMOOkMessage = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string SycnMOFailedMessage
		{
			get { return _sycnMOFailedMessage; }

			set	
			{

				if( value != null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for SycnMOFailedMessage", value, value.ToString());
				_isChanged |= (_sycnMOFailedMessage != value); _sycnMOFailedMessage = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual bool? SycnMR
		{
			get { return _sycnMR; }

			set	
			{
				_isChanged |= (_sycnMR != value); _sycnMR = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string SycnMRUrl
		{
			get { return _sycnMRUrl; }

			set	
			{

				if( value != null && value.Length > 400)
					throw new ArgumentOutOfRangeException("Invalid value for SycnMRUrl", value, value.ToString());
				_isChanged |= (_sycnMRUrl != value); _sycnMRUrl = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string SycnMROkMessage
		{
			get { return _sycnMROkMessage; }

			set	
			{

				if( value != null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for SycnMROkMessage", value, value.ToString());
				_isChanged |= (_sycnMROkMessage != value); _sycnMROkMessage = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string SycnMRFailedMessage
		{
			get { return _sycnMRFailedMessage; }

			set	
			{

				if( value != null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for SycnMRFailedMessage", value, value.ToString());
				_isChanged |= (_sycnMRFailedMessage != value); _sycnMRFailedMessage = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual bool? SycnSate
		{
			get { return _sycnSate; }

			set	
			{
				_isChanged |= (_sycnSate != value); _sycnSate = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string SycnSateUrl
		{
			get { return _sycnSateUrl; }

			set	
			{

				if( value != null && value.Length > 400)
					throw new ArgumentOutOfRangeException("Invalid value for SycnSateUrl", value, value.ToString());
				_isChanged |= (_sycnSateUrl != value); _sycnSateUrl = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string SycnSateOkMessage
		{
			get { return _sycnSateOkMessage; }

			set	
			{

				if( value != null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for SycnSateOkMessage", value, value.ToString());
				_isChanged |= (_sycnSateOkMessage != value); _sycnSateOkMessage = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string SycnSateFailedMessage
		{
			get { return _sycnSateFailedMessage; }

			set	
			{

				if( value != null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for SycnSateFailedMessage", value, value.ToString());
				_isChanged |= (_sycnSateFailedMessage != value); _sycnSateFailedMessage = value;
			}
		}
	

		#endregion 

        

		#region Equals 和 HashCode 方法覆盖
		/// <summary>
		/// local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals( object obj )
		{
			 return this.CheckEquals(obj as SPSDataSycnSettingEntity);
		}
		
		/// <summary>
		/// local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			return GetEntityHashCode();
		}
		#endregion
		
		public override int GetDataEntityKey()
	    {
	        return this._id;
	    }
		
		
	
		#region ICloneable methods
		
		public virtual object Clone()
		{
			return this.MemberwiseClone();
		}
		
		#endregion
	
	}
}
