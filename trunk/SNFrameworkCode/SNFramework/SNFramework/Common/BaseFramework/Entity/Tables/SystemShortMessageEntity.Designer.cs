// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Legendigital.Framework.Common.Entity;

namespace Legendigital.Framework.Common.BaseFramework.Entity.Tables
{
	/// <summary>
	///	
	/// </summary>
	[DataContract]
	public partial class SystemShortMessageEntity  : BaseTableEntity,ICloneable
	{
      #region 公共常量

		public static readonly string CLASS_FULL_NAME = "Legendigital.Framework.Common.BaseFramework.Entity.Tables.SystemShortMessageEntity";
		public static readonly string PROPERTY_NAME_SHORTMESSAGEID = "ShortMessageID";
		public static readonly string PROPERTY_NAME_SHORTMESSAGETITLE = "ShortMessageTitle";
		public static readonly string PROPERTY_NAME_SHORTMESSAGECATEGORY = "ShortMessageCategory";
		public static readonly string PROPERTY_NAME_SHORTMESSAGECONTENT = "ShortMessageContent";
		public static readonly string PROPERTY_NAME_SHORTMESSAGESENDERNAME = "ShortMessageSenderName";
		public static readonly string PROPERTY_NAME_SHORTMESSAGETONAME = "ShortMessageToName";
		public static readonly string PROPERTY_NAME_SHORTMESSAGESENDDATE = "ShortMessageSendDate";
		public static readonly string PROPERTY_NAME_SHORTMESSAGESENDUSERID = "ShortMessageSendUserID";
		public static readonly string PROPERTY_NAME_SHORTMESSAGERECEIVERUSERID = "ShortMessageReceiverUserID";
		public static readonly string PROPERTY_NAME_SHORTMESSAGEISREAD = "ShortMessageIsRead";
		public static readonly string PROPERTY_NAME_SHORTMESSAGETYPE = "ShortMessageType";
		public static readonly string PROPERTY_NAME_CREATEBY = "CreateBy";
		public static readonly string PROPERTY_NAME_CREATEAT = "CreateAt";
		public static readonly string PROPERTY_NAME_LASTMODIFYBY = "LastModifyBy";
		public static readonly string PROPERTY_NAME_LASTMODIFYAT = "LastModifyAt";
		public static readonly string PROPERTY_NAME_LASTMODIFYCOMMENT = "LastModifyComment";
		
        #endregion
	
 
      	
	
	
		 
		
		
		
		
	
        #region 私有成员变量

 
		
		private int _shortMessageID;
		private string _shortMessageTitle;
		private string _shortMessageCategory;
		private string _shortMessageContent;
		private string _shortMessageSenderName;
		private string _shortMessageToName;
		private DateTime _shortMessageSendDate;
		private int? _shortMessageSendUserID;
		private int _shortMessageReceiverUserID;
		private bool _shortMessageIsRead;
		private string _shortMessageType;
		private int? _createBy;
		private DateTime? _createAt;
		private int? _lastModifyBy;
		private DateTime? _lastModifyAt;
		private string _lastModifyComment;
		
		#endregion

		#region 构造函数
		/// <summary>
		/// 默认构造函数
		/// </summary>
		public SystemShortMessageEntity()
		{
			_shortMessageID = 0;
			_shortMessageTitle = String.Empty;
			_shortMessageCategory = null;
			_shortMessageContent = null;
			_shortMessageSenderName = null;
			_shortMessageToName = null;
			_shortMessageSendDate = DateTime.MinValue;
			_shortMessageSendUserID = null;
			_shortMessageReceiverUserID = 0;
			_shortMessageIsRead = false;
			_shortMessageType = null;
			_createBy = null;
			_createAt = null;
			_lastModifyBy = null;
			_lastModifyAt = null;
			_lastModifyComment = null;
		}
		#endregion

		#region 全构造函数
		/// <summary>
		/// 全构造函数
		/// </summary>
		public SystemShortMessageEntity( int shortMessageID, string shortMessageTitle, string shortMessageCategory, string shortMessageContent, string shortMessageSenderName, string shortMessageToName, DateTime shortMessageSendDate, int? shortMessageSendUserID, int shortMessageReceiverUserID, bool shortMessageIsRead, string shortMessageType, int? createBy, DateTime? createAt, int? lastModifyBy, DateTime? lastModifyAt, string lastModifyComment)
		{
			_shortMessageID = shortMessageID;
			_shortMessageTitle = shortMessageTitle;
			_shortMessageCategory = shortMessageCategory;
			_shortMessageContent = shortMessageContent;
			_shortMessageSenderName = shortMessageSenderName;
			_shortMessageToName = shortMessageToName;
			_shortMessageSendDate = shortMessageSendDate;
			_shortMessageSendUserID = shortMessageSendUserID;
			_shortMessageReceiverUserID = shortMessageReceiverUserID;
			_shortMessageIsRead = shortMessageIsRead;
			_shortMessageType = shortMessageType;
			_createBy = createBy;
			_createAt = createAt;
			_lastModifyBy = lastModifyBy;
			_lastModifyAt = lastModifyAt;
			_lastModifyComment = lastModifyComment;
		}
		#endregion     
	
	    #region 公共属性

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual int ShortMessageID
		{
			get { return _shortMessageID; }

			set	
			{
				_isChanged |= (_shortMessageID != value); _shortMessageID = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string ShortMessageTitle
		{
			get { return _shortMessageTitle; }

			set	
			{

				if( value != null && value.Length > 400)
					throw new ArgumentOutOfRangeException("Invalid value for ShortMessageTitle", value, value.ToString());
				_isChanged |= (_shortMessageTitle != value); _shortMessageTitle = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string ShortMessageCategory
		{
			get { return _shortMessageCategory; }

			set	
			{

				if( value != null && value.Length > 400)
					throw new ArgumentOutOfRangeException("Invalid value for ShortMessageCategory", value, value.ToString());
				_isChanged |= (_shortMessageCategory != value); _shortMessageCategory = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string ShortMessageContent
		{
			get { return _shortMessageContent; }

			set	
			{

				if( value != null && value.Length > 8000)
					throw new ArgumentOutOfRangeException("Invalid value for ShortMessageContent", value, value.ToString());
				_isChanged |= (_shortMessageContent != value); _shortMessageContent = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string ShortMessageSenderName
		{
			get { return _shortMessageSenderName; }

			set	
			{

				if( value != null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for ShortMessageSenderName", value, value.ToString());
				_isChanged |= (_shortMessageSenderName != value); _shortMessageSenderName = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string ShortMessageToName
		{
			get { return _shortMessageToName; }

			set	
			{

				if( value != null && value.Length > 1000)
					throw new ArgumentOutOfRangeException("Invalid value for ShortMessageToName", value, value.ToString());
				_isChanged |= (_shortMessageToName != value); _shortMessageToName = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual DateTime ShortMessageSendDate
		{
			get { return _shortMessageSendDate; }

			set	
			{
				_isChanged |= (_shortMessageSendDate != value); _shortMessageSendDate = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual int? ShortMessageSendUserID
		{
			get { return _shortMessageSendUserID; }

			set	
			{
				_isChanged |= (_shortMessageSendUserID != value); _shortMessageSendUserID = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual int ShortMessageReceiverUserID
		{
			get { return _shortMessageReceiverUserID; }

			set	
			{
				_isChanged |= (_shortMessageReceiverUserID != value); _shortMessageReceiverUserID = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual bool ShortMessageIsRead
		{
			get { return _shortMessageIsRead; }

			set	
			{
				_isChanged |= (_shortMessageIsRead != value); _shortMessageIsRead = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string ShortMessageType
		{
			get { return _shortMessageType; }

			set	
			{

				if( value != null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for ShortMessageType", value, value.ToString());
				_isChanged |= (_shortMessageType != value); _shortMessageType = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual int? CreateBy
		{
			get { return _createBy; }

			set	
			{
				_isChanged |= (_createBy != value); _createBy = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual DateTime? CreateAt
		{
			get { return _createAt; }

			set	
			{
				_isChanged |= (_createAt != value); _createAt = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual int? LastModifyBy
		{
			get { return _lastModifyBy; }

			set	
			{
				_isChanged |= (_lastModifyBy != value); _lastModifyBy = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual DateTime? LastModifyAt
		{
			get { return _lastModifyAt; }

			set	
			{
				_isChanged |= (_lastModifyAt != value); _lastModifyAt = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string LastModifyComment
		{
			get { return _lastModifyComment; }

			set	
			{

				if( value != null && value.Length > 600)
					throw new ArgumentOutOfRangeException("Invalid value for LastModifyComment", value, value.ToString());
				_isChanged |= (_lastModifyComment != value); _lastModifyComment = value;
			}
		}
	

		#endregion 

        

		#region Equals 和 HashCode 方法覆盖
		/// <summary>
		/// local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals( object obj )
		{
			 return this.CheckEquals(obj as SystemShortMessageEntity);
		}
		
		/// <summary>
		/// local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			return GetEntityHashCode();
		}
		#endregion
		
		public override object GetDataEntityKey()
	    {
	        return this._shortMessageID;
	    }
		
		
	
		#region ICloneable methods
		
		public virtual object Clone()
		{
			return this.MemberwiseClone();
		}
		
		#endregion
	
	}
}
