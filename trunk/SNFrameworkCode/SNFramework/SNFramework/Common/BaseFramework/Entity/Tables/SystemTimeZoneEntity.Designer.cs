// --------------------------------------------------------------------------------------------------------------------
// <copyright company="foreveross" file="SystemTimeZoneEntity.Designer.cs">
//   Copyright (c) Foreveross Enterprises. All rights reserved.
// </copyright>
// <summary>
//   Generated by MyGeneration Version # (1.3.0.9)
// </summary>
// --------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Legendigital.Framework.Common.Entity;

namespace Legendigital.Framework.Common.BaseFramework.Entity.Tables
{
	/// <summary>
	///	
	/// </summary>
	[DataContract]
	public partial class SystemTimeZoneEntity  : BaseTableEntity<int>,ICloneable
	{
      #region 公共常量

		public static readonly string CLASS_FULL_NAME = "Legendigital.Framework.Common.BaseFramework.Entity.Tables.SystemTimeZoneEntity";
		public static readonly string PROPERTY_NAME_ID = "Id";
		public static readonly string PROPERTY_NAME_NAME = "Name";
		public static readonly string PROPERTY_NAME_NAMECN = "NameCn";
		public static readonly string PROPERTY_NAME_DISPLAYNAME = "DisplayName";
		public static readonly string PROPERTY_NAME_DISPLAYNAMECN = "DisplayNameCn";
		public static readonly string PROPERTY_NAME_STANDARDNAME = "StandardName";
		public static readonly string PROPERTY_NAME_STANDARDNAMECN = "StandardNameCn";
		public static readonly string PROPERTY_NAME_DAYLIGHTNAME = "DaylightName";
		public static readonly string PROPERTY_NAME_UTCOFFSET = "UTCOffset";
		public static readonly string PROPERTY_NAME_SUPPORTDST = "SupportDST";
		public static readonly string PROPERTY_NAME_DAYLIGHTDELTA = "DaylightDelta";
		
        #endregion
	
 
      	
	
	
		 
		
		
		
		
	
        #region 私有成员变量

 
		
		private int _id;
		private string _name;
		private string _nameCn;
		private string _displayName;
		private string _displayNameCn;
		private string _standardName;
		private string _standardNameCn;
		private string _daylightName;
		private int _uTCOffset;
		private bool _supportDST;
		private int _daylightDelta;
		
		#endregion

		#region 构造函数
		/// <summary>
		/// 默认构造函数
		/// </summary>
		public SystemTimeZoneEntity()
		{
			_id = 0;
			_name = String.Empty;
			_nameCn = null;
			_displayName = String.Empty;
			_displayNameCn = null;
			_standardName = String.Empty;
			_standardNameCn = null;
			_daylightName = String.Empty;
			_uTCOffset = 0;
			_supportDST = false;
			_daylightDelta = 0;
		}
		#endregion

		#region 全构造函数
		/// <summary>
		/// 全构造函数
		/// </summary>
		public SystemTimeZoneEntity( int id, string name, string nameCn, string displayName, string displayNameCn, string standardName, string standardNameCn, string daylightName, int uTCOffset, bool supportDST, int daylightDelta)
		{
			_id = id;
			_name = name;
			_nameCn = nameCn;
			_displayName = displayName;
			_displayNameCn = displayNameCn;
			_standardName = standardName;
			_standardNameCn = standardNameCn;
			_daylightName = daylightName;
			_uTCOffset = uTCOffset;
			_supportDST = supportDST;
			_daylightDelta = daylightDelta;
		}
		#endregion     
	
	    #region 公共属性

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual int Id
		{
			get { return _id; }

			set	
			{
				_isChanged |= (_id != value); _id = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string Name
		{
			get { return _name; }

			set	
			{

				if( value != null && value.Length > 400)
					throw new ArgumentOutOfRangeException("Invalid value for Name", value, value.ToString());
				_isChanged |= (_name != value); _name = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string NameCn
		{
			get { return _nameCn; }

			set	
			{

				if( value != null && value.Length > 400)
					throw new ArgumentOutOfRangeException("Invalid value for NameCn", value, value.ToString());
				_isChanged |= (_nameCn != value); _nameCn = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string DisplayName
		{
			get { return _displayName; }

			set	
			{

				if( value != null && value.Length > 400)
					throw new ArgumentOutOfRangeException("Invalid value for DisplayName", value, value.ToString());
				_isChanged |= (_displayName != value); _displayName = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string DisplayNameCn
		{
			get { return _displayNameCn; }

			set	
			{

				if( value != null && value.Length > 400)
					throw new ArgumentOutOfRangeException("Invalid value for DisplayNameCn", value, value.ToString());
				_isChanged |= (_displayNameCn != value); _displayNameCn = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string StandardName
		{
			get { return _standardName; }

			set	
			{

				if( value != null && value.Length > 400)
					throw new ArgumentOutOfRangeException("Invalid value for StandardName", value, value.ToString());
				_isChanged |= (_standardName != value); _standardName = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string StandardNameCn
		{
			get { return _standardNameCn; }

			set	
			{

				if( value != null && value.Length > 400)
					throw new ArgumentOutOfRangeException("Invalid value for StandardNameCn", value, value.ToString());
				_isChanged |= (_standardNameCn != value); _standardNameCn = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string DaylightName
		{
			get { return _daylightName; }

			set	
			{

				if( value != null && value.Length > 400)
					throw new ArgumentOutOfRangeException("Invalid value for DaylightName", value, value.ToString());
				_isChanged |= (_daylightName != value); _daylightName = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual int UTCOffset
		{
			get { return _uTCOffset; }

			set	
			{
				_isChanged |= (_uTCOffset != value); _uTCOffset = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual bool SupportDST
		{
			get { return _supportDST; }

			set	
			{
				_isChanged |= (_supportDST != value); _supportDST = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual int DaylightDelta
		{
			get { return _daylightDelta; }

			set	
			{
				_isChanged |= (_daylightDelta != value); _daylightDelta = value;
			}
		}
	

		#endregion 

        

		#region Equals 和 HashCode 方法覆盖
		/// <summary>
		/// local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals( object obj )
		{
			 return this.CheckEquals(obj as SystemTimeZoneEntity);
		}
		
		/// <summary>
		/// local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			return GetEntityHashCode();
		}
		#endregion
		
		public override int GetDataEntityKey()
	    {
	        return this._id;
	    }
		
		
	
		#region ICloneable methods
		
		public virtual object Clone()
		{
			return this.MemberwiseClone();
		}
		
		#endregion
	
	}
}
