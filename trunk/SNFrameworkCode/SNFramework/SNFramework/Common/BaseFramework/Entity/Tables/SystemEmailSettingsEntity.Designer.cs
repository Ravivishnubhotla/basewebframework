// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;

namespace Legendigital.Framework.Common.BaseFramework.Entity.Tables
{
	/// <summary>
	///	
	/// </summary>
	[DataContract]
	public partial class SystemEmailSettingsEntity : ICloneable
	{
        #region 公共常量

		public static readonly string CLASS_FULL_NAME = "Legendigital.Framework.Common.BaseFramework.Entity.Tables.SystemEmailSettingsEntity";
		public static readonly string PROPERTY_NAME_EMAILSETTINGID = "EmailSettingID";
		public static readonly string PROPERTY_NAME_NAME = "Name";
		public static readonly string PROPERTY_NAME_CODE = "Code";
		public static readonly string PROPERTY_NAME_DESCRIPRSION = "Descriprsion";
		public static readonly string PROPERTY_NAME_HOST = "Host";
		public static readonly string PROPERTY_NAME_PORT = "Port";
		public static readonly string PROPERTY_NAME_SSL = "Ssl";
		public static readonly string PROPERTY_NAME_FROMEMAIL = "FromEmail";
		public static readonly string PROPERTY_NAME_FROMNAME = "FromName";
		public static readonly string PROPERTY_NAME_LOGINEMAIL = "LoginEmail";
		public static readonly string PROPERTY_NAME_LOGINPASSWORD = "LoginPassword";
		public static readonly string PROPERTY_NAME_ISENABLE = "IsEnable";
		public static readonly string PROPERTY_NAME_ISDEFAULT = "IsDefault";
		public static readonly string PROPERTY_NAME_CREATEDATE = "CreateDate";
		public static readonly string PROPERTY_NAME_CREATEBY = "CreateBy";
		public static readonly string PROPERTY_NAME_ORDERINDEX = "OrderIndex";
		
        #endregion
	
        #region 私有成员变量

		private bool _isChanged;		
		private bool _isDeleted;
		
		private int _emailSettingID;
		private string _name;
		private string _code;
		private string _descriprsion;
		private string _host;
		private string _port;
		private bool? _ssl;
		private string _fromEmail;
		private string _fromName;
		private string _loginEmail;
		private string _loginPassword;
		private bool? _isEnable;
		private bool? _isDefault;
		private DateTime? _createDate;
		private int? _createBy;
		private int? _orderIndex;
		
		#endregion

		#region 构造函数
		/// <summary>
		/// 默认构造函数
		/// </summary>
		public SystemEmailSettingsEntity()
		{
			_emailSettingID = 0;
			_name = null;
			_code = null;
			_descriprsion = null;
			_host = null;
			_port = null;
			_ssl = null;
			_fromEmail = null;
			_fromName = null;
			_loginEmail = null;
			_loginPassword = null;
			_isEnable = null;
			_isDefault = null;
			_createDate = null;
			_createBy = null;
			_orderIndex = null;
		}
		#endregion

		#region 全构造函数
		/// <summary>
		/// 全构造函数
		/// </summary>
		public SystemEmailSettingsEntity( int emailSettingID, string name, string code, string descriprsion, string host, string port, bool? ssl, string fromEmail, string fromName, string loginEmail, string loginPassword, bool? isEnable, bool? isDefault, DateTime? createDate, int? createBy, int? orderIndex)
		{
			_emailSettingID = emailSettingID;
			_name = name;
			_code = code;
			_descriprsion = descriprsion;
			_host = host;
			_port = port;
			_ssl = ssl;
			_fromEmail = fromEmail;
			_fromName = fromName;
			_loginEmail = loginEmail;
			_loginPassword = loginPassword;
			_isEnable = isEnable;
			_isDefault = isDefault;
			_createDate = createDate;
			_createBy = createBy;
			_orderIndex = orderIndex;
		}
		#endregion     
	
	    #region 公共属性

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual int EmailSettingID
		{
			get { return _emailSettingID; }

			set	
			{
				_isChanged |= (_emailSettingID != value); _emailSettingID = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string Name
		{
			get { return _name; }

			set	
			{

				if( value != null && value.Length > 400)
					throw new ArgumentOutOfRangeException("Invalid value for Name", value, value.ToString());
				_isChanged |= (_name != value); _name = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string Code
		{
			get { return _code; }

			set	
			{

				if( value != null && value.Length > 400)
					throw new ArgumentOutOfRangeException("Invalid value for Code", value, value.ToString());
				_isChanged |= (_code != value); _code = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string Descriprsion
		{
			get { return _descriprsion; }

			set	
			{

				if( value != null && value.Length > 4000)
					throw new ArgumentOutOfRangeException("Invalid value for Descriprsion", value, value.ToString());
				_isChanged |= (_descriprsion != value); _descriprsion = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string Host
		{
			get { return _host; }

			set	
			{

				if( value != null && value.Length > 400)
					throw new ArgumentOutOfRangeException("Invalid value for Host", value, value.ToString());
				_isChanged |= (_host != value); _host = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string Port
		{
			get { return _port; }

			set	
			{

				if( value != null && value.Length > 400)
					throw new ArgumentOutOfRangeException("Invalid value for Port", value, value.ToString());
				_isChanged |= (_port != value); _port = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual bool? Ssl
		{
			get { return _ssl; }

			set	
			{
				_isChanged |= (_ssl != value); _ssl = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string FromEmail
		{
			get { return _fromEmail; }

			set	
			{

				if( value != null && value.Length > 400)
					throw new ArgumentOutOfRangeException("Invalid value for FromEmail", value, value.ToString());
				_isChanged |= (_fromEmail != value); _fromEmail = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string FromName
		{
			get { return _fromName; }

			set	
			{

				if( value != null && value.Length > 400)
					throw new ArgumentOutOfRangeException("Invalid value for FromName", value, value.ToString());
				_isChanged |= (_fromName != value); _fromName = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string LoginEmail
		{
			get { return _loginEmail; }

			set	
			{

				if( value != null && value.Length > 400)
					throw new ArgumentOutOfRangeException("Invalid value for LoginEmail", value, value.ToString());
				_isChanged |= (_loginEmail != value); _loginEmail = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string LoginPassword
		{
			get { return _loginPassword; }

			set	
			{

				if( value != null && value.Length > 400)
					throw new ArgumentOutOfRangeException("Invalid value for LoginPassword", value, value.ToString());
				_isChanged |= (_loginPassword != value); _loginPassword = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual bool? IsEnable
		{
			get { return _isEnable; }

			set	
			{
				_isChanged |= (_isEnable != value); _isEnable = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual bool? IsDefault
		{
			get { return _isDefault; }

			set	
			{
				_isChanged |= (_isDefault != value); _isDefault = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual DateTime? CreateDate
		{
			get { return _createDate; }

			set	
			{
				_isChanged |= (_createDate != value); _createDate = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual int? CreateBy
		{
			get { return _createBy; }

			set	
			{
				_isChanged |= (_createBy != value); _createBy = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual int? OrderIndex
		{
			get { return _orderIndex; }

			set	
			{
				_isChanged |= (_orderIndex != value); _orderIndex = value;
			}
		}
		/// <summary>
		/// 返回对象是否被改变。
		/// </summary>
		public virtual bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public virtual bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 

        #region 公共方法
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public virtual void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion

		#region Equals 和 HashCode 方法覆盖
		/// <summary>
		/// local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals( object obj )
		{
			if( this == obj ) return true;
			
			if( ( obj == null ) || ( obj.GetType() != this.GetType() ) ) return false;
			
			SystemEmailSettingsEntity castObj = (SystemEmailSettingsEntity)obj;
			
			return ( castObj != null ) && ( this._emailSettingID == castObj.EmailSettingID );
		}
		
		/// <summary>
		/// local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			
			int hash = 57; 
			hash = 27 * hash * _emailSettingID.GetHashCode();

			return hash; 
		}
		#endregion
	
		#region ICloneable methods
		
		public virtual object Clone()
		{
			return this.MemberwiseClone();
		}
		
		#endregion
	
	}
}
