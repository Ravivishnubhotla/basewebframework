// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;

namespace Legendigital.Framework.Common.BaseFramework.Entity.Tables
{
	/// <summary>
	///	
	/// </summary>
	[DataContract]
	public partial class SystemCountryEntity : ICloneable
	{
      #region 公共常量

		public static readonly string CLASS_FULL_NAME = "Legendigital.Framework.Common.BaseFramework.Entity.Tables.SystemCountryEntity";
		public static readonly string PROPERTY_NAME_ID = "Id";
		public static readonly string PROPERTY_NAME_CODENUMBER = "CodeNumber";
		public static readonly string PROPERTY_NAME_CODE2 = "Code2";
		public static readonly string PROPERTY_NAME_CODE3 = "Code3";
		public static readonly string PROPERTY_NAME_ABBRNAMECN = "AbbrNameCN";
		public static readonly string PROPERTY_NAME_ABBRNAMEEN = "AbbrNameEN";
		public static readonly string PROPERTY_NAME_FULLNAMECN = "FullNameCn";
		public static readonly string PROPERTY_NAME_FULLNAMEEN = "FullNameEn";
		
        #endregion
	
 
      	
	
	
		 
		
		
		
		
	
        #region 私有成员变量

		private bool _isChanged;		
		private bool _isDeleted;
		
		private int _id;
		private string _codeNumber;
		private string _code2;
		private string _code3;
		private string _abbrNameCN;
		private string _abbrNameEN;
		private string _fullNameCn;
		private string _fullNameEn;
		
		#endregion

		#region 构造函数
		/// <summary>
		/// 默认构造函数
		/// </summary>
		public SystemCountryEntity()
		{
			_id = 0;
			_codeNumber = null;
			_code2 = null;
			_code3 = null;
			_abbrNameCN = null;
			_abbrNameEN = null;
			_fullNameCn = null;
			_fullNameEn = null;
		}
		#endregion

		#region 全构造函数
		/// <summary>
		/// 全构造函数
		/// </summary>
		public SystemCountryEntity( int id, string codeNumber, string code2, string code3, string abbrNameCN, string abbrNameEN, string fullNameCn, string fullNameEn)
		{
			_id = id;
			_codeNumber = codeNumber;
			_code2 = code2;
			_code3 = code3;
			_abbrNameCN = abbrNameCN;
			_abbrNameEN = abbrNameEN;
			_fullNameCn = fullNameCn;
			_fullNameEn = fullNameEn;
		}
		#endregion     
	
	    #region 公共属性

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual int Id
		{
			get { return _id; }

			set	
			{
				_isChanged |= (_id != value); _id = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string CodeNumber
		{
			get { return _codeNumber; }

			set	
			{

				if( value != null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for CodeNumber", value, value.ToString());
				_isChanged |= (_codeNumber != value); _codeNumber = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string Code2
		{
			get { return _code2; }

			set	
			{

				if( value != null && value.Length > 4)
					throw new ArgumentOutOfRangeException("Invalid value for Code2", value, value.ToString());
				_isChanged |= (_code2 != value); _code2 = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string Code3
		{
			get { return _code3; }

			set	
			{

				if( value != null && value.Length > 6)
					throw new ArgumentOutOfRangeException("Invalid value for Code3", value, value.ToString());
				_isChanged |= (_code3 != value); _code3 = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string AbbrNameCN
		{
			get { return _abbrNameCN; }

			set	
			{

				if( value != null && value.Length > 60)
					throw new ArgumentOutOfRangeException("Invalid value for AbbrNameCN", value, value.ToString());
				_isChanged |= (_abbrNameCN != value); _abbrNameCN = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string AbbrNameEN
		{
			get { return _abbrNameEN; }

			set	
			{

				if( value != null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for AbbrNameEN", value, value.ToString());
				_isChanged |= (_abbrNameEN != value); _abbrNameEN = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string FullNameCn
		{
			get { return _fullNameCn; }

			set	
			{

				if( value != null && value.Length > 160)
					throw new ArgumentOutOfRangeException("Invalid value for FullNameCn", value, value.ToString());
				_isChanged |= (_fullNameCn != value); _fullNameCn = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string FullNameEn
		{
			get { return _fullNameEn; }

			set	
			{

				if( value != null && value.Length > 160)
					throw new ArgumentOutOfRangeException("Invalid value for FullNameEn", value, value.ToString());
				_isChanged |= (_fullNameEn != value); _fullNameEn = value;
			}
		}
		/// <summary>
		/// 返回对象是否被改变。
		/// </summary>
		public virtual bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public virtual bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 

        #region 公共方法
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public virtual void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion

		#region Equals 和 HashCode 方法覆盖
		/// <summary>
		/// local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals( object obj )
		{
			if( this == obj ) return true;
			
			if( ( obj == null ) || ( obj.GetType() != this.GetType() ) ) return false;
			
			SystemCountryEntity castObj = (SystemCountryEntity)obj;
			
			return ( castObj != null ) && ( this._id == castObj.Id );
		}
		
		/// <summary>
		/// local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			
			int hash = 57; 
			hash = 27 * hash * _id.GetHashCode();

			return hash; 
		}
		#endregion
	
		#region ICloneable methods
		
		public virtual object Clone()
		{
			return this.MemberwiseClone();
		}
		
		#endregion
	
	}
}
