// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;

namespace Legendigital.Framework.Common.BaseFramework.Entity.Tables
{
	/// <summary>
	///	System Role
	/// </summary>
	[DataContract]
	public partial class SystemRoleEntity : ICloneable
	{
        #region 公共常量

		public static readonly string CLASS_FULL_NAME = "Legendigital.Framework.Common.BaseFramework.Entity.Tables.SystemRoleEntity";
		public static readonly string PROPERTY_NAME_ROLEID = "RoleID";
		public static readonly string PROPERTY_NAME_ROLENAME = "RoleName";
		public static readonly string PROPERTY_NAME_ROLECODE = "RoleCode";
		public static readonly string PROPERTY_NAME_ROLEDESCRIPTION = "RoleDescription";
		public static readonly string PROPERTY_NAME_ROLEISSYSTEMROLE = "RoleIsSystemRole";
		public static readonly string PROPERTY_NAME_ROLETYPE = "RoleType";
		public static readonly string PROPERTY_NAME_CREATEBY = "CreateBy";
		public static readonly string PROPERTY_NAME_CREATEDATE = "CreateDate";
		public static readonly string PROPERTY_NAME_LASTUPDATEBY = "LastUpdateBy";
		public static readonly string PROPERTY_NAME_LASTUPDATEDATE = "LastUpdateDate";
		
        #endregion
	
        #region 私有成员变量

		private bool _isChanged;		
		private bool _isDeleted;
		
		private int _roleID;
		private string _roleName;
		private string _roleCode;
		private string _roleDescription;
		private bool? _roleIsSystemRole;
		private string _roleType;
		private int? _createBy;
		private DateTime? _createDate;
		private int? _lastUpdateBy;
		private DateTime? _lastUpdateDate;
		
		#endregion

		#region 构造函数
		/// <summary>
		/// 默认构造函数
		/// </summary>
		public SystemRoleEntity()
		{
			_roleID = 0;
			_roleName = null;
			_roleCode = null;
			_roleDescription = null;
			_roleIsSystemRole = null;
			_roleType = null;
			_createBy = null;
			_createDate = null;
			_lastUpdateBy = null;
			_lastUpdateDate = null;
		}
		#endregion

		#region 全构造函数
		/// <summary>
		/// 全构造函数
		/// </summary>
		public SystemRoleEntity( int roleID, string roleName, string roleCode, string roleDescription, bool? roleIsSystemRole, string roleType, int? createBy, DateTime? createDate, int? lastUpdateBy, DateTime? lastUpdateDate)
		{
			_roleID = roleID;
			_roleName = roleName;
			_roleCode = roleCode;
			_roleDescription = roleDescription;
			_roleIsSystemRole = roleIsSystemRole;
			_roleType = roleType;
			_createBy = createBy;
			_createDate = createDate;
			_lastUpdateBy = lastUpdateBy;
			_lastUpdateDate = lastUpdateDate;
		}
		#endregion     
	
	    #region 公共属性

		/// <summary>
		/// Primary Key
		/// </summary>
		[DataMember]
		public virtual int RoleID
		{
			get { return _roleID; }

			set	
			{
				_isChanged |= (_roleID != value); _roleID = value;
			}
		}

		/// <summary>
		/// Role Name
		/// </summary>
		[DataMember]
		public virtual string RoleName
		{
			get { return _roleName; }

			set	
			{

				if( value != null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for RoleName", value, value.ToString());
				_isChanged |= (_roleName != value); _roleName = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string RoleCode
		{
			get { return _roleCode; }

			set	
			{

				if( value != null && value.Length > 400)
					throw new ArgumentOutOfRangeException("Invalid value for RoleCode", value, value.ToString());
				_isChanged |= (_roleCode != value); _roleCode = value;
			}
		}

		/// <summary>
		/// Role Description
		/// </summary>
		[DataMember]
		public virtual string RoleDescription
		{
			get { return _roleDescription; }

			set	
			{

				if( value != null && value.Length > 4000)
					throw new ArgumentOutOfRangeException("Invalid value for RoleDescription", value, value.ToString());
				_isChanged |= (_roleDescription != value); _roleDescription = value;
			}
		}

		/// <summary>
		/// Is System Role
		/// </summary>
		[DataMember]
		public virtual bool? RoleIsSystemRole
		{
			get { return _roleIsSystemRole; }

			set	
			{
				_isChanged |= (_roleIsSystemRole != value); _roleIsSystemRole = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string RoleType
		{
			get { return _roleType; }

			set	
			{

				if( value != null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for RoleType", value, value.ToString());
				_isChanged |= (_roleType != value); _roleType = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual int? CreateBy
		{
			get { return _createBy; }

			set	
			{
				_isChanged |= (_createBy != value); _createBy = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual DateTime? CreateDate
		{
			get { return _createDate; }

			set	
			{
				_isChanged |= (_createDate != value); _createDate = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual int? LastUpdateBy
		{
			get { return _lastUpdateBy; }

			set	
			{
				_isChanged |= (_lastUpdateBy != value); _lastUpdateBy = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual DateTime? LastUpdateDate
		{
			get { return _lastUpdateDate; }

			set	
			{
				_isChanged |= (_lastUpdateDate != value); _lastUpdateDate = value;
			}
		}
		/// <summary>
		/// 返回对象是否被改变。
		/// </summary>
		public virtual bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public virtual bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 

        #region 公共方法
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public virtual void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion

		#region Equals 和 HashCode 方法覆盖
		/// <summary>
		/// local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals( object obj )
		{
			if( this == obj ) return true;
			
			if( ( obj == null ) || ( obj.GetType() != this.GetType() ) ) return false;
			
			SystemRoleEntity castObj = (SystemRoleEntity)obj;
			
			return ( castObj != null ) && ( this._roleID == castObj.RoleID );
		}
		
		/// <summary>
		/// local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			
			int hash = 57; 
			hash = 27 * hash * _roleID.GetHashCode();

			return hash; 
		}
		#endregion
	
		#region ICloneable methods
		
		public virtual object Clone()
		{
			return this.MemberwiseClone();
		}
		
		#endregion
	
	}
}
