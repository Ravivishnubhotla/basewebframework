// --------------------------------------------------------------------------------------------------------------------
// <copyright company="foreveross" file="SystemAddressEntity.Designer.cs">
//   Copyright (c) Foreveross Enterprises. All rights reserved.
// </copyright>
// <summary>
//   Generated by MyGeneration Version # (1.3.0.9)
// </summary>
// --------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Legendigital.Framework.Common.Entity;

namespace Legendigital.Framework.Common.BaseFramework.Entity.Tables
{
	/// <summary>
	///	
	/// </summary>
	[DataContract]
	public partial class SystemAddressEntity  : BaseTableEntity<int>,ICloneable
	{
      #region 公共常量

		public static readonly string CLASS_FULL_NAME = "Legendigital.Framework.Common.BaseFramework.Entity.Tables.SystemAddressEntity";
		public static readonly string PROPERTY_NAME_ID = "Id";
		public static readonly string PROPERTY_NAME_NAME = "Name";
		public static readonly string PROPERTY_NAME_TYPE = "Type";
		public static readonly string PROPERTY_NAME_DESCRIPTION = "Description";
		public static readonly string PROPERTY_NAME_COUNTRY = "Country";
		public static readonly string PROPERTY_NAME_PROVINCE = "Province";
		public static readonly string PROPERTY_NAME_CITY = "City";
		public static readonly string PROPERTY_NAME_ADDRESS1 = "Address1";
		public static readonly string PROPERTY_NAME_ADDRESS2 = "Address2";
		public static readonly string PROPERTY_NAME_ADDRESS3 = "Address3";
		public static readonly string PROPERTY_NAME_ZIPCODE = "ZipCode";
		public static readonly string PROPERTY_NAME_PARENTTYPE = "ParentType";
		public static readonly string PROPERTY_NAME_PARENTID = "ParentID";
		public static readonly string PROPERTY_NAME_LONGITUDE = "Longitude";
		public static readonly string PROPERTY_NAME_LATITUDE = "Latitude";
		public static readonly string PROPERTY_NAME_TIMEZONEID = "TimeZoneID";
		
        #endregion
	
 
      	
	
	
		 
		
		
		
		
	
        #region 私有成员变量

 
		
		private int _id;
		private string _name;
		private string _type;
		private string _description;
		private string _country;
		private string _province;
		private string _city;
		private string _address1;
		private string _address2;
		private string _address3;
		private string _zipCode;
		private string _parentType;
		private int? _parentID;
		private decimal? _longitude;
		private decimal? _latitude;
		private int? _timeZoneID;
		
		#endregion

		#region 构造函数
		/// <summary>
		/// 默认构造函数
		/// </summary>
		public SystemAddressEntity()
		{
			_id = 0;
			_name = null;
			_type = null;
			_description = null;
			_country = null;
			_province = null;
			_city = null;
			_address1 = null;
			_address2 = null;
			_address3 = null;
			_zipCode = null;
			_parentType = null;
			_parentID = null;
			_longitude = null;
			_latitude = null;
			_timeZoneID = null;
		}
		#endregion

		#region 全构造函数
		/// <summary>
		/// 全构造函数
		/// </summary>
		public SystemAddressEntity( int id, string name, string type, string description, string country, string province, string city, string address1, string address2, string address3, string zipCode, string parentType, int? parentID, decimal? longitude, decimal? latitude, int? timeZoneID)
		{
			_id = id;
			_name = name;
			_type = type;
			_description = description;
			_country = country;
			_province = province;
			_city = city;
			_address1 = address1;
			_address2 = address2;
			_address3 = address3;
			_zipCode = zipCode;
			_parentType = parentType;
			_parentID = parentID;
			_longitude = longitude;
			_latitude = latitude;
			_timeZoneID = timeZoneID;
		}
		#endregion     
	
	    #region 公共属性

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual int Id
		{
			get { return _id; }

			set	
			{
				_isChanged |= (_id != value); _id = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string Name
		{
			get { return _name; }

			set	
			{

				if( value != null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Name", value, value.ToString());
				_isChanged |= (_name != value); _name = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string Type
		{
			get { return _type; }

			set	
			{

				if( value != null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Type", value, value.ToString());
				_isChanged |= (_type != value); _type = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string Description
		{
			get { return _description; }

			set	
			{

				if( value != null && value.Length > 1000)
					throw new ArgumentOutOfRangeException("Invalid value for Description", value, value.ToString());
				_isChanged |= (_description != value); _description = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string Country
		{
			get { return _country; }

			set	
			{

				if( value != null && value.Length > 40)
					throw new ArgumentOutOfRangeException("Invalid value for Country", value, value.ToString());
				_isChanged |= (_country != value); _country = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string Province
		{
			get { return _province; }

			set	
			{

				if( value != null && value.Length > 40)
					throw new ArgumentOutOfRangeException("Invalid value for Province", value, value.ToString());
				_isChanged |= (_province != value); _province = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string City
		{
			get { return _city; }

			set	
			{

				if( value != null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for City", value, value.ToString());
				_isChanged |= (_city != value); _city = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string Address1
		{
			get { return _address1; }

			set	
			{

				if( value != null && value.Length > 400)
					throw new ArgumentOutOfRangeException("Invalid value for Address1", value, value.ToString());
				_isChanged |= (_address1 != value); _address1 = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string Address2
		{
			get { return _address2; }

			set	
			{

				if( value != null && value.Length > 400)
					throw new ArgumentOutOfRangeException("Invalid value for Address2", value, value.ToString());
				_isChanged |= (_address2 != value); _address2 = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string Address3
		{
			get { return _address3; }

			set	
			{

				if( value != null && value.Length > 400)
					throw new ArgumentOutOfRangeException("Invalid value for Address3", value, value.ToString());
				_isChanged |= (_address3 != value); _address3 = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string ZipCode
		{
			get { return _zipCode; }

			set	
			{

				if( value != null && value.Length > 40)
					throw new ArgumentOutOfRangeException("Invalid value for ZipCode", value, value.ToString());
				_isChanged |= (_zipCode != value); _zipCode = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string ParentType
		{
			get { return _parentType; }

			set	
			{

				if( value != null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for ParentType", value, value.ToString());
				_isChanged |= (_parentType != value); _parentType = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual int? ParentID
		{
			get { return _parentID; }

			set	
			{
				_isChanged |= (_parentID != value); _parentID = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual decimal? Longitude
		{
			get { return _longitude; }

			set	
			{
				_isChanged |= (_longitude != value); _longitude = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual decimal? Latitude
		{
			get { return _latitude; }

			set	
			{
				_isChanged |= (_latitude != value); _latitude = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual int? TimeZoneID
		{
			get { return _timeZoneID; }

			set	
			{
				_isChanged |= (_timeZoneID != value); _timeZoneID = value;
			}
		}
	

		#endregion 

        

		#region Equals 和 HashCode 方法覆盖
		/// <summary>
		/// local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals( object obj )
		{
			 return this.CheckEquals(obj as SystemAddressEntity);
		}
		
		/// <summary>
		/// local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			return GetEntityHashCode();
		}
		#endregion
		
		public override int GetDataEntityKey()
	    {
	        return this._id;
	    }
		
		
	
		#region ICloneable methods
		
		public virtual object Clone()
		{
			return this.MemberwiseClone();
		}
		
		#endregion
	
	}
}
