// --------------------------------------------------------------------------------------------------------------------
// <copyright company="foreveross" file="SystemIPLocationEntity.Designer.cs">
//   Copyright (c) Foreveross Enterprises. All rights reserved.
// </copyright>
// <summary>
//   Generated by MyGeneration Version # (1.3.0.9)
// </summary>
// --------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Legendigital.Framework.Common.Entity;

namespace Legendigital.Framework.Common.BaseFramework.Entity.Tables
{
	/// <summary>
	///	
	/// </summary>
	[DataContract]
	public partial class SystemIPLocationEntity  : BaseTableEntity<int>,ICloneable
	{
      #region 公共常量

		public static readonly string CLASS_FULL_NAME = "Legendigital.Framework.Common.BaseFramework.Entity.Tables.SystemIPLocationEntity";
		public static readonly string PROPERTY_NAME_ID = "Id";
		public static readonly string PROPERTY_NAME_STARTIPNUM = "StartIPNum";
		public static readonly string PROPERTY_NAME_STARTIPTEXT = "StartIPText";
		public static readonly string PROPERTY_NAME_ENDIPNUM = "EndIPNum";
		public static readonly string PROPERTY_NAME_ENDIPTEXT = "EndIPText";
		public static readonly string PROPERTY_NAME_COUNTRY = "Country";
		public static readonly string PROPERTY_NAME_LOCAL = "Local";
		
        #endregion
	
 
      	
	
	
		 
		
		
		
		
	
        #region 私有成员变量

 
		
		private int _id;
		private decimal _startIPNum;
		private string _startIPText;
		private decimal _endIPNum;
		private string _endIPText;
		private string _country;
		private string _local;
		
		#endregion

		#region 构造函数
		/// <summary>
		/// 默认构造函数
		/// </summary>
		public SystemIPLocationEntity()
		{
			_id = 0;
			_startIPNum = 0;
			_startIPText = null;
			_endIPNum = 0;
			_endIPText = null;
			_country = null;
			_local = null;
		}
		#endregion

		#region 全构造函数
		/// <summary>
		/// 全构造函数
		/// </summary>
		public SystemIPLocationEntity( int id, decimal startIPNum, string startIPText, decimal endIPNum, string endIPText, string country, string local)
		{
			_id = id;
			_startIPNum = startIPNum;
			_startIPText = startIPText;
			_endIPNum = endIPNum;
			_endIPText = endIPText;
			_country = country;
			_local = local;
		}
		#endregion     
	
	    #region 公共属性

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual int Id
		{
			get { return _id; }

			set	
			{
				_isChanged |= (_id != value); _id = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual decimal StartIPNum
		{
			get { return _startIPNum; }

			set	
			{
				_isChanged |= (_startIPNum != value); _startIPNum = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string StartIPText
		{
			get { return _startIPText; }

			set	
			{

				if( value != null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for StartIPText", value, value.ToString());
				_isChanged |= (_startIPText != value); _startIPText = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual decimal EndIPNum
		{
			get { return _endIPNum; }

			set	
			{
				_isChanged |= (_endIPNum != value); _endIPNum = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string EndIPText
		{
			get { return _endIPText; }

			set	
			{

				if( value != null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for EndIPText", value, value.ToString());
				_isChanged |= (_endIPText != value); _endIPText = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string Country
		{
			get { return _country; }

			set	
			{

				if( value != null && value.Length > 510)
					throw new ArgumentOutOfRangeException("Invalid value for Country", value, value.ToString());
				_isChanged |= (_country != value); _country = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public virtual string Local
		{
			get { return _local; }

			set	
			{

				if( value != null && value.Length > 510)
					throw new ArgumentOutOfRangeException("Invalid value for Local", value, value.ToString());
				_isChanged |= (_local != value); _local = value;
			}
		}
	

		#endregion 

        

		#region Equals 和 HashCode 方法覆盖
		/// <summary>
		/// local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals( object obj )
		{
			 return this.CheckEquals(obj as SystemIPLocationEntity);
		}
		
		/// <summary>
		/// local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			return GetEntityHashCode();
		}
		#endregion
		
		public override int GetDataEntityKey()
	    {
	        return this._id;
	    }
		
		
	
		#region ICloneable methods
		
		public virtual object Clone()
		{
			return this.MemberwiseClone();
		}
		
		#endregion
	
	}
}
