// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using NHibernate.Criterion;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery.Propertys;
using Legendigital.Framework.Common.BaseFramework.Entity.Tables;
using Legendigital.Framework.Common.Data.NHibernate;


namespace Legendigital.Framework.Common.BaseFramework.Data.Tables
{
    public partial class SystemEmployeeDataObject : BaseNHibernateDataObject<SystemEmployeeEntity>
    {
		#region Expression Query Property (标准查询字段)
		public static readonly IntProperty PROPERTY_ID = new IntProperty(Property.ForName(SystemEmployeeEntity.PROPERTY_NAME_ID));		
		public static readonly EntityProperty<SystemOrganizationEntity> PROPERTY_ORGANIZATIONID = new EntityProperty<SystemOrganizationEntity>(Property.ForName(SystemEmployeeEntity.PROPERTY_NAME_ORGANIZATIONID));
		#region organizationID字段外键查询字段
        public static NHibernateDynamicQueryGenerator<SystemEmployeeEntity> InClude_OrganizationID_Query(NHibernateDynamicQueryGenerator<SystemEmployeeEntity> queryGenerator)
        {
            return queryGenerator.AddAlians(SystemEmployeeEntity.PROPERTY_NAME_ORGANIZATIONID, PROPERTY_ORGANIZATIONID_ALIAS_NAME);
        }
        public static readonly string PROPERTY_ORGANIZATIONID_ALIAS_NAME = "OrganizationID_SystemEmployeeEntity_Alias";
		public static readonly IntProperty PROPERTY_ORGANIZATIONID_ID = new IntProperty(Property.ForName(PROPERTY_ORGANIZATIONID_ALIAS_NAME + ".Id"));
		public static readonly StringProperty PROPERTY_ORGANIZATIONID_NAME = new StringProperty(Property.ForName(PROPERTY_ORGANIZATIONID_ALIAS_NAME + ".Name"));
		public static readonly StringProperty PROPERTY_ORGANIZATIONID_SHORTNAME = new StringProperty(Property.ForName(PROPERTY_ORGANIZATIONID_ALIAS_NAME + ".ShortName"));
		public static readonly StringProperty PROPERTY_ORGANIZATIONID_CODE = new StringProperty(Property.ForName(PROPERTY_ORGANIZATIONID_ALIAS_NAME + ".Code"));
		public static readonly StringProperty PROPERTY_ORGANIZATIONID_DESCRIPTION = new StringProperty(Property.ForName(PROPERTY_ORGANIZATIONID_ALIAS_NAME + ".Description"));
		public static readonly StringProperty PROPERTY_ORGANIZATIONID_LOGOURL = new StringProperty(Property.ForName(PROPERTY_ORGANIZATIONID_ALIAS_NAME + ".LogoUrl"));
		public static readonly StringProperty PROPERTY_ORGANIZATIONID_TYPE = new StringProperty(Property.ForName(PROPERTY_ORGANIZATIONID_ALIAS_NAME + ".Type"));
		public static readonly StringProperty PROPERTY_ORGANIZATIONID_MASTERNAME = new StringProperty(Property.ForName(PROPERTY_ORGANIZATIONID_ALIAS_NAME + ".MasterName"));
		public static readonly BoolProperty PROPERTY_ORGANIZATIONID_ISMAINORGANIZATION = new BoolProperty(Property.ForName(PROPERTY_ORGANIZATIONID_ALIAS_NAME + ".IsMainOrganization"));
		public static readonly IntProperty PROPERTY_ORGANIZATIONID_PARENTID = new IntProperty(Property.ForName(PROPERTY_ORGANIZATIONID_ALIAS_NAME + ".ParentID"));
		public static readonly IntProperty PROPERTY_ORGANIZATIONID_ADDRESSID = new IntProperty(Property.ForName(PROPERTY_ORGANIZATIONID_ALIAS_NAME + ".AddressID"));
		public static readonly StringProperty PROPERTY_ORGANIZATIONID_TELPHONE = new StringProperty(Property.ForName(PROPERTY_ORGANIZATIONID_ALIAS_NAME + ".TelPhone"));
		public static readonly StringProperty PROPERTY_ORGANIZATIONID_FAXNUMBER = new StringProperty(Property.ForName(PROPERTY_ORGANIZATIONID_ALIAS_NAME + ".FaxNumber"));
		public static readonly StringProperty PROPERTY_ORGANIZATIONID_WEBSITE = new StringProperty(Property.ForName(PROPERTY_ORGANIZATIONID_ALIAS_NAME + ".WebSite"));
		public static readonly StringProperty PROPERTY_ORGANIZATIONID_EMAIL = new StringProperty(Property.ForName(PROPERTY_ORGANIZATIONID_ALIAS_NAME + ".Email"));
		public static readonly IntProperty PROPERTY_ORGANIZATIONID_CREATEBY = new IntProperty(Property.ForName(PROPERTY_ORGANIZATIONID_ALIAS_NAME + ".CreateBy"));
		public static readonly DateTimeProperty PROPERTY_ORGANIZATIONID_CREATEAT = new DateTimeProperty(Property.ForName(PROPERTY_ORGANIZATIONID_ALIAS_NAME + ".CreateAt"));
		public static readonly IntProperty PROPERTY_ORGANIZATIONID_LASTMODIFYBY = new IntProperty(Property.ForName(PROPERTY_ORGANIZATIONID_ALIAS_NAME + ".LastModifyBy"));
		public static readonly DateTimeProperty PROPERTY_ORGANIZATIONID_LASTMODIFYAT = new DateTimeProperty(Property.ForName(PROPERTY_ORGANIZATIONID_ALIAS_NAME + ".LastModifyAt"));
		public static readonly StringProperty PROPERTY_ORGANIZATIONID_LASTMODIFYCOMMENT = new StringProperty(Property.ForName(PROPERTY_ORGANIZATIONID_ALIAS_NAME + ".LastModifyComment"));
		#endregion
		public static readonly StringProperty PROPERTY_NUMBER = new StringProperty(Property.ForName(SystemEmployeeEntity.PROPERTY_NAME_NUMBER));		
		public static readonly StringProperty PROPERTY_FRISTNAME = new StringProperty(Property.ForName(SystemEmployeeEntity.PROPERTY_NAME_FRISTNAME));		
		public static readonly StringProperty PROPERTY_MIDDLENAME = new StringProperty(Property.ForName(SystemEmployeeEntity.PROPERTY_NAME_MIDDLENAME));		
		public static readonly StringProperty PROPERTY_LASTNAME = new StringProperty(Property.ForName(SystemEmployeeEntity.PROPERTY_NAME_LASTNAME));		
		public static readonly StringProperty PROPERTY_FULLNAME = new StringProperty(Property.ForName(SystemEmployeeEntity.PROPERTY_NAME_FULLNAME));		
		public static readonly StringProperty PROPERTY_OFFICE1PHONENUMBER = new StringProperty(Property.ForName(SystemEmployeeEntity.PROPERTY_NAME_OFFICE1PHONENUMBER));		
		public static readonly StringProperty PROPERTY_OFFICE2PHONENUMBER = new StringProperty(Property.ForName(SystemEmployeeEntity.PROPERTY_NAME_OFFICE2PHONENUMBER));		
		public static readonly StringProperty PROPERTY_HOME1PHONENUMBER = new StringProperty(Property.ForName(SystemEmployeeEntity.PROPERTY_NAME_HOME1PHONENUMBER));		
		public static readonly StringProperty PROPERTY_HOME2PHONENUMBER = new StringProperty(Property.ForName(SystemEmployeeEntity.PROPERTY_NAME_HOME2PHONENUMBER));		
		public static readonly StringProperty PROPERTY_MOBILE1PHONENUMBER = new StringProperty(Property.ForName(SystemEmployeeEntity.PROPERTY_NAME_MOBILE1PHONENUMBER));		
		public static readonly StringProperty PROPERTY_MOBILE2PHONENUMBER = new StringProperty(Property.ForName(SystemEmployeeEntity.PROPERTY_NAME_MOBILE2PHONENUMBER));		
		public static readonly IntProperty PROPERTY_SEX = new IntProperty(Property.ForName(SystemEmployeeEntity.PROPERTY_NAME_SEX));		
		public static readonly IntProperty PROPERTY_AGE = new IntProperty(Property.ForName(SystemEmployeeEntity.PROPERTY_NAME_AGE));		
		public static readonly DateTimeProperty PROPERTY_BIRTHDAY = new DateTimeProperty(Property.ForName(SystemEmployeeEntity.PROPERTY_NAME_BIRTHDAY));		
		public static readonly StringProperty PROPERTY_HOMEPAGE = new StringProperty(Property.ForName(SystemEmployeeEntity.PROPERTY_NAME_HOMEPAGE));		
		public static readonly StringProperty PROPERTY_COMMENTS = new StringProperty(Property.ForName(SystemEmployeeEntity.PROPERTY_NAME_COMMENTS));		
		public static readonly IntProperty PROPERTY_DEFAULTDEPARTMENTID = new IntProperty(Property.ForName(SystemEmployeeEntity.PROPERTY_NAME_DEFAULTDEPARTMENTID));		
		public static readonly IntProperty PROPERTY_DEFAULTPOSTID = new IntProperty(Property.ForName(SystemEmployeeEntity.PROPERTY_NAME_DEFAULTPOSTID));		
		public static readonly IntProperty PROPERTY_USERID = new IntProperty(Property.ForName(SystemEmployeeEntity.PROPERTY_NAME_USERID));		
		public static readonly StringProperty PROPERTY_EMAIL2 = new StringProperty(Property.ForName(SystemEmployeeEntity.PROPERTY_NAME_EMAIL2));		
		public static readonly StringProperty PROPERTY_EMAIL1 = new StringProperty(Property.ForName(SystemEmployeeEntity.PROPERTY_NAME_EMAIL1));		
		public static readonly BoolProperty PROPERTY_ISACTIVE = new BoolProperty(Property.ForName(SystemEmployeeEntity.PROPERTY_NAME_ISACTIVE));		
		public static readonly StringProperty PROPERTY_STATUS = new StringProperty(Property.ForName(SystemEmployeeEntity.PROPERTY_NAME_STATUS));		
		public static readonly IntProperty PROPERTY_CREATEBY = new IntProperty(Property.ForName(SystemEmployeeEntity.PROPERTY_NAME_CREATEBY));		
		public static readonly DateTimeProperty PROPERTY_CREATEAT = new DateTimeProperty(Property.ForName(SystemEmployeeEntity.PROPERTY_NAME_CREATEAT));		
		public static readonly IntProperty PROPERTY_LASTMODIFYBY = new IntProperty(Property.ForName(SystemEmployeeEntity.PROPERTY_NAME_LASTMODIFYBY));		
		public static readonly DateTimeProperty PROPERTY_LASTMODIFYAT = new DateTimeProperty(Property.ForName(SystemEmployeeEntity.PROPERTY_NAME_LASTMODIFYAT));		
		public static readonly StringProperty PROPERTY_LASTMODIFYCOMMENT = new StringProperty(Property.ForName(SystemEmployeeEntity.PROPERTY_NAME_LASTMODIFYCOMMENT));		
      
		#region 子类集合字段查询字段
	
		#endregion

		#endregion

		
		public override string[] PkPropertyName
        {
            get { return new string[] { "Id" }; }
        }
		
		public override Type GetFieldTypeByFieldName(string fieldName)
        {
			switch (fieldName)
            {
                case "Id":
                    return typeof (int);
                case "OrganizationID":
                    return typeof (int);
                case "Number":
                    return typeof (string);
                case "FristName":
                    return typeof (string);
                case "MiddleName":
                    return typeof (string);
                case "LastName":
                    return typeof (string);
                case "FullName":
                    return typeof (string);
                case "Office1PhoneNumber":
                    return typeof (string);
                case "Office2PhoneNumber":
                    return typeof (string);
                case "Home1PhoneNumber":
                    return typeof (string);
                case "Home2PhoneNumber":
                    return typeof (string);
                case "Mobile1PhoneNumber":
                    return typeof (string);
                case "Mobile2PhoneNumber":
                    return typeof (string);
                case "Sex":
                    return typeof (int);
                case "Age":
                    return typeof (int);
                case "Birthday":
                    return typeof (DateTime);
                case "HomePage":
                    return typeof (string);
                case "Comments":
                    return typeof (string);
                case "DefaultDepartmentID":
                    return typeof (int);
                case "DefaultPostID":
                    return typeof (int);
                case "UserID":
                    return typeof (int);
                case "Email2":
                    return typeof (string);
                case "Email1":
                    return typeof (string);
                case "IsActive":
                    return typeof (bool);
                case "Status":
                    return typeof (string);
                case "CreateBy":
                    return typeof (int);
                case "CreateAt":
                    return typeof (DateTime);
                case "LastModifyBy":
                    return typeof (int);
                case "LastModifyAt":
                    return typeof (DateTime);
                case "LastModifyComment":
                    return typeof (string);
          }
			return typeof(string);
        }
		
        public override void InClude_Parent_Table(string parent_alias, NHibernateDynamicQueryGenerator<SystemEmployeeEntity> queryGenerator)
        {
            switch (parent_alias)
            {
	            case "OrganizationID_SystemEmployeeEntity_Alias":
                    queryGenerator.AddAlians(SystemEmployeeEntity.PROPERTY_NAME_ORGANIZATIONID, PROPERTY_ORGANIZATIONID_ALIAS_NAME);
                    break;
                default:
                    break;
 
            }
        }
		
		
		
		public List<SystemEmployeeEntity> GetList_By_OrganizationID_SystemOrganizationEntity(SystemOrganizationEntity fkentity)
		{
			NHibernateDynamicQueryGenerator<SystemEmployeeEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_ORGANIZATIONID.Eq(fkentity));

            return this.FindListByQueryBuilder(dynamicQueryGenerator);
		}
		
		
        public List<SystemEmployeeEntity> GetPageList_By_OrganizationID_SystemOrganizationEntity(string orderByColumnName, bool isDesc, SystemOrganizationEntity fkentity, PageQueryParams pageQueryParams)
        {
            NHibernateDynamicQueryGenerator<SystemEmployeeEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_ORGANIZATIONID.Eq(fkentity));

            AddDefaultOrderByToQueryGenerator(orderByColumnName, isDesc, dynamicQueryGenerator);

            return FindListByPageByQueryBuilder(dynamicQueryGenerator, pageQueryParams);
        }		
		

		
		
    }
}
