// --------------------------------------------------------------------------------------------------------------------
// <copyright company="foreveross" file="SystemCityDataObject.Designer.cs">
//   Copyright (c) Foreveross Enterprises. All rights reserved.
// </copyright>
// <summary>
//   Generated by MyGeneration Version # (1.3.0.9)
// </summary>
// --------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Text;
using NHibernate.Criterion;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery.Propertys;
using Legendigital.Framework.Common.BaseFramework.Entity.Tables;
using Legendigital.Framework.Common.Data.NHibernate;


namespace Legendigital.Framework.Common.BaseFramework.Data.Tables
{
    public partial class SystemCityDataObject : BaseNHibernateDataObject<SystemCityEntity,int>
    {
		#region Expression Query Property (标准查询字段)
		public static readonly IntProperty PROPERTY_ID = new IntProperty(Property.ForName(SystemCityEntity.PROPERTY_NAME_ID));		
		public static readonly StringProperty PROPERTY_NAME = new StringProperty(Property.ForName(SystemCityEntity.PROPERTY_NAME_NAME));		
		public static readonly StringProperty PROPERTY_ABBRNAME = new StringProperty(Property.ForName(SystemCityEntity.PROPERTY_NAME_ABBRNAME));		
		public static readonly StringProperty PROPERTY_CODE = new StringProperty(Property.ForName(SystemCityEntity.PROPERTY_NAME_CODE));		
		public static readonly EntityProperty<SystemProvinceEntity> PROPERTY_PROVINCEID = new EntityProperty<SystemProvinceEntity>(Property.ForName(SystemCityEntity.PROPERTY_NAME_PROVINCEID));
		#region provinceID字段外键查询字段
        public static NHibernateDynamicQueryGenerator<SystemCityEntity> InClude_ProvinceID_Query(NHibernateDynamicQueryGenerator<SystemCityEntity> queryGenerator)
        {
            return queryGenerator.AddAlians(SystemCityEntity.PROPERTY_NAME_PROVINCEID, PROPERTY_PROVINCEID_ALIAS_NAME);
        }
        public static readonly string PROPERTY_PROVINCEID_ALIAS_NAME = "ProvinceID_SystemCityEntity_Alias";
		public static readonly IntProperty PROPERTY_PROVINCEID_ID = new IntProperty(Property.ForName(PROPERTY_PROVINCEID_ALIAS_NAME + ".Id"));
		public static readonly StringProperty PROPERTY_PROVINCEID_NAME = new StringProperty(Property.ForName(PROPERTY_PROVINCEID_ALIAS_NAME + ".Name"));
		public static readonly StringProperty PROPERTY_PROVINCEID_ABBRNAME = new StringProperty(Property.ForName(PROPERTY_PROVINCEID_ALIAS_NAME + ".AbbrName"));
		public static readonly StringProperty PROPERTY_PROVINCEID_SINGLEABBRNAME = new StringProperty(Property.ForName(PROPERTY_PROVINCEID_ALIAS_NAME + ".SingleAbbrName"));
		public static readonly StringProperty PROPERTY_PROVINCEID_CODE = new StringProperty(Property.ForName(PROPERTY_PROVINCEID_ALIAS_NAME + ".Code"));
		public static readonly EntityProperty<SystemCountryEntity> PROPERTY_PROVINCEID_COUNTRYID = new EntityProperty<SystemCountryEntity>(Property.ForName(PROPERTY_PROVINCEID_ALIAS_NAME + ".CountryID"));
		#endregion
		public static readonly BoolProperty PROPERTY_CAPITAL = new BoolProperty(Property.ForName(SystemCityEntity.PROPERTY_NAME_CAPITAL));		
      












		#region 子类集合字段查询字段
	
		#endregion

		#endregion

		
		public override string[] PkPropertyName
        {
            get { return new string[] { "Id" }; }
        }
		
		public override Type GetFieldTypeByFieldName(string fieldName)
        {
			switch (fieldName)
            {
                case "Id":
                    return typeof (int);
                case "Name":
                    return typeof (string);
                case "AbbrName":
                    return typeof (string);
                case "Code":
                    return typeof (string);
                case "ProvinceID":
                    return typeof (int);
                case "Capital":
                    return typeof (bool);
          }
			return typeof(string);
        }

		#region 获取外键字段类型
		
		public override Type GetFieldTypeByFieldName(string fieldName, string parent_alias)
        {
            switch (parent_alias)
            {
	            case "ProvinceID_SystemCityEntity_Alias":
					switch (fieldName)
					{
                		case "ProvinceID_SystemCityEntity_Alias.Id":
							return typeof (int);
                		case "ProvinceID_SystemCityEntity_Alias.Name":
							return typeof (string);
                		case "ProvinceID_SystemCityEntity_Alias.AbbrName":
							return typeof (string);
                		case "ProvinceID_SystemCityEntity_Alias.SingleAbbrName":
							return typeof (string);
                		case "ProvinceID_SystemCityEntity_Alias.Code":
							return typeof (string);
                		case "ProvinceID_SystemCityEntity_Alias.CountryID":
							return typeof (int);
          			}
                    break;
 
                default:
                    break;
            }

            return typeof(string);
        }
		
		#endregion

        public override void InClude_Parent_Table(string parent_alias, NHibernateDynamicQueryGenerator<SystemCityEntity> queryGenerator)
        {
            switch (parent_alias)
            {
	            case "ProvinceID_SystemCityEntity_Alias":
                    queryGenerator.AddAlians(SystemCityEntity.PROPERTY_NAME_PROVINCEID, PROPERTY_PROVINCEID_ALIAS_NAME);
                    break;
                default:
                    break;
 
            }
        }
		
		
		
		public List<SystemCityEntity> GetList_By_ProvinceID_SystemProvinceEntity(SystemProvinceEntity fkentity)
		{
			NHibernateDynamicQueryGenerator<SystemCityEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_PROVINCEID.Eq(fkentity));

            return this.FindListByQueryBuilder(dynamicQueryGenerator);
		}
		
		
        public List<SystemCityEntity> GetPageList_By_ProvinceID_SystemProvinceEntity(string orderByColumnName, bool isDesc, SystemProvinceEntity fkentity, PageQueryParams pageQueryParams)
        {
            NHibernateDynamicQueryGenerator<SystemCityEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_PROVINCEID.Eq(fkentity));

            AddDefaultOrderByToQueryGenerator(orderByColumnName, isDesc, dynamicQueryGenerator);

            return FindListByPageByQueryBuilder(dynamicQueryGenerator, pageQueryParams);
        }		
		

		
		
    }
}
