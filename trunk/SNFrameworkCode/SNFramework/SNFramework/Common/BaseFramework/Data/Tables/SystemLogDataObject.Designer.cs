// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using NHibernate.Criterion;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery.Propertys;
using Legendigital.Framework.Common.BaseFramework.Entity.Tables;
using Legendigital.Framework.Common.Data.NHibernate;


namespace Legendigital.Framework.Common.BaseFramework.Data.Tables
{
    public partial class SystemLogDataObject : BaseNHibernateDataObject<SystemLogEntity>
    {
		#region Expression Query Property (标准查询字段)
		public static readonly IntProperty PROPERTY_LOGID = new IntProperty(Property.ForName(SystemLogEntity.PROPERTY_NAME_LOGID));		
		public static readonly StringProperty PROPERTY_LOGLEVEL = new StringProperty(Property.ForName(SystemLogEntity.PROPERTY_NAME_LOGLEVEL));		
		public static readonly StringProperty PROPERTY_LOGTYPE = new StringProperty(Property.ForName(SystemLogEntity.PROPERTY_NAME_LOGTYPE));		
		public static readonly DateTimeProperty PROPERTY_LOGDATE = new DateTimeProperty(Property.ForName(SystemLogEntity.PROPERTY_NAME_LOGDATE));		
		public static readonly StringProperty PROPERTY_LOGSOURCE = new StringProperty(Property.ForName(SystemLogEntity.PROPERTY_NAME_LOGSOURCE));		
		public static readonly StringProperty PROPERTY_LOGUSER = new StringProperty(Property.ForName(SystemLogEntity.PROPERTY_NAME_LOGUSER));		
		public static readonly StringProperty PROPERTY_LOGDESCRPTION = new StringProperty(Property.ForName(SystemLogEntity.PROPERTY_NAME_LOGDESCRPTION));		
		public static readonly StringProperty PROPERTY_LOGREQUESTINFO = new StringProperty(Property.ForName(SystemLogEntity.PROPERTY_NAME_LOGREQUESTINFO));		
		public static readonly IntProperty PROPERTY_PARENTDATAID = new IntProperty(Property.ForName(SystemLogEntity.PROPERTY_NAME_PARENTDATAID));		
		public static readonly StringProperty PROPERTY_PARENTDATATYPE = new StringProperty(Property.ForName(SystemLogEntity.PROPERTY_NAME_PARENTDATATYPE));		
		public static readonly IntProperty PROPERTY_LOGRELATEUSERID = new IntProperty(Property.ForName(SystemLogEntity.PROPERTY_NAME_LOGRELATEUSERID));		
		public static readonly StringProperty PROPERTY_LOGRELATEUSERNAME = new StringProperty(Property.ForName(SystemLogEntity.PROPERTY_NAME_LOGRELATEUSERNAME));		
		public static readonly DateTimeProperty PROPERTY_LOGRELATEDATETIME = new DateTimeProperty(Property.ForName(SystemLogEntity.PROPERTY_NAME_LOGRELATEDATETIME));		
      
		#region 子类集合字段查询字段
	
		#endregion

		#endregion

		
		public override string[] PkPropertyName
        {
            get { return new string[] { "LogID" }; }
        }
		
		public override Type GetFieldTypeByFieldName(string fieldName)
        {
			switch (fieldName)
            {
                case "LogID":
                    return typeof (int);
                case "LogLevel":
                    return typeof (string);
                case "LogType":
                    return typeof (string);
                case "LogDate":
                    return typeof (DateTime);
                case "LogSource":
                    return typeof (string);
                case "LogUser":
                    return typeof (string);
                case "LogDescrption":
                    return typeof (string);
                case "LogRequestInfo":
                    return typeof (string);
                case "ParentDataID":
                    return typeof (int);
                case "ParentDataType":
                    return typeof (string);
                case "LogRelateUserID":
                    return typeof (int);
                case "LogRelateUserName":
                    return typeof (string);
                case "LogRelateDateTime":
                    return typeof (DateTime);
          }
			return typeof(string);
        }
		
        public override void InClude_Parent_Table(string parent_alias, NHibernateDynamicQueryGenerator<SystemLogEntity> queryGenerator)
        {
            switch (parent_alias)
            {

 
            }
        }
		
		
		

		
		
    }
}
