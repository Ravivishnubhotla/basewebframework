// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using NHibernate.Criterion;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery.Propertys;
using Legendigital.Framework.Common.BaseFramework.Entity.Tables;
using Legendigital.Framework.Common.Data.NHibernate;


namespace Legendigital.Framework.Common.BaseFramework.Data.Tables
{
    public partial class SystemViewDataObject : BaseNHibernateDataObject<SystemViewEntity,int>
    {
		#region Expression Query Property (标准查询字段)
		public static readonly IntProperty PROPERTY_SYSTEMVIEWID = new IntProperty(Property.ForName(SystemViewEntity.PROPERTY_NAME_SYSTEMVIEWID));		
		public static readonly StringProperty PROPERTY_SYSTEMVIEWNAMECN = new StringProperty(Property.ForName(SystemViewEntity.PROPERTY_NAME_SYSTEMVIEWNAMECN));		
		public static readonly StringProperty PROPERTY_SYSTEMVIEWNAMEEN = new StringProperty(Property.ForName(SystemViewEntity.PROPERTY_NAME_SYSTEMVIEWNAMEEN));		
		public static readonly EntityProperty<SystemApplicationEntity> PROPERTY_APPLICATIONID = new EntityProperty<SystemApplicationEntity>(Property.ForName(SystemViewEntity.PROPERTY_NAME_APPLICATIONID));
		#region applicationID字段外键查询字段
        public static NHibernateDynamicQueryGenerator<SystemViewEntity> InClude_ApplicationID_Query(NHibernateDynamicQueryGenerator<SystemViewEntity> queryGenerator)
        {
            return queryGenerator.AddAlians(SystemViewEntity.PROPERTY_NAME_APPLICATIONID, PROPERTY_APPLICATIONID_ALIAS_NAME);
        }
        public static readonly string PROPERTY_APPLICATIONID_ALIAS_NAME = "ApplicationID_SystemViewEntity_Alias";
		public static readonly IntProperty PROPERTY_APPLICATIONID_SYSTEMAPPLICATIONID = new IntProperty(Property.ForName(PROPERTY_APPLICATIONID_ALIAS_NAME + ".SystemApplicationID"));
		public static readonly StringProperty PROPERTY_APPLICATIONID_SYSTEMAPPLICATIONNAME = new StringProperty(Property.ForName(PROPERTY_APPLICATIONID_ALIAS_NAME + ".SystemApplicationName"));
		public static readonly StringProperty PROPERTY_APPLICATIONID_SYSTEMAPPLICATIONCODE = new StringProperty(Property.ForName(PROPERTY_APPLICATIONID_ALIAS_NAME + ".SystemApplicationCode"));
		public static readonly StringProperty PROPERTY_APPLICATIONID_SYSTEMAPPLICATIONDESCRIPTION = new StringProperty(Property.ForName(PROPERTY_APPLICATIONID_ALIAS_NAME + ".SystemApplicationDescription"));
		public static readonly StringProperty PROPERTY_APPLICATIONID_SYSTEMAPPLICATIONURL = new StringProperty(Property.ForName(PROPERTY_APPLICATIONID_ALIAS_NAME + ".SystemApplicationUrl"));
		public static readonly BoolProperty PROPERTY_APPLICATIONID_SYSTEMAPPLICATIONISSYSTEMAPPLICATION = new BoolProperty(Property.ForName(PROPERTY_APPLICATIONID_ALIAS_NAME + ".SystemApplicationIsSystemApplication"));
		public static readonly IntProperty PROPERTY_APPLICATIONID_ORDERINDEX = new IntProperty(Property.ForName(PROPERTY_APPLICATIONID_ALIAS_NAME + ".OrderIndex"));
		public static readonly IntProperty PROPERTY_APPLICATIONID_CREATEBY = new IntProperty(Property.ForName(PROPERTY_APPLICATIONID_ALIAS_NAME + ".CreateBy"));
		public static readonly DateTimeProperty PROPERTY_APPLICATIONID_CREATEAT = new DateTimeProperty(Property.ForName(PROPERTY_APPLICATIONID_ALIAS_NAME + ".CreateAt"));
		public static readonly IntProperty PROPERTY_APPLICATIONID_LASTMODIFYBY = new IntProperty(Property.ForName(PROPERTY_APPLICATIONID_ALIAS_NAME + ".LastModifyBy"));
		public static readonly DateTimeProperty PROPERTY_APPLICATIONID_LASTMODIFYAT = new DateTimeProperty(Property.ForName(PROPERTY_APPLICATIONID_ALIAS_NAME + ".LastModifyAt"));
		public static readonly StringProperty PROPERTY_APPLICATIONID_LASTMODIFYCOMMENT = new StringProperty(Property.ForName(PROPERTY_APPLICATIONID_ALIAS_NAME + ".LastModifyComment"));
		#endregion
		public static readonly StringProperty PROPERTY_SYSTEMVIEWDESCRIPTION = new StringProperty(Property.ForName(SystemViewEntity.PROPERTY_NAME_SYSTEMVIEWDESCRIPTION));		
		public static readonly IntProperty PROPERTY_ORDERINDEX = new IntProperty(Property.ForName(SystemViewEntity.PROPERTY_NAME_ORDERINDEX));		
		public static readonly IntProperty PROPERTY_CREATEBY = new IntProperty(Property.ForName(SystemViewEntity.PROPERTY_NAME_CREATEBY));		
		public static readonly DateTimeProperty PROPERTY_CREATEAT = new DateTimeProperty(Property.ForName(SystemViewEntity.PROPERTY_NAME_CREATEAT));		
		public static readonly IntProperty PROPERTY_LASTMODIFYBY = new IntProperty(Property.ForName(SystemViewEntity.PROPERTY_NAME_LASTMODIFYBY));		
		public static readonly DateTimeProperty PROPERTY_LASTMODIFYAT = new DateTimeProperty(Property.ForName(SystemViewEntity.PROPERTY_NAME_LASTMODIFYAT));		
		public static readonly StringProperty PROPERTY_LASTMODIFYCOMMENT = new StringProperty(Property.ForName(SystemViewEntity.PROPERTY_NAME_LASTMODIFYCOMMENT));		
      
		#region 子类集合字段查询字段
	
		#endregion

		#endregion

		
		public override string[] PkPropertyName
        {
            get { return new string[] { "SystemViewID" }; }
        }
		
		public override Type GetFieldTypeByFieldName(string fieldName)
        {
			switch (fieldName)
            {
                case "SystemViewID":
                    return typeof (int);
                case "SystemViewNameCn":
                    return typeof (string);
                case "SystemViewNameEn":
                    return typeof (string);
                case "ApplicationID":
                    return typeof (int);
                case "SystemViewDescription":
                    return typeof (string);
                case "OrderIndex":
                    return typeof (int);
                case "CreateBy":
                    return typeof (int);
                case "CreateAt":
                    return typeof (DateTime);
                case "LastModifyBy":
                    return typeof (int);
                case "LastModifyAt":
                    return typeof (DateTime);
                case "LastModifyComment":
                    return typeof (string);
          }
			return typeof(string);
        }
		
        public override void InClude_Parent_Table(string parent_alias, NHibernateDynamicQueryGenerator<SystemViewEntity> queryGenerator)
        {
            switch (parent_alias)
            {
	            case "ApplicationID_SystemViewEntity_Alias":
                    queryGenerator.AddAlians(SystemViewEntity.PROPERTY_NAME_APPLICATIONID, PROPERTY_APPLICATIONID_ALIAS_NAME);
                    break;
                default:
                    break;
 
            }
        }
		
		
		
		public List<SystemViewEntity> GetList_By_ApplicationID_SystemApplicationEntity(SystemApplicationEntity fkentity)
		{
			NHibernateDynamicQueryGenerator<SystemViewEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_APPLICATIONID.Eq(fkentity));

            return this.FindListByQueryBuilder(dynamicQueryGenerator);
		}
		
		
        public List<SystemViewEntity> GetPageList_By_ApplicationID_SystemApplicationEntity(string orderByColumnName, bool isDesc, SystemApplicationEntity fkentity, PageQueryParams pageQueryParams)
        {
            NHibernateDynamicQueryGenerator<SystemViewEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_APPLICATIONID.Eq(fkentity));

            AddDefaultOrderByToQueryGenerator(orderByColumnName, isDesc, dynamicQueryGenerator);

            return FindListByPageByQueryBuilder(dynamicQueryGenerator, pageQueryParams);
        }		
		

		
		
    }
}
