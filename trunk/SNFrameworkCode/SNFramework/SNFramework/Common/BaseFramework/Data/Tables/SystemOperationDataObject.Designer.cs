// --------------------------------------------------------------------------------------------------------------------
// <copyright company="foreveross" file="SystemOperationDataObject.Designer.cs">
//   Copyright (c) Foreveross Enterprises. All rights reserved.
// </copyright>
// <summary>
//   Generated by MyGeneration Version # (1.3.0.9)
// </summary>
// --------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Text;
using NHibernate.Criterion;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery.Propertys;
using Legendigital.Framework.Common.BaseFramework.Entity.Tables;
using Legendigital.Framework.Common.Data.NHibernate;


namespace Legendigital.Framework.Common.BaseFramework.Data.Tables
{
    public partial class SystemOperationDataObject : BaseNHibernateDataObject<SystemOperationEntity,int>
    {
		#region Expression Query Property (标准查询字段)
		public static readonly IntProperty PROPERTY_OPERATIONID = new IntProperty(Property.ForName(SystemOperationEntity.PROPERTY_NAME_OPERATIONID));		
		public static readonly StringProperty PROPERTY_OPERATIONNAMECN = new StringProperty(Property.ForName(SystemOperationEntity.PROPERTY_NAME_OPERATIONNAMECN));		
		public static readonly StringProperty PROPERTY_OPERATIONNAMEEN = new StringProperty(Property.ForName(SystemOperationEntity.PROPERTY_NAME_OPERATIONNAMEEN));		
		public static readonly StringProperty PROPERTY_OPERATIONDESCRIPTION = new StringProperty(Property.ForName(SystemOperationEntity.PROPERTY_NAME_OPERATIONDESCRIPTION));		
		public static readonly BoolProperty PROPERTY_ISSYSTEMOPERATION = new BoolProperty(Property.ForName(SystemOperationEntity.PROPERTY_NAME_ISSYSTEMOPERATION));		
		public static readonly BoolProperty PROPERTY_ISCANSINGLEOPERATION = new BoolProperty(Property.ForName(SystemOperationEntity.PROPERTY_NAME_ISCANSINGLEOPERATION));		
		public static readonly BoolProperty PROPERTY_ISCANMUTILOPERATION = new BoolProperty(Property.ForName(SystemOperationEntity.PROPERTY_NAME_ISCANMUTILOPERATION));		
		public static readonly BoolProperty PROPERTY_ISENABLE = new BoolProperty(Property.ForName(SystemOperationEntity.PROPERTY_NAME_ISENABLE));		
		public static readonly BoolProperty PROPERTY_ISINLISTPAGE = new BoolProperty(Property.ForName(SystemOperationEntity.PROPERTY_NAME_ISINLISTPAGE));		
		public static readonly BoolProperty PROPERTY_ISINSINGLEPAGE = new BoolProperty(Property.ForName(SystemOperationEntity.PROPERTY_NAME_ISINSINGLEPAGE));		
		public static readonly IntProperty PROPERTY_OPERATIONORDER = new IntProperty(Property.ForName(SystemOperationEntity.PROPERTY_NAME_OPERATIONORDER));		
		public static readonly BoolProperty PROPERTY_ISCOMMONOPERATION = new BoolProperty(Property.ForName(SystemOperationEntity.PROPERTY_NAME_ISCOMMONOPERATION));		
		public static readonly EntityProperty<SystemResourcesEntity> PROPERTY_RESOURCEID = new EntityProperty<SystemResourcesEntity>(Property.ForName(SystemOperationEntity.PROPERTY_NAME_RESOURCEID));
		#region resourceID字段外键查询字段
        public static NHibernateDynamicQueryGenerator<SystemOperationEntity> InClude_ResourceID_Query(NHibernateDynamicQueryGenerator<SystemOperationEntity> queryGenerator)
        {
            return queryGenerator.AddAlians(SystemOperationEntity.PROPERTY_NAME_RESOURCEID, PROPERTY_RESOURCEID_ALIAS_NAME);
        }
        public static readonly string PROPERTY_RESOURCEID_ALIAS_NAME = "ResourceID_SystemOperationEntity_Alias";
		public static readonly IntProperty PROPERTY_RESOURCEID_RESOURCESID = new IntProperty(Property.ForName(PROPERTY_RESOURCEID_ALIAS_NAME + ".ResourcesID"));
		public static readonly StringProperty PROPERTY_RESOURCEID_RESOURCESNAMECN = new StringProperty(Property.ForName(PROPERTY_RESOURCEID_ALIAS_NAME + ".ResourcesNameCn"));
		public static readonly StringProperty PROPERTY_RESOURCEID_RESOURCESNAMEEN = new StringProperty(Property.ForName(PROPERTY_RESOURCEID_ALIAS_NAME + ".ResourcesNameEn"));
		public static readonly StringProperty PROPERTY_RESOURCEID_RESOURCESDESCRIPTION = new StringProperty(Property.ForName(PROPERTY_RESOURCEID_ALIAS_NAME + ".ResourcesDescription"));
		public static readonly StringProperty PROPERTY_RESOURCEID_RESOURCESTYPE = new StringProperty(Property.ForName(PROPERTY_RESOURCEID_ALIAS_NAME + ".ResourcesType"));
		public static readonly StringProperty PROPERTY_RESOURCEID_RESOURCESLIMITEXPRESSION = new StringProperty(Property.ForName(PROPERTY_RESOURCEID_ALIAS_NAME + ".ResourcesLimitExpression"));
		public static readonly BoolProperty PROPERTY_RESOURCEID_RESOURCESISRELATEUSER = new BoolProperty(Property.ForName(PROPERTY_RESOURCEID_ALIAS_NAME + ".ResourcesIsRelateUser"));
		public static readonly EntityProperty<SystemMoudleEntity> PROPERTY_RESOURCEID_MOUDLEID = new EntityProperty<SystemMoudleEntity>(Property.ForName(PROPERTY_RESOURCEID_ALIAS_NAME + ".MoudleID"));
		public static readonly EntityProperty<SystemResourcesEntity> PROPERTY_RESOURCEID_PARENTRESOURCESID = new EntityProperty<SystemResourcesEntity>(Property.ForName(PROPERTY_RESOURCEID_ALIAS_NAME + ".ParentResourcesID"));
		public static readonly IntProperty PROPERTY_RESOURCEID_ORDERINDEX = new IntProperty(Property.ForName(PROPERTY_RESOURCEID_ALIAS_NAME + ".OrderIndex"));
		public static readonly IntProperty PROPERTY_RESOURCEID_CREATEBY = new IntProperty(Property.ForName(PROPERTY_RESOURCEID_ALIAS_NAME + ".CreateBy"));
		public static readonly DateTimeProperty PROPERTY_RESOURCEID_CREATEAT = new DateTimeProperty(Property.ForName(PROPERTY_RESOURCEID_ALIAS_NAME + ".CreateAt"));
		public static readonly IntProperty PROPERTY_RESOURCEID_LASTMODIFYBY = new IntProperty(Property.ForName(PROPERTY_RESOURCEID_ALIAS_NAME + ".LastModifyBy"));
		public static readonly DateTimeProperty PROPERTY_RESOURCEID_LASTMODIFYAT = new DateTimeProperty(Property.ForName(PROPERTY_RESOURCEID_ALIAS_NAME + ".LastModifyAt"));
		public static readonly StringProperty PROPERTY_RESOURCEID_LASTMODIFYCOMMENT = new StringProperty(Property.ForName(PROPERTY_RESOURCEID_ALIAS_NAME + ".LastModifyComment"));
		#endregion
		public static readonly IntProperty PROPERTY_CREATEBY = new IntProperty(Property.ForName(SystemOperationEntity.PROPERTY_NAME_CREATEBY));		
		public static readonly DateTimeProperty PROPERTY_CREATEAT = new DateTimeProperty(Property.ForName(SystemOperationEntity.PROPERTY_NAME_CREATEAT));		
		public static readonly IntProperty PROPERTY_LASTMODIFYBY = new IntProperty(Property.ForName(SystemOperationEntity.PROPERTY_NAME_LASTMODIFYBY));		
		public static readonly DateTimeProperty PROPERTY_LASTMODIFYAT = new DateTimeProperty(Property.ForName(SystemOperationEntity.PROPERTY_NAME_LASTMODIFYAT));		
		public static readonly StringProperty PROPERTY_LASTMODIFYCOMMENT = new StringProperty(Property.ForName(SystemOperationEntity.PROPERTY_NAME_LASTMODIFYCOMMENT));		
      












		#region 子类集合字段查询字段
	
		#endregion

		#endregion

		
		public override string[] PkPropertyName
        {
            get { return new string[] { "OperationID" }; }
        }
		
		public override Type GetFieldTypeByFieldName(string fieldName)
        {
			switch (fieldName)
            {
                case "OperationID":
                    return typeof (int);
                case "OperationNameCn":
                    return typeof (string);
                case "OperationNameEn":
                    return typeof (string);
                case "OperationDescription":
                    return typeof (string);
                case "IsSystemOperation":
                    return typeof (bool);
                case "IsCanSingleOperation":
                    return typeof (bool);
                case "IsCanMutilOperation":
                    return typeof (bool);
                case "IsEnable":
                    return typeof (bool);
                case "IsInListPage":
                    return typeof (bool);
                case "IsInSinglePage":
                    return typeof (bool);
                case "OperationOrder":
                    return typeof (int);
                case "IsCommonOperation":
                    return typeof (bool);
                case "ResourceID":
                    return typeof (int);
                case "CreateBy":
                    return typeof (int);
                case "CreateAt":
                    return typeof (DateTime);
                case "LastModifyBy":
                    return typeof (int);
                case "LastModifyAt":
                    return typeof (DateTime);
                case "LastModifyComment":
                    return typeof (string);
          }
			return typeof(string);
        }

		#region 获取外键字段类型
		
		public override Type GetFieldTypeByFieldName(string fieldName, string parent_alias)
        {
            switch (parent_alias)
            {
	            case "ResourceID_SystemOperationEntity_Alias":
					switch (fieldName)
					{
                		case "ResourceID_SystemOperationEntity_Alias.ResourcesID":
							return typeof (int);
                		case "ResourceID_SystemOperationEntity_Alias.ResourcesNameCn":
							return typeof (string);
                		case "ResourceID_SystemOperationEntity_Alias.ResourcesNameEn":
							return typeof (string);
                		case "ResourceID_SystemOperationEntity_Alias.ResourcesDescription":
							return typeof (string);
                		case "ResourceID_SystemOperationEntity_Alias.ResourcesType":
							return typeof (string);
                		case "ResourceID_SystemOperationEntity_Alias.ResourcesLimitExpression":
							return typeof (string);
                		case "ResourceID_SystemOperationEntity_Alias.ResourcesIsRelateUser":
							return typeof (bool);
                		case "ResourceID_SystemOperationEntity_Alias.MoudleID":
							return typeof (int);
                		case "ResourceID_SystemOperationEntity_Alias.ParentResourcesID":
							return typeof (int);
                		case "ResourceID_SystemOperationEntity_Alias.OrderIndex":
							return typeof (int);
                		case "ResourceID_SystemOperationEntity_Alias.CreateBy":
							return typeof (int);
                		case "ResourceID_SystemOperationEntity_Alias.CreateAt":
							return typeof (DateTime);
                		case "ResourceID_SystemOperationEntity_Alias.LastModifyBy":
							return typeof (int);
                		case "ResourceID_SystemOperationEntity_Alias.LastModifyAt":
							return typeof (DateTime);
                		case "ResourceID_SystemOperationEntity_Alias.LastModifyComment":
							return typeof (string);
          			}
                    break;
 
                default:
                    break;
            }

            return typeof(string);
        }
		
		#endregion

        public override void InClude_Parent_Table(string parent_alias, NHibernateDynamicQueryGenerator<SystemOperationEntity> queryGenerator)
        {
            switch (parent_alias)
            {
	            case "ResourceID_SystemOperationEntity_Alias":
                    queryGenerator.AddAlians(SystemOperationEntity.PROPERTY_NAME_RESOURCEID, PROPERTY_RESOURCEID_ALIAS_NAME);
                    break;
                default:
                    break;
 
            }
        }
		
		
		
		public List<SystemOperationEntity> GetList_By_ResourceID_SystemResourcesEntity(SystemResourcesEntity fkentity)
		{
			NHibernateDynamicQueryGenerator<SystemOperationEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_RESOURCEID.Eq(fkentity));

            return this.FindListByQueryBuilder(dynamicQueryGenerator);
		}
		
		
        public List<SystemOperationEntity> GetPageList_By_ResourceID_SystemResourcesEntity(string orderByColumnName, bool isDesc, SystemResourcesEntity fkentity, PageQueryParams pageQueryParams)
        {
            NHibernateDynamicQueryGenerator<SystemOperationEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_RESOURCEID.Eq(fkentity));

            AddDefaultOrderByToQueryGenerator(orderByColumnName, isDesc, dynamicQueryGenerator);

            return FindListByPageByQueryBuilder(dynamicQueryGenerator, pageQueryParams);
        }		
		

		
		
    }
}
