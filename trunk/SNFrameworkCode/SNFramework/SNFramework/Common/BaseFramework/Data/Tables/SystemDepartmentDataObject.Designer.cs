// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using NHibernate.Criterion;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery.Propertys;
using Legendigital.Framework.Common.BaseFramework.Entity.Tables;
using Legendigital.Framework.Common.Data.NHibernate;


namespace Legendigital.Framework.Common.BaseFramework.Data.Tables
{
    public partial class SystemDepartmentDataObject : BaseNHibernateDataObject<SystemDepartmentEntity>
    {
		#region Expression Query Property (标准查询字段)
		public static readonly IntProperty PROPERTY_DEPARTMENTID = new IntProperty(Property.ForName(SystemDepartmentEntity.PROPERTY_NAME_DEPARTMENTID));		
		public static readonly EntityProperty<SystemDepartmentEntity> PROPERTY_PARENTDEPARTMENTID = new EntityProperty<SystemDepartmentEntity>(Property.ForName(SystemDepartmentEntity.PROPERTY_NAME_PARENTDEPARTMENTID));
		public static readonly StringProperty PROPERTY_DEPARTMENTNAMECN = new StringProperty(Property.ForName(SystemDepartmentEntity.PROPERTY_NAME_DEPARTMENTNAMECN));		
		public static readonly StringProperty PROPERTY_DEPARTMENTNAMEEN = new StringProperty(Property.ForName(SystemDepartmentEntity.PROPERTY_NAME_DEPARTMENTNAMEEN));		
		public static readonly StringProperty PROPERTY_DEPARTMENTDECRIPTION = new StringProperty(Property.ForName(SystemDepartmentEntity.PROPERTY_NAME_DEPARTMENTDECRIPTION));		
		public static readonly IntProperty PROPERTY_DEPARTMENTSORTINDEX = new IntProperty(Property.ForName(SystemDepartmentEntity.PROPERTY_NAME_DEPARTMENTSORTINDEX));		
		public static readonly EntityProperty<SystemOrganizationEntity> PROPERTY_ORGANIZATIONID = new EntityProperty<SystemOrganizationEntity>(Property.ForName(SystemDepartmentEntity.PROPERTY_NAME_ORGANIZATIONID));
		#region organizationID字段外键查询字段
        public static NHibernateDynamicQueryGenerator<SystemDepartmentEntity> InClude_OrganizationID_Query(NHibernateDynamicQueryGenerator<SystemDepartmentEntity> queryGenerator)
        {
            return queryGenerator.AddAlians(SystemDepartmentEntity.PROPERTY_NAME_ORGANIZATIONID, PROPERTY_ORGANIZATIONID_ALIAS_NAME);
        }
        public static readonly string PROPERTY_ORGANIZATIONID_ALIAS_NAME = "OrganizationID_SystemDepartmentEntity_Alias";
		public static readonly IntProperty PROPERTY_ORGANIZATIONID_ID = new IntProperty(Property.ForName(PROPERTY_ORGANIZATIONID_ALIAS_NAME + ".Id"));
		public static readonly StringProperty PROPERTY_ORGANIZATIONID_NAME = new StringProperty(Property.ForName(PROPERTY_ORGANIZATIONID_ALIAS_NAME + ".Name"));
		public static readonly StringProperty PROPERTY_ORGANIZATIONID_CODE = new StringProperty(Property.ForName(PROPERTY_ORGANIZATIONID_ALIAS_NAME + ".Code"));
		public static readonly StringProperty PROPERTY_ORGANIZATIONID_DESCRIPTION = new StringProperty(Property.ForName(PROPERTY_ORGANIZATIONID_ALIAS_NAME + ".Description"));
		public static readonly BoolProperty PROPERTY_ORGANIZATIONID_ISMAINORGANIZATION = new BoolProperty(Property.ForName(PROPERTY_ORGANIZATIONID_ALIAS_NAME + ".IsMainOrganization"));
		public static readonly IntProperty PROPERTY_ORGANIZATIONID_CREATEBY = new IntProperty(Property.ForName(PROPERTY_ORGANIZATIONID_ALIAS_NAME + ".CreateBy"));
		public static readonly DateTimeProperty PROPERTY_ORGANIZATIONID_CREATEAT = new DateTimeProperty(Property.ForName(PROPERTY_ORGANIZATIONID_ALIAS_NAME + ".CreateAt"));
		public static readonly IntProperty PROPERTY_ORGANIZATIONID_LASTMODIFYBY = new IntProperty(Property.ForName(PROPERTY_ORGANIZATIONID_ALIAS_NAME + ".LastModifyBy"));
		public static readonly DateTimeProperty PROPERTY_ORGANIZATIONID_LASTMODIFYAT = new DateTimeProperty(Property.ForName(PROPERTY_ORGANIZATIONID_ALIAS_NAME + ".LastModifyAt"));
		public static readonly StringProperty PROPERTY_ORGANIZATIONID_LASTMODIFYCOMMENT = new StringProperty(Property.ForName(PROPERTY_ORGANIZATIONID_ALIAS_NAME + ".LastModifyComment"));
		#endregion
		public static readonly IntProperty PROPERTY_CREATEBY = new IntProperty(Property.ForName(SystemDepartmentEntity.PROPERTY_NAME_CREATEBY));		
		public static readonly DateTimeProperty PROPERTY_CREATEAT = new DateTimeProperty(Property.ForName(SystemDepartmentEntity.PROPERTY_NAME_CREATEAT));		
		public static readonly IntProperty PROPERTY_LASTMODIFYBY = new IntProperty(Property.ForName(SystemDepartmentEntity.PROPERTY_NAME_LASTMODIFYBY));		
		public static readonly DateTimeProperty PROPERTY_LASTMODIFYAT = new DateTimeProperty(Property.ForName(SystemDepartmentEntity.PROPERTY_NAME_LASTMODIFYAT));		
		public static readonly StringProperty PROPERTY_LASTMODIFYCOMMENT = new StringProperty(Property.ForName(SystemDepartmentEntity.PROPERTY_NAME_LASTMODIFYCOMMENT));		
      
		#region 子类集合字段查询字段
	
		#endregion

		#endregion

		
		public override string[] PkPropertyName
        {
            get { return new string[] { "DepartmentID" }; }
        }
		
		public override Type GetFieldTypeByFieldName(string fieldName)
        {
			switch (fieldName)
            {
                case "DepartmentID":
                    return typeof (int);
                case "ParentDepartmentID":
                    return typeof (int);
                case "DepartmentNameCn":
                    return typeof (string);
                case "DepartmentNameEn":
                    return typeof (string);
                case "DepartmentDecription":
                    return typeof (string);
                case "DepartmentSortIndex":
                    return typeof (int);
                case "OrganizationID":
                    return typeof (int);
                case "CreateBy":
                    return typeof (int);
                case "CreateAt":
                    return typeof (DateTime);
                case "LastModifyBy":
                    return typeof (int);
                case "LastModifyAt":
                    return typeof (DateTime);
                case "LastModifyComment":
                    return typeof (string);
          }
			return typeof(string);
        }
		
        public override void InClude_Parent_Table(string parent_alias, NHibernateDynamicQueryGenerator<SystemDepartmentEntity> queryGenerator)
        {
            switch (parent_alias)
            {
	            case "OrganizationID_SystemDepartmentEntity_Alias":
                    queryGenerator.AddAlians(SystemDepartmentEntity.PROPERTY_NAME_ORGANIZATIONID, PROPERTY_ORGANIZATIONID_ALIAS_NAME);
                    break;
                default:
                    break;
 
            }
        }
		
		
		
		public List<SystemDepartmentEntity> GetList_By_OrganizationID_SystemOrganizationEntity(SystemOrganizationEntity fkentity)
		{
			NHibernateDynamicQueryGenerator<SystemDepartmentEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_ORGANIZATIONID.Eq(fkentity));

            return this.FindListByQueryBuilder(dynamicQueryGenerator);
		}
		
		
        public List<SystemDepartmentEntity> GetPageList_By_OrganizationID_SystemOrganizationEntity(string orderByColumnName, bool isDesc, SystemOrganizationEntity fkentity, PageQueryParams pageQueryParams)
        {
            NHibernateDynamicQueryGenerator<SystemDepartmentEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_ORGANIZATIONID.Eq(fkentity));

            AddDefaultOrderByToQueryGenerator(orderByColumnName, isDesc, dynamicQueryGenerator);

            return FindListByPageByQueryBuilder(dynamicQueryGenerator, pageQueryParams);
        }		
		

		
		
    }
}
