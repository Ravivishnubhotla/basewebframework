// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using NHibernate.Criterion;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery.Propertys;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;
using Legendigital.Framework.Common.BaseFramework.Entity.Tables;
using Legendigital.Framework.Common.BaseFramework.Entity.Tables;
using Legendigital.Framework.Common.Data.NHibernate;


namespace Legendigital.Framework.Common.BaseFramework.Data.Tables
{
    public partial class SystemViewItemDataObject : BaseNHibernateDataObject<SystemViewItemEntity>
    {
		#region Expression Query Property (标准查询字段)
		public static readonly IntProperty PROPERTY_SYSTEMVIEWITEMID = new IntProperty(Property.ForName(SystemViewItemEntity.PROPERTY_NAME_SYSTEMVIEWITEMID));		
		public static readonly StringProperty PROPERTY_SYSTEMVIEWITEMNAMEEN = new StringProperty(Property.ForName(SystemViewItemEntity.PROPERTY_NAME_SYSTEMVIEWITEMNAMEEN));		
		public static readonly StringProperty PROPERTY_SYSTEMVIEWITEMNAMECN = new StringProperty(Property.ForName(SystemViewItemEntity.PROPERTY_NAME_SYSTEMVIEWITEMNAMECN));		
		public static readonly StringProperty PROPERTY_SYSTEMVIEWITEMDESCRIPTION = new StringProperty(Property.ForName(SystemViewItemEntity.PROPERTY_NAME_SYSTEMVIEWITEMDESCRIPTION));		
		public static readonly StringProperty PROPERTY_SYSTEMVIEWITEMDISPLAYFORMAT = new StringProperty(Property.ForName(SystemViewItemEntity.PROPERTY_NAME_SYSTEMVIEWITEMDISPLAYFORMAT));		
		public static readonly EntityProperty<SystemViewEntity> PROPERTY_SYSTEMVIEWID = new EntityProperty<SystemViewEntity>(Property.ForName(SystemViewItemEntity.PROPERTY_NAME_SYSTEMVIEWID));
		#region systemViewID字段外键查询字段
        public static NHibernateDynamicQueryGenerator<SystemViewItemEntity> InClude_SystemViewID_Query(NHibernateDynamicQueryGenerator<SystemViewItemEntity> queryGenerator)
        {
            return queryGenerator.AddAlians(SystemViewItemEntity.PROPERTY_NAME_SYSTEMVIEWID, PROPERTY_SYSTEMVIEWID_ALIAS_NAME);
        }
        public static readonly string PROPERTY_SYSTEMVIEWID_ALIAS_NAME = "SystemViewID_SystemViewItemEntity_Alias";
		public static readonly IntProperty PROPERTY_SYSTEMVIEWID_SYSTEMVIEWID = new IntProperty(Property.ForName(PROPERTY_SYSTEMVIEWID_ALIAS_NAME + ".SystemViewID"));
		public static readonly StringProperty PROPERTY_SYSTEMVIEWID_SYSTEMVIEWNAMECN = new StringProperty(Property.ForName(PROPERTY_SYSTEMVIEWID_ALIAS_NAME + ".SystemViewNameCn"));
		public static readonly StringProperty PROPERTY_SYSTEMVIEWID_SYSTEMVIEWNAMEEN = new StringProperty(Property.ForName(PROPERTY_SYSTEMVIEWID_ALIAS_NAME + ".SystemViewNameEn"));
		public static readonly EntityProperty<SystemApplicationEntity> PROPERTY_SYSTEMVIEWID_APPLICATIONID = new EntityProperty<SystemApplicationEntity>(Property.ForName(PROPERTY_SYSTEMVIEWID_ALIAS_NAME + ".ApplicationID"));
		public static readonly StringProperty PROPERTY_SYSTEMVIEWID_SYSTEMVIEWDESCRIPTION = new StringProperty(Property.ForName(PROPERTY_SYSTEMVIEWID_ALIAS_NAME + ".SystemViewDescription"));
		#endregion
      
		#region 子类集合字段查询字段
	
		#endregion

		#endregion

		
		public override string[] PkPropertyName
        {
            get { return new string[] { "SystemViewItemID" }; }
        }
		
		public override Type GetFieldTypeByFieldName(string fieldName)
        {
			switch (fieldName)
            {
                case "SystemViewItemID":
                    return typeof (int);
                case "SystemViewItemNameEn":
                    return typeof (string);
                case "SystemViewItemNameCn":
                    return typeof (string);
                case "SystemViewItemDescription":
                    return typeof (string);
                case "SystemViewItemDisplayFormat":
                    return typeof (string);
                case "SystemViewID":
                    return typeof (int);
          }
			return typeof(string);
        }
		
		public List<SystemViewItemEntity> GetList_By_SystemViewID_SystemViewEntity(SystemViewEntity fkentity)
		{
			NHibernateDynamicQueryGenerator<SystemViewItemEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_SYSTEMVIEWID.Eq(fkentity));

            return this.FindListByQueryBuilder(dynamicQueryGenerator);
		}
		
		
        public List<SystemViewItemEntity> GetPageList_By_SystemViewID_SystemViewEntity(string orderByColumnName, bool isDesc, SystemViewEntity fkentity, PageQueryParams pageQueryParams)
        {
            NHibernateDynamicQueryGenerator<SystemViewItemEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_SYSTEMVIEWID.Eq(fkentity));

            AddDefaultOrderByToQueryGenerator(orderByColumnName, isDesc, dynamicQueryGenerator);

            return FindListByPageByQueryBuilder(dynamicQueryGenerator, pageQueryParams);
        }		
		

		
		
    }
}
