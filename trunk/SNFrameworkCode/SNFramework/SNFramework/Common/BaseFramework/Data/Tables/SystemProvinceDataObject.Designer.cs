// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using NHibernate.Criterion;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery.Propertys;
using Legendigital.Framework.Common.BaseFramework.Entity.Tables;
using Legendigital.Framework.Common.Data.NHibernate;


namespace Legendigital.Framework.Common.BaseFramework.Data.Tables
{
    public partial class SystemProvinceDataObject : BaseNHibernateDataObject<SystemProvinceEntity>
    {
		#region Expression Query Property (标准查询字段)
		public static readonly IntProperty PROPERTY_ID = new IntProperty(Property.ForName(SystemProvinceEntity.PROPERTY_NAME_ID));		
		public static readonly StringProperty PROPERTY_NAME = new StringProperty(Property.ForName(SystemProvinceEntity.PROPERTY_NAME_NAME));		
		public static readonly StringProperty PROPERTY_ABBRNAME = new StringProperty(Property.ForName(SystemProvinceEntity.PROPERTY_NAME_ABBRNAME));		
		public static readonly StringProperty PROPERTY_SINGLEABBRNAME = new StringProperty(Property.ForName(SystemProvinceEntity.PROPERTY_NAME_SINGLEABBRNAME));		
		public static readonly StringProperty PROPERTY_CODE = new StringProperty(Property.ForName(SystemProvinceEntity.PROPERTY_NAME_CODE));		
		public static readonly EntityProperty<SystemCountryEntity> PROPERTY_COUNTRYID = new EntityProperty<SystemCountryEntity>(Property.ForName(SystemProvinceEntity.PROPERTY_NAME_COUNTRYID));
		#region countryID字段外键查询字段
        public static NHibernateDynamicQueryGenerator<SystemProvinceEntity> InClude_CountryID_Query(NHibernateDynamicQueryGenerator<SystemProvinceEntity> queryGenerator)
        {
            return queryGenerator.AddAlians(SystemProvinceEntity.PROPERTY_NAME_COUNTRYID, PROPERTY_COUNTRYID_ALIAS_NAME);
        }
        public static readonly string PROPERTY_COUNTRYID_ALIAS_NAME = "CountryID_SystemProvinceEntity_Alias";
		public static readonly IntProperty PROPERTY_COUNTRYID_ID = new IntProperty(Property.ForName(PROPERTY_COUNTRYID_ALIAS_NAME + ".Id"));
		public static readonly StringProperty PROPERTY_COUNTRYID_CODENUMBER = new StringProperty(Property.ForName(PROPERTY_COUNTRYID_ALIAS_NAME + ".CodeNumber"));
		public static readonly StringProperty PROPERTY_COUNTRYID_CODE2 = new StringProperty(Property.ForName(PROPERTY_COUNTRYID_ALIAS_NAME + ".Code2"));
		public static readonly StringProperty PROPERTY_COUNTRYID_CODE3 = new StringProperty(Property.ForName(PROPERTY_COUNTRYID_ALIAS_NAME + ".Code3"));
		public static readonly StringProperty PROPERTY_COUNTRYID_ABBRNAMECN = new StringProperty(Property.ForName(PROPERTY_COUNTRYID_ALIAS_NAME + ".AbbrNameCN"));
		public static readonly StringProperty PROPERTY_COUNTRYID_ABBRNAMEEN = new StringProperty(Property.ForName(PROPERTY_COUNTRYID_ALIAS_NAME + ".AbbrNameEN"));
		public static readonly StringProperty PROPERTY_COUNTRYID_FULLNAMECN = new StringProperty(Property.ForName(PROPERTY_COUNTRYID_ALIAS_NAME + ".FullNameCn"));
		public static readonly StringProperty PROPERTY_COUNTRYID_FULLNAMEEN = new StringProperty(Property.ForName(PROPERTY_COUNTRYID_ALIAS_NAME + ".FullNameEn"));
		#endregion
      
		#region 子类集合字段查询字段
	
		#endregion

		#endregion

		
		public override string[] PkPropertyName
        {
            get { return new string[] { "Id" }; }
        }
		
		public override Type GetFieldTypeByFieldName(string fieldName)
        {
			switch (fieldName)
            {
                case "Id":
                    return typeof (int);
                case "Name":
                    return typeof (string);
                case "AbbrName":
                    return typeof (string);
                case "SingleAbbrName":
                    return typeof (string);
                case "Code":
                    return typeof (string);
                case "CountryID":
                    return typeof (int);
          }
			return typeof(string);
        }
		
        public override void InClude_Parent_Table(string parent_alias, NHibernateDynamicQueryGenerator<SystemProvinceEntity> queryGenerator)
        {
            switch (parent_alias)
            {
	            case "CountryID_SystemProvinceEntity_Alias":
                    queryGenerator.AddAlians(SystemProvinceEntity.PROPERTY_NAME_COUNTRYID, PROPERTY_COUNTRYID_ALIAS_NAME);
                    break;

 
            }
        }
		
		
		
		public List<SystemProvinceEntity> GetList_By_CountryID_SystemCountryEntity(SystemCountryEntity fkentity)
		{
			NHibernateDynamicQueryGenerator<SystemProvinceEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_COUNTRYID.Eq(fkentity));

            return this.FindListByQueryBuilder(dynamicQueryGenerator);
		}
		
		
        public List<SystemProvinceEntity> GetPageList_By_CountryID_SystemCountryEntity(string orderByColumnName, bool isDesc, SystemCountryEntity fkentity, PageQueryParams pageQueryParams)
        {
            NHibernateDynamicQueryGenerator<SystemProvinceEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_COUNTRYID.Eq(fkentity));

            AddDefaultOrderByToQueryGenerator(orderByColumnName, isDesc, dynamicQueryGenerator);

            return FindListByPageByQueryBuilder(dynamicQueryGenerator, pageQueryParams);
        }		
		

		
		
    }
}
