// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using NHibernate.Criterion;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery.Propertys;
using Legendigital.Framework.Common.BaseFramework.Entity.Tables;
using Legendigital.Framework.Common.Data.NHibernate;


namespace Legendigital.Framework.Common.BaseFramework.Data.Tables
{
    public partial class SystemAttachmentContentDataObject : BaseNHibernateDataObject<SystemAttachmentContentEntity>
    {
		#region Expression Query Property (标准查询字段)
		public static readonly IntProperty PROPERTY_ID = new IntProperty(Property.ForName(SystemAttachmentContentEntity.PROPERTY_NAME_ID));		
		public static readonly EntityProperty<SystemAttachmentEntity> PROPERTY_ATTACMENTID = new EntityProperty<SystemAttachmentEntity>(Property.ForName(SystemAttachmentContentEntity.PROPERTY_NAME_ATTACMENTID));
		#region attacmentID字段外键查询字段
        public static NHibernateDynamicQueryGenerator<SystemAttachmentContentEntity> InClude_AttacmentID_Query(NHibernateDynamicQueryGenerator<SystemAttachmentContentEntity> queryGenerator)
        {
            return queryGenerator.AddAlians(SystemAttachmentContentEntity.PROPERTY_NAME_ATTACMENTID, PROPERTY_ATTACMENTID_ALIAS_NAME);
        }
        public static readonly string PROPERTY_ATTACMENTID_ALIAS_NAME = "AttacmentID_SystemAttachmentContentEntity_Alias";
		public static readonly IntProperty PROPERTY_ATTACMENTID_ID = new IntProperty(Property.ForName(PROPERTY_ATTACMENTID_ALIAS_NAME + ".Id"));
		public static readonly StringProperty PROPERTY_ATTACMENTID_NAME = new StringProperty(Property.ForName(PROPERTY_ATTACMENTID_ALIAS_NAME + ".Name"));
		public static readonly StringProperty PROPERTY_ATTACMENTID_DESCRIPTION = new StringProperty(Property.ForName(PROPERTY_ATTACMENTID_ALIAS_NAME + ".Description"));
		public static readonly StringProperty PROPERTY_ATTACMENTID_FILENAME = new StringProperty(Property.ForName(PROPERTY_ATTACMENTID_ALIAS_NAME + ".FileName"));
		public static readonly StringProperty PROPERTY_ATTACMENTID_MD5 = new StringProperty(Property.ForName(PROPERTY_ATTACMENTID_ALIAS_NAME + ".Md5"));
		public static readonly IntProperty PROPERTY_ATTACMENTID_SIZE = new IntProperty(Property.ForName(PROPERTY_ATTACMENTID_ALIAS_NAME + ".Size"));
		public static readonly StringProperty PROPERTY_ATTACMENTID_FILEEXT = new StringProperty(Property.ForName(PROPERTY_ATTACMENTID_ALIAS_NAME + ".FileExt"));
		public static readonly IntProperty PROPERTY_ATTACMENTID_PAGES = new IntProperty(Property.ForName(PROPERTY_ATTACMENTID_ALIAS_NAME + ".Pages"));
		public static readonly StringProperty PROPERTY_ATTACMENTID_FILEPATH = new StringProperty(Property.ForName(PROPERTY_ATTACMENTID_ALIAS_NAME + ".FilePath"));
		public static readonly StringProperty PROPERTY_ATTACMENTID_PARENTTYPE = new StringProperty(Property.ForName(PROPERTY_ATTACMENTID_ALIAS_NAME + ".ParentType"));
		public static readonly IntProperty PROPERTY_ATTACMENTID_PARENTID = new IntProperty(Property.ForName(PROPERTY_ATTACMENTID_ALIAS_NAME + ".ParentID"));
		public static readonly IntProperty PROPERTY_ATTACMENTID_CREATEBY = new IntProperty(Property.ForName(PROPERTY_ATTACMENTID_ALIAS_NAME + ".CreateBy"));
		public static readonly DateTimeProperty PROPERTY_ATTACMENTID_CREATEAT = new DateTimeProperty(Property.ForName(PROPERTY_ATTACMENTID_ALIAS_NAME + ".CreateAt"));
		public static readonly IntProperty PROPERTY_ATTACMENTID_LASTMODIFYBY = new IntProperty(Property.ForName(PROPERTY_ATTACMENTID_ALIAS_NAME + ".LastModifyBy"));
		public static readonly DateTimeProperty PROPERTY_ATTACMENTID_LASTMODIFYAT = new DateTimeProperty(Property.ForName(PROPERTY_ATTACMENTID_ALIAS_NAME + ".LastModifyAt"));
		public static readonly StringProperty PROPERTY_ATTACMENTID_LASTMODIFYCOMMENT = new StringProperty(Property.ForName(PROPERTY_ATTACMENTID_ALIAS_NAME + ".LastModifyComment"));
		#endregion
		public static readonly ByteArrayProperty PROPERTY_FILECONTENT = new ByteArrayProperty(Property.ForName(SystemAttachmentContentEntity.PROPERTY_NAME_FILECONTENT));		
      
		#region 子类集合字段查询字段
	
		#endregion

		#endregion

		
		public override string[] PkPropertyName
        {
            get { return new string[] { "Id" }; }
        }
		
		public override Type GetFieldTypeByFieldName(string fieldName)
        {
			switch (fieldName)
            {
                case "Id":
                    return typeof (int);
                case "AttacmentID":
                    return typeof (int);
                case "FileContent":
                    return typeof (byte[]);
          }
			return typeof(string);
        }
		
        public override void InClude_Parent_Table(string parent_alias, NHibernateDynamicQueryGenerator<SystemAttachmentContentEntity> queryGenerator)
        {
            switch (parent_alias)
            {
	            case "AttacmentID_SystemAttachmentContentEntity_Alias":
                    queryGenerator.AddAlians(SystemAttachmentContentEntity.PROPERTY_NAME_ATTACMENTID, PROPERTY_ATTACMENTID_ALIAS_NAME);
                    break;
                default:
                    break;
 
            }
        }
		
		
		
		public List<SystemAttachmentContentEntity> GetList_By_AttacmentID_SystemAttachmentEntity(SystemAttachmentEntity fkentity)
		{
			NHibernateDynamicQueryGenerator<SystemAttachmentContentEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_ATTACMENTID.Eq(fkentity));

            return this.FindListByQueryBuilder(dynamicQueryGenerator);
		}
		
		
        public List<SystemAttachmentContentEntity> GetPageList_By_AttacmentID_SystemAttachmentEntity(string orderByColumnName, bool isDesc, SystemAttachmentEntity fkentity, PageQueryParams pageQueryParams)
        {
            NHibernateDynamicQueryGenerator<SystemAttachmentContentEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_ATTACMENTID.Eq(fkentity));

            AddDefaultOrderByToQueryGenerator(orderByColumnName, isDesc, dynamicQueryGenerator);

            return FindListByPageByQueryBuilder(dynamicQueryGenerator, pageQueryParams);
        }		
		

		
		
    }
}
