// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using NHibernate.Criterion;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery.Propertys;
using Legendigital.Framework.Common.BaseFramework.Entity.Tables;
using Legendigital.Framework.Common.Data.NHibernate;


namespace Legendigital.Framework.Common.BaseFramework.Data.Tables
{
    public partial class SystemDictionaryDataObject : BaseNHibernateDataObject<SystemDictionaryEntity>
    {
		#region Expression Query Property (标准查询字段)
		public static readonly IntProperty PROPERTY_SYSTEMDICTIONARYID = new IntProperty(Property.ForName(SystemDictionaryEntity.PROPERTY_NAME_SYSTEMDICTIONARYID));		
		public static readonly EntityProperty<SystemDictionaryGroupEntity> PROPERTY_SYSTEMDICTIONARYGROUPID = new EntityProperty<SystemDictionaryGroupEntity>(Property.ForName(SystemDictionaryEntity.PROPERTY_NAME_SYSTEMDICTIONARYGROUPID));
		#region systemDictionaryGroupID字段外键查询字段
        public static NHibernateDynamicQueryGenerator<SystemDictionaryEntity> InClude_SystemDictionaryGroupID_Query(NHibernateDynamicQueryGenerator<SystemDictionaryEntity> queryGenerator)
        {
            return queryGenerator.AddAlians(SystemDictionaryEntity.PROPERTY_NAME_SYSTEMDICTIONARYGROUPID, PROPERTY_SYSTEMDICTIONARYGROUPID_ALIAS_NAME);
        }
        public static readonly string PROPERTY_SYSTEMDICTIONARYGROUPID_ALIAS_NAME = "SystemDictionaryGroupID_SystemDictionaryEntity_Alias";
		public static readonly IntProperty PROPERTY_SYSTEMDICTIONARYGROUPID_ID = new IntProperty(Property.ForName(PROPERTY_SYSTEMDICTIONARYGROUPID_ALIAS_NAME + ".Id"));
		public static readonly StringProperty PROPERTY_SYSTEMDICTIONARYGROUPID_NAME = new StringProperty(Property.ForName(PROPERTY_SYSTEMDICTIONARYGROUPID_ALIAS_NAME + ".Name"));
		public static readonly StringProperty PROPERTY_SYSTEMDICTIONARYGROUPID_CODE = new StringProperty(Property.ForName(PROPERTY_SYSTEMDICTIONARYGROUPID_ALIAS_NAME + ".Code"));
		public static readonly StringProperty PROPERTY_SYSTEMDICTIONARYGROUPID_DESCRIPTION = new StringProperty(Property.ForName(PROPERTY_SYSTEMDICTIONARYGROUPID_ALIAS_NAME + ".Description"));
		public static readonly BoolProperty PROPERTY_SYSTEMDICTIONARYGROUPID_ISENABLE = new BoolProperty(Property.ForName(PROPERTY_SYSTEMDICTIONARYGROUPID_ALIAS_NAME + ".IsEnable"));
		public static readonly BoolProperty PROPERTY_SYSTEMDICTIONARYGROUPID_ISSYSTEM = new BoolProperty(Property.ForName(PROPERTY_SYSTEMDICTIONARYGROUPID_ALIAS_NAME + ".IsSystem"));
		#endregion
		public static readonly StringProperty PROPERTY_SYSTEMDICTIONARYKEY = new StringProperty(Property.ForName(SystemDictionaryEntity.PROPERTY_NAME_SYSTEMDICTIONARYKEY));		
		public static readonly StringProperty PROPERTY_SYSTEMDICTIONARYVALUE = new StringProperty(Property.ForName(SystemDictionaryEntity.PROPERTY_NAME_SYSTEMDICTIONARYVALUE));		
		public static readonly StringProperty PROPERTY_SYSTEMDICTIONARYDESCIPTION = new StringProperty(Property.ForName(SystemDictionaryEntity.PROPERTY_NAME_SYSTEMDICTIONARYDESCIPTION));		
		public static readonly IntProperty PROPERTY_SYSTEMDICTIONARYORDER = new IntProperty(Property.ForName(SystemDictionaryEntity.PROPERTY_NAME_SYSTEMDICTIONARYORDER));		
		public static readonly BoolProperty PROPERTY_SYSTEMDICTIONARYISENABLE = new BoolProperty(Property.ForName(SystemDictionaryEntity.PROPERTY_NAME_SYSTEMDICTIONARYISENABLE));		
		public static readonly BoolProperty PROPERTY_SYSTEMDICTIONARYISSYSTEM = new BoolProperty(Property.ForName(SystemDictionaryEntity.PROPERTY_NAME_SYSTEMDICTIONARYISSYSTEM));		
      
		#region 子类集合字段查询字段
	
		#endregion

		#endregion

		
		public override string[] PkPropertyName
        {
            get { return new string[] { "SystemDictionaryID" }; }
        }
		
		public override Type GetFieldTypeByFieldName(string fieldName)
        {
			switch (fieldName)
            {
                case "SystemDictionaryID":
                    return typeof (int);
                case "SystemDictionaryGroupID":
                    return typeof (int);
                case "SystemDictionaryKey":
                    return typeof (string);
                case "SystemDictionaryValue":
                    return typeof (string);
                case "SystemDictionaryDesciption":
                    return typeof (string);
                case "SystemDictionaryOrder":
                    return typeof (int);
                case "SystemDictionaryIsEnable":
                    return typeof (bool);
                case "SystemDictionaryIsSystem":
                    return typeof (bool);
          }
			return typeof(string);
        }
		
		public List<SystemDictionaryEntity> GetList_By_SystemDictionaryGroupID_SystemDictionaryGroupEntity(SystemDictionaryGroupEntity fkentity)
		{
			NHibernateDynamicQueryGenerator<SystemDictionaryEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_SYSTEMDICTIONARYGROUPID.Eq(fkentity));

            return this.FindListByQueryBuilder(dynamicQueryGenerator);
		}
		
		
        public List<SystemDictionaryEntity> GetPageList_By_SystemDictionaryGroupID_SystemDictionaryGroupEntity(string orderByColumnName, bool isDesc, SystemDictionaryGroupEntity fkentity, PageQueryParams pageQueryParams)
        {
            NHibernateDynamicQueryGenerator<SystemDictionaryEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_SYSTEMDICTIONARYGROUPID.Eq(fkentity));

            AddDefaultOrderByToQueryGenerator(orderByColumnName, isDesc, dynamicQueryGenerator);

            return FindListByPageByQueryBuilder(dynamicQueryGenerator, pageQueryParams);
        }		
		

		
		
    }
}
