// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using NHibernate.Criterion;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;
using Legendigital.Framework.Common.BaseFramework.Entity.Tables;
using Legendigital.Framework.Common.Data.NHibernate;

namespace Legendigital.Framework.Common.BaseFramework.Data.Tables
{
    public partial class SystemRoleApplicationDataObject
    {
        /// <summary>
        /// 查找角色分配的应用
        /// </summary>
        /// <param name="roles"></param>
        /// <returns></returns>
        public List<SystemApplicationEntity> GetUserAssignedApplications(List<SystemRoleEntity> roles)
        {
            NHibernateDynamicQueryGenerator<SystemRoleApplicationEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            InClude_ApplicationID_Query(dynamicQueryGenerator);

            dynamicQueryGenerator.AddWhereClause(SystemRoleApplicationDataObject.PROPERTY_ROLEID.In(roles));

            //使用disticnt以后无法排序

            //dynamicQueryGenerator.AddOrderBy(
            //    SystemRoleApplicationDataObject.PROPERTY_APPLICATIONID_SYSTEMAPPLICATIONID.Asc());

            return FindListByProjection<SystemApplicationEntity>(dynamicQueryGenerator, GetDistinctProperty(SystemRoleApplicationDataObject.PROPERTY_APPLICATIONID.CriterionProperty));
        }

        /// <summary>
        /// 查找角色应用对应关系
        /// </summary>
        /// <param name="roleEntity"></param>
        /// <param name="applicationEntity"></param>
        /// <returns></returns>
        public SystemRoleApplicationEntity GetRelationByRoleAndApplication(SystemRoleEntity roleEntity, SystemApplicationEntity applicationEntity)
        {
            NHibernateDynamicQueryGenerator<SystemRoleApplicationEntity> queryGenerator = this.GetNewQueryBuilder();

            queryGenerator.AddWhereClause(PROPERTY_ROLEID.Eq(roleEntity));

            queryGenerator.AddWhereClause(PROPERTY_APPLICATIONID.Eq(applicationEntity));

            return this.FindSingleEntityByQueryBuilder(queryGenerator);
        }
    }
}
