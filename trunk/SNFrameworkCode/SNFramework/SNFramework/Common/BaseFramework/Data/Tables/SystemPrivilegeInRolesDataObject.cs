// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using NHibernate.Criterion;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;
using Legendigital.Framework.Common.BaseFramework.Entity.Tables;
using Legendigital.Framework.Common.Data.NHibernate;

namespace Legendigital.Framework.Common.BaseFramework.Data.Tables
{
    public partial class SystemPrivilegeInRolesDataObject
    {
        /// <summary>
        /// 获取角色分配的权限
        /// </summary>
        /// <param name="role"></param>
        /// <returns></returns>
        public List<SystemPrivilegeEntity> GetRoleAssignedPermissions(SystemRoleEntity role)
        {
            NHibernateDynamicQueryGenerator<SystemPrivilegeInRolesEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_ROLEID.Eq(role));

            return FindListByProjection<SystemPrivilegeEntity>(dynamicQueryGenerator, PROPERTY_PRIVILEGEID.CriterionProperty);
        }


        public List<SystemPrivilegeInRolesEntity> GetAllPrivilegeByCategoryByUserID(SystemUserEntity userEntity)
        {
            NHibernateDynamicQueryGenerator<SystemPrivilegeInRolesEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_ROLEID.In(SystemUserRoleRelationDataObject.SubQueryGetUserAssignedRoles(userEntity)));

            return this.FindListByQueryBuilder(dynamicQueryGenerator);
        }


 

        /// <summary>
        /// 获取角色权限对应关系
        /// </summary>
        /// <param name="roleEntity"></param>
        /// <param name="privilegEntity"></param>
        /// <returns></returns>
        public SystemPrivilegeInRolesEntity GetRelationByRoleAndPrivilege(SystemRoleEntity roleEntity, SystemPrivilegeEntity privilegEntity)
        {
            NHibernateDynamicQueryGenerator<SystemPrivilegeInRolesEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_ROLEID.Eq(roleEntity));

            dynamicQueryGenerator.AddWhereClause(PROPERTY_PRIVILEGEID.Eq(privilegEntity));

            return FindSingleEntityByQueryBuilder(dynamicQueryGenerator);
        }

        public bool RolesHasPermission(List<SystemRoleEntity> roleEntities, SystemPrivilegeEntity permission)
        {
            NHibernateDynamicQueryGenerator<SystemPrivilegeInRolesEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_ROLEID.In(roleEntities));

            dynamicQueryGenerator.AddWhereClause(PROPERTY_PRIVILEGEID.Eq(permission));

            List<SystemPrivilegeInRolesEntity> list = FindListByQueryBuilder(dynamicQueryGenerator);

            return (list != null && list.Count > 0);
        }

        public List<SystemPrivilegeInRolesEntity> GetRoleAssignedPrivilegesInRole(SystemRoleEntity systemRoleEntity)
        {
            NHibernateDynamicQueryGenerator<SystemPrivilegeInRolesEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_ROLEID.Eq(systemRoleEntity));

            return this.FindListByQueryBuilder(dynamicQueryGenerator);
        }

        public List<SystemPrivilegeInRolesEntity> GetRoleAssignedPermissionsByResources(SystemRoleEntity role, SystemResourcesEntity resources)
        {
            NHibernateDynamicQueryGenerator<SystemPrivilegeInRolesEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_ROLEID.Eq(role));

            InClude_PrivilegeID_Query(dynamicQueryGenerator);

            dynamicQueryGenerator.AddWhereClause(PROPERTY_PRIVILEGEID_RESOURCESID.Eq(resources));

            dynamicQueryGenerator.AddOrderBy(PROPERTY_PRIVILEGEID_PRIVILEGEORDER.Asc());

            return this.FindListByQueryBuilder(dynamicQueryGenerator);
        }
    }
}
