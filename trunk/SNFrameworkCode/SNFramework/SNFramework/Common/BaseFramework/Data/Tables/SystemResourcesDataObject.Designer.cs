// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using NHibernate.Criterion;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery.Propertys;
using Legendigital.Framework.Common.BaseFramework.Entity.Tables;
using Legendigital.Framework.Common.Data.NHibernate;


namespace Legendigital.Framework.Common.BaseFramework.Data.Tables
{
    public partial class SystemResourcesDataObject : BaseNHibernateDataObject<SystemResourcesEntity>
    {
		#region Expression Query Property (标准查询字段)
		public static readonly IntProperty PROPERTY_RESOURCESID = new IntProperty(Property.ForName(SystemResourcesEntity.PROPERTY_NAME_RESOURCESID));		
		public static readonly StringProperty PROPERTY_RESOURCESNAMECN = new StringProperty(Property.ForName(SystemResourcesEntity.PROPERTY_NAME_RESOURCESNAMECN));		
		public static readonly StringProperty PROPERTY_RESOURCESNAMEEN = new StringProperty(Property.ForName(SystemResourcesEntity.PROPERTY_NAME_RESOURCESNAMEEN));		
		public static readonly StringProperty PROPERTY_RESOURCESDESCRIPTION = new StringProperty(Property.ForName(SystemResourcesEntity.PROPERTY_NAME_RESOURCESDESCRIPTION));		
		public static readonly StringProperty PROPERTY_RESOURCESTYPE = new StringProperty(Property.ForName(SystemResourcesEntity.PROPERTY_NAME_RESOURCESTYPE));		
		public static readonly StringProperty PROPERTY_RESOURCESLIMITEXPRESSION = new StringProperty(Property.ForName(SystemResourcesEntity.PROPERTY_NAME_RESOURCESLIMITEXPRESSION));		
		public static readonly BoolProperty PROPERTY_RESOURCESISRELATEUSER = new BoolProperty(Property.ForName(SystemResourcesEntity.PROPERTY_NAME_RESOURCESISRELATEUSER));		
		public static readonly EntityProperty<SystemMoudleEntity> PROPERTY_MOUDLEID = new EntityProperty<SystemMoudleEntity>(Property.ForName(SystemResourcesEntity.PROPERTY_NAME_MOUDLEID));
		#region moudleID字段外键查询字段
        public static NHibernateDynamicQueryGenerator<SystemResourcesEntity> InClude_MoudleID_Query(NHibernateDynamicQueryGenerator<SystemResourcesEntity> queryGenerator)
        {
            return queryGenerator.AddAlians(SystemResourcesEntity.PROPERTY_NAME_MOUDLEID, PROPERTY_MOUDLEID_ALIAS_NAME);
        }
        public static readonly string PROPERTY_MOUDLEID_ALIAS_NAME = "MoudleID_SystemResourcesEntity_Alias";
		public static readonly IntProperty PROPERTY_MOUDLEID_MOUDLEID = new IntProperty(Property.ForName(PROPERTY_MOUDLEID_ALIAS_NAME + ".MoudleID"));
		public static readonly StringProperty PROPERTY_MOUDLEID_MOUDLENAMECN = new StringProperty(Property.ForName(PROPERTY_MOUDLEID_ALIAS_NAME + ".MoudleNameCn"));
		public static readonly StringProperty PROPERTY_MOUDLEID_MOUDLENAMEEN = new StringProperty(Property.ForName(PROPERTY_MOUDLEID_ALIAS_NAME + ".MoudleNameEn"));
		public static readonly StringProperty PROPERTY_MOUDLEID_MOUDLENAMEDB = new StringProperty(Property.ForName(PROPERTY_MOUDLEID_ALIAS_NAME + ".MoudleNameDb"));
		public static readonly StringProperty PROPERTY_MOUDLEID_MOUDLEDESCRIPTION = new StringProperty(Property.ForName(PROPERTY_MOUDLEID_ALIAS_NAME + ".MoudleDescription"));
		public static readonly EntityProperty<SystemApplicationEntity> PROPERTY_MOUDLEID_APPLICATIONID = new EntityProperty<SystemApplicationEntity>(Property.ForName(PROPERTY_MOUDLEID_ALIAS_NAME + ".ApplicationID"));
		public static readonly BoolProperty PROPERTY_MOUDLEID_MOUDLEISSYSTEMMOUDLE = new BoolProperty(Property.ForName(PROPERTY_MOUDLEID_ALIAS_NAME + ".MoudleIsSystemMoudle"));
		public static readonly IntProperty PROPERTY_MOUDLEID_ORDERINDEX = new IntProperty(Property.ForName(PROPERTY_MOUDLEID_ALIAS_NAME + ".OrderIndex"));
		public static readonly IntProperty PROPERTY_MOUDLEID_CREATEBY = new IntProperty(Property.ForName(PROPERTY_MOUDLEID_ALIAS_NAME + ".CreateBy"));
		public static readonly DateTimeProperty PROPERTY_MOUDLEID_CREATEAT = new DateTimeProperty(Property.ForName(PROPERTY_MOUDLEID_ALIAS_NAME + ".CreateAt"));
		public static readonly IntProperty PROPERTY_MOUDLEID_LASTMODIFYBY = new IntProperty(Property.ForName(PROPERTY_MOUDLEID_ALIAS_NAME + ".LastModifyBy"));
		public static readonly DateTimeProperty PROPERTY_MOUDLEID_LASTMODIFYAT = new DateTimeProperty(Property.ForName(PROPERTY_MOUDLEID_ALIAS_NAME + ".LastModifyAt"));
		public static readonly StringProperty PROPERTY_MOUDLEID_LASTMODIFYCOMMENT = new StringProperty(Property.ForName(PROPERTY_MOUDLEID_ALIAS_NAME + ".LastModifyComment"));
		#endregion
		public static readonly EntityProperty<SystemResourcesEntity> PROPERTY_PARENTRESOURCESID = new EntityProperty<SystemResourcesEntity>(Property.ForName(SystemResourcesEntity.PROPERTY_NAME_PARENTRESOURCESID));
		public static readonly IntProperty PROPERTY_ORDERINDEX = new IntProperty(Property.ForName(SystemResourcesEntity.PROPERTY_NAME_ORDERINDEX));		
		public static readonly IntProperty PROPERTY_CREATEBY = new IntProperty(Property.ForName(SystemResourcesEntity.PROPERTY_NAME_CREATEBY));		
		public static readonly DateTimeProperty PROPERTY_CREATEAT = new DateTimeProperty(Property.ForName(SystemResourcesEntity.PROPERTY_NAME_CREATEAT));		
		public static readonly IntProperty PROPERTY_LASTMODIFYBY = new IntProperty(Property.ForName(SystemResourcesEntity.PROPERTY_NAME_LASTMODIFYBY));		
		public static readonly DateTimeProperty PROPERTY_LASTMODIFYAT = new DateTimeProperty(Property.ForName(SystemResourcesEntity.PROPERTY_NAME_LASTMODIFYAT));		
		public static readonly StringProperty PROPERTY_LASTMODIFYCOMMENT = new StringProperty(Property.ForName(SystemResourcesEntity.PROPERTY_NAME_LASTMODIFYCOMMENT));		
      
		#region 子类集合字段查询字段
	
		#endregion

		#endregion

		
		public override string[] PkPropertyName
        {
            get { return new string[] { "ResourcesID" }; }
        }
		
		public override Type GetFieldTypeByFieldName(string fieldName)
        {
			switch (fieldName)
            {
                case "ResourcesID":
                    return typeof (int);
                case "ResourcesNameCn":
                    return typeof (string);
                case "ResourcesNameEn":
                    return typeof (string);
                case "ResourcesDescription":
                    return typeof (string);
                case "ResourcesType":
                    return typeof (string);
                case "ResourcesLimitExpression":
                    return typeof (string);
                case "ResourcesIsRelateUser":
                    return typeof (bool);
                case "MoudleID":
                    return typeof (int);
                case "ParentResourcesID":
                    return typeof (int);
                case "OrderIndex":
                    return typeof (int);
                case "CreateBy":
                    return typeof (int);
                case "CreateAt":
                    return typeof (DateTime);
                case "LastModifyBy":
                    return typeof (int);
                case "LastModifyAt":
                    return typeof (DateTime);
                case "LastModifyComment":
                    return typeof (string);
          }
			return typeof(string);
        }
		
        public override void InClude_Parent_Table(string parent_alias, NHibernateDynamicQueryGenerator<SystemResourcesEntity> queryGenerator)
        {
            switch (parent_alias)
            {
	            case "MoudleID_SystemResourcesEntity_Alias":
                    queryGenerator.AddAlians(SystemResourcesEntity.PROPERTY_NAME_MOUDLEID, PROPERTY_MOUDLEID_ALIAS_NAME);
                    break;

 
            }
        }
		
		
		
		public List<SystemResourcesEntity> GetList_By_MoudleID_SystemMoudleEntity(SystemMoudleEntity fkentity)
		{
			NHibernateDynamicQueryGenerator<SystemResourcesEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_MOUDLEID.Eq(fkentity));

            return this.FindListByQueryBuilder(dynamicQueryGenerator);
		}
		
		
        public List<SystemResourcesEntity> GetPageList_By_MoudleID_SystemMoudleEntity(string orderByColumnName, bool isDesc, SystemMoudleEntity fkentity, PageQueryParams pageQueryParams)
        {
            NHibernateDynamicQueryGenerator<SystemResourcesEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_MOUDLEID.Eq(fkentity));

            AddDefaultOrderByToQueryGenerator(orderByColumnName, isDesc, dynamicQueryGenerator);

            return FindListByPageByQueryBuilder(dynamicQueryGenerator, pageQueryParams);
        }		
		

		
		
    }
}
