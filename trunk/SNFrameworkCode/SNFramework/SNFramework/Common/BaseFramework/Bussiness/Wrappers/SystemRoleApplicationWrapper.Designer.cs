// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using Spring.Context.Support;
using Common.Logging;
using Legendigital.Framework.Common.BaseFramework.Entity.Tables;
using Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables.Container;
using Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;

namespace Legendigital.Framework.Common.BaseFramework.Bussiness.Wrappers
{
    public partial class SystemRoleApplicationWrapper
    {
        #region Member

		internal static readonly ISystemRoleApplicationServiceProxy businessProxy = ((Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables.Container.BaseFrameworkServiceProxyContainer)(ContextRegistry.GetContext().GetObject("BaseFrameworkServiceProxyContainerIocID", typeof(Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables.Container.BaseFrameworkServiceProxyContainer)))).SystemRoleApplicationServiceProxyInstance;
	 
	 
        internal SystemRoleApplicationEntity entity;
		
		private static ILog logger = null;

        public static ILog Logger
        {
            get
            {
                if (logger == null)
                    logger = LogManager.GetLogger(typeof(SystemRoleApplicationWrapper));
                return logger;
            }
        }

        #endregion

        #region Construtor
        public SystemRoleApplicationWrapper() : this(new SystemRoleApplicationEntity())
        {
            
        }

        internal SystemRoleApplicationWrapper(SystemRoleApplicationEntity entityObj)
        {
            entity = entityObj;
        }
		#endregion
		
		#region Equals 和 HashCode 方法覆盖
		public override bool Equals(object obj)
        {
            if (obj == null && entity!=null)
            {
                if (entity.SystemRoleApplicationID == 0)
                    return true;

                return false;
            }
            return entity.Equals(obj);
        }

        public override int GetHashCode()
        {
            return entity.GetHashCode();
        }
		#endregion
		
      #region 公共常量

		public static readonly string CLASS_FULL_NAME = "Legendigital.Framework.Common.BaseFramework.Entity.Tables.SystemRoleApplicationEntity";
		public static readonly string PROPERTY_NAME_SYSTEMROLEAPPLICATIONID = "SystemRoleApplicationID";
		public static readonly string PROPERTY_NAME_ROLEID = "RoleID";
		public static readonly string PROPERTY_NAME_APPLICATIONID = "ApplicationID";
		
        #endregion
	
 
		#region roleID字段外键查询字段
        public static readonly string PROPERTY_ROLEID_ALIAS_NAME = "RoleID_SystemRoleApplicationEntity_Alias";
		public static readonly string PROPERTY_ROLEID_ROLEID = "RoleID_SystemRoleApplicationEntity_Alias.RoleID";
		public static readonly string PROPERTY_ROLEID_ROLENAME = "RoleID_SystemRoleApplicationEntity_Alias.RoleName";
		public static readonly string PROPERTY_ROLEID_ROLECODE = "RoleID_SystemRoleApplicationEntity_Alias.RoleCode";
		public static readonly string PROPERTY_ROLEID_ROLEDESCRIPTION = "RoleID_SystemRoleApplicationEntity_Alias.RoleDescription";
		public static readonly string PROPERTY_ROLEID_ROLEISSYSTEMROLE = "RoleID_SystemRoleApplicationEntity_Alias.RoleIsSystemRole";
		public static readonly string PROPERTY_ROLEID_ROLETYPE = "RoleID_SystemRoleApplicationEntity_Alias.RoleType";
		public static readonly string PROPERTY_ROLEID_CREATEBY = "RoleID_SystemRoleApplicationEntity_Alias.CreateBy";
		public static readonly string PROPERTY_ROLEID_CREATEAT = "RoleID_SystemRoleApplicationEntity_Alias.CreateAt";
		public static readonly string PROPERTY_ROLEID_LASTMODIFYBY = "RoleID_SystemRoleApplicationEntity_Alias.LastModifyBy";
		public static readonly string PROPERTY_ROLEID_LASTMODIFYAT = "RoleID_SystemRoleApplicationEntity_Alias.LastModifyAt";
		public static readonly string PROPERTY_ROLEID_LASTMODIFYCOMMENT = "RoleID_SystemRoleApplicationEntity_Alias.LastModifyComment";
		#endregion
		#region applicationID字段外键查询字段
        public static readonly string PROPERTY_APPLICATIONID_ALIAS_NAME = "ApplicationID_SystemRoleApplicationEntity_Alias";
		public static readonly string PROPERTY_APPLICATIONID_SYSTEMAPPLICATIONID = "ApplicationID_SystemRoleApplicationEntity_Alias.SystemApplicationID";
		public static readonly string PROPERTY_APPLICATIONID_SYSTEMAPPLICATIONNAME = "ApplicationID_SystemRoleApplicationEntity_Alias.SystemApplicationName";
		public static readonly string PROPERTY_APPLICATIONID_SYSTEMAPPLICATIONCODE = "ApplicationID_SystemRoleApplicationEntity_Alias.SystemApplicationCode";
		public static readonly string PROPERTY_APPLICATIONID_SYSTEMAPPLICATIONDESCRIPTION = "ApplicationID_SystemRoleApplicationEntity_Alias.SystemApplicationDescription";
		public static readonly string PROPERTY_APPLICATIONID_SYSTEMAPPLICATIONURL = "ApplicationID_SystemRoleApplicationEntity_Alias.SystemApplicationUrl";
		public static readonly string PROPERTY_APPLICATIONID_SYSTEMAPPLICATIONISSYSTEMAPPLICATION = "ApplicationID_SystemRoleApplicationEntity_Alias.SystemApplicationIsSystemApplication";
		public static readonly string PROPERTY_APPLICATIONID_ORDERINDEX = "ApplicationID_SystemRoleApplicationEntity_Alias.OrderIndex";
		public static readonly string PROPERTY_APPLICATIONID_CREATEBY = "ApplicationID_SystemRoleApplicationEntity_Alias.CreateBy";
		public static readonly string PROPERTY_APPLICATIONID_CREATEAT = "ApplicationID_SystemRoleApplicationEntity_Alias.CreateAt";
		public static readonly string PROPERTY_APPLICATIONID_LASTMODIFYBY = "ApplicationID_SystemRoleApplicationEntity_Alias.LastModifyBy";
		public static readonly string PROPERTY_APPLICATIONID_LASTMODIFYAT = "ApplicationID_SystemRoleApplicationEntity_Alias.LastModifyAt";
		public static readonly string PROPERTY_APPLICATIONID_LASTMODIFYCOMMENT = "ApplicationID_SystemRoleApplicationEntity_Alias.LastModifyComment";
		#endregion
      	
	
	
		 
		
		
		
		


		#region Public Property
		/// <summary>
		/// ??
		/// </summary>		
		public int SystemRoleApplicationID
		{
			get
			{
				return entity.SystemRoleApplicationID;
			}
			set
			{
				entity.SystemRoleApplicationID = value;
			}
		}
		/// <summary>
		/// ??ID
		/// </summary>		
		public SystemRoleWrapper RoleID
		{
			get
			{
				return SystemRoleWrapper.ConvertEntityToWrapper(entity.RoleID) ;
			}
			set
			{
				entity.RoleID = ((value == null) ? null : value.entity);
			}
		}
		/// <summary>
		/// ??ID
		/// </summary>		
		public SystemApplicationWrapper ApplicationID
		{
			get
			{
				return SystemApplicationWrapper.ConvertEntityToWrapper(entity.ApplicationID) ;
			}
			set
			{
				entity.ApplicationID = ((value == null) ? null : value.entity);
			}
		}
		#endregion 





        #region "FKQuery"
		
        public static List<SystemRoleApplicationWrapper> FindAllByOrderByAndFilterAndRoleID(string orderByColumnName, bool isDesc,   SystemRoleWrapper roleID,  PageQueryParams pageQueryParams)
        {
            return ConvertToWrapperList(businessProxy.FindAllByOrderByAndFilterAndRoleID(orderByColumnName, isDesc,   roleID.entity, pageQueryParams));
        }

        public static List<SystemRoleApplicationWrapper> FindAllByRoleID(SystemRoleWrapper roleID)
        {
            return ConvertToWrapperList(businessProxy.FindAllByRoleID(roleID.entity));
        }
		
		
        public static List<SystemRoleApplicationWrapper> FindAllByOrderByAndFilterAndApplicationID(string orderByColumnName, bool isDesc,   SystemApplicationWrapper applicationID,  PageQueryParams pageQueryParams)
        {
            return ConvertToWrapperList(businessProxy.FindAllByOrderByAndFilterAndApplicationID(orderByColumnName, isDesc,   applicationID.entity, pageQueryParams));
        }

        public static List<SystemRoleApplicationWrapper> FindAllByApplicationID(SystemApplicationWrapper applicationID)
        {
            return ConvertToWrapperList(businessProxy.FindAllByApplicationID(applicationID.entity));
        }
		



        #endregion








        #region Static Common Data Operation
		
		internal static List<SystemRoleApplicationWrapper> ConvertToWrapperList(List<SystemRoleApplicationEntity> entitylist)
        {
            List<SystemRoleApplicationWrapper> list = new List<SystemRoleApplicationWrapper>();
            foreach (SystemRoleApplicationEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }

		internal static List<SystemRoleApplicationWrapper> ConvertToWrapperList(IList<SystemRoleApplicationEntity> entitylist)
        {
            List<SystemRoleApplicationWrapper> list = new List<SystemRoleApplicationWrapper>();
            foreach (SystemRoleApplicationEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }
		
		internal static List<SystemRoleApplicationEntity> ConvertToEntityList(List<SystemRoleApplicationWrapper> wrapperlist)
        {
            List<SystemRoleApplicationEntity> list = new List<SystemRoleApplicationEntity>();
            foreach (SystemRoleApplicationWrapper wrapper in wrapperlist)
            {
                list.Add(wrapper.entity);
            }
            return list;
        }

        internal static SystemRoleApplicationWrapper ConvertEntityToWrapper(SystemRoleApplicationEntity entity)
        {
            if (entity == null)
                return null;
				
            if (entity.SystemRoleApplicationID == 0)
                return null;

            return new SystemRoleApplicationWrapper(entity);
        }
		
		#endregion

    }//End Class
}// End Namespace

