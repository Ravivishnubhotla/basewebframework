// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using Spring.Context.Support;
using Common.Logging;
using Legendigital.Framework.Common.Bussiness.NHibernate;
using Legendigital.Framework.Common.BaseFramework.Entity.Tables;
using Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables.Container;
using Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;

namespace Legendigital.Framework.Common.BaseFramework.Bussiness.Wrappers
{
    public partial class SystemProvinceWrapper    : BaseSpringNHibernateWrapper<SystemProvinceEntity, ISystemProvinceServiceProxy, SystemProvinceWrapper,int>
    {
        #region Member

		internal static readonly ISystemProvinceServiceProxy businessProxy = ((Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables.Container.BaseFrameworkServiceProxyContainer)(ContextRegistry.GetContext().GetObject("BaseFrameworkServiceProxyContainerIocID", typeof(Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables.Container.BaseFrameworkServiceProxyContainer)))).SystemProvinceServiceProxyInstance;
		
		
		internal SystemProvinceEntity Entity
        {
            get { return this.entity; }
        }
		
        #endregion

        #region Construtor
		public SystemProvinceWrapper() : base(new SystemProvinceEntity())
        {
            
        }

        internal SystemProvinceWrapper(SystemProvinceEntity entityObj)
            : base(entityObj)
        {
        }
		#endregion

        #region Process Column Name
        private static string ProcessColumnName(string columnName)
        {
            switch (columnName)
            {
		        case "CountryID_Id":
					return PROPERTY_COUNTRYID_ID;
		        case "CountryID_CodeNumber":
					return PROPERTY_COUNTRYID_CODENUMBER;
		        case "CountryID_Code2":
					return PROPERTY_COUNTRYID_CODE2;
		        case "CountryID_Code3":
					return PROPERTY_COUNTRYID_CODE3;
		        case "CountryID_AbbrNameCN":
					return PROPERTY_COUNTRYID_ABBRNAMECN;
		        case "CountryID_AbbrNameEN":
					return PROPERTY_COUNTRYID_ABBRNAMEEN;
		        case "CountryID_FullNameCn":
					return PROPERTY_COUNTRYID_FULLNAMECN;
		        case "CountryID_FullNameEn":
					return PROPERTY_COUNTRYID_FULLNAMEEN;
              default:
                    return columnName;
            }
        }

        private static void ProcessQueryFilters(List<QueryFilter> filters)
        {
            foreach (QueryFilter queryFilter in filters)
            {
                queryFilter.FilterFieldName = ProcessColumnName(queryFilter.FilterFieldName);
            }
        }
		#endregion
		
      #region 公共常量

		public static readonly string CLASS_FULL_NAME = "Legendigital.Framework.Common.BaseFramework.Entity.Tables.SystemProvinceEntity";
		public static readonly string PROPERTY_NAME_ID = "Id";
		public static readonly string PROPERTY_NAME_NAME = "Name";
		public static readonly string PROPERTY_NAME_ABBRNAME = "AbbrName";
		public static readonly string PROPERTY_NAME_SINGLEABBRNAME = "SingleAbbrName";
		public static readonly string PROPERTY_NAME_CODE = "Code";
		public static readonly string PROPERTY_NAME_COUNTRYID = "CountryID";
		
        #endregion
	
 
		#region countryID字段外键查询字段
        public const string PROPERTY_COUNTRYID_ALIAS_NAME = "CountryID_SystemProvinceEntity_Alias";
		public const string PROPERTY_COUNTRYID_ID = "CountryID_SystemProvinceEntity_Alias.Id";
		public const string PROPERTY_COUNTRYID_CODENUMBER = "CountryID_SystemProvinceEntity_Alias.CodeNumber";
		public const string PROPERTY_COUNTRYID_CODE2 = "CountryID_SystemProvinceEntity_Alias.Code2";
		public const string PROPERTY_COUNTRYID_CODE3 = "CountryID_SystemProvinceEntity_Alias.Code3";
		public const string PROPERTY_COUNTRYID_ABBRNAMECN = "CountryID_SystemProvinceEntity_Alias.AbbrNameCN";
		public const string PROPERTY_COUNTRYID_ABBRNAMEEN = "CountryID_SystemProvinceEntity_Alias.AbbrNameEN";
		public const string PROPERTY_COUNTRYID_FULLNAMECN = "CountryID_SystemProvinceEntity_Alias.FullNameCn";
		public const string PROPERTY_COUNTRYID_FULLNAMEEN = "CountryID_SystemProvinceEntity_Alias.FullNameEn";
		#endregion
      	
	
	
		 
		
		
		
		


		#region Public Property
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public int Id
		{
			get
			{
				return entity.Id;
			}
			set
			{
				entity.Id = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string Name
		{
			get
			{
				return entity.Name;
			}
			set
			{
				entity.Name = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string AbbrName
		{
			get
			{
				return entity.AbbrName;
			}
			set
			{
				entity.AbbrName = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string SingleAbbrName
		{
			get
			{
				return entity.SingleAbbrName;
			}
			set
			{
				entity.SingleAbbrName = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string Code
		{
			get
			{
				return entity.Code;
			}
			set
			{
				entity.Code = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public SystemCountryWrapper CountryID
		{
			get
			{
				return SystemCountryWrapper.ConvertEntityToWrapper(entity.CountryID) ;
			}
			set
			{
				entity.CountryID = ((value == null) ? null : value.Entity);
			}
		}
		#endregion 


		#region Query Property
		
		
		#region countryID字段外键查询字段
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_COUNTRYID_ID)]
        public int? CountryID_Id
        {
            get
            {
                if (this. CountryID == null)
                    return null;
                return  CountryID.Id;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_COUNTRYID_CODENUMBER)]
        public string CountryID_CodeNumber
        {
            get
            {
                if (this. CountryID == null)
                    return null;
                return  CountryID.CodeNumber;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_COUNTRYID_CODE2)]
        public string CountryID_Code2
        {
            get
            {
                if (this. CountryID == null)
                    return null;
                return  CountryID.Code2;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_COUNTRYID_CODE3)]
        public string CountryID_Code3
        {
            get
            {
                if (this. CountryID == null)
                    return null;
                return  CountryID.Code3;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_COUNTRYID_ABBRNAMECN)]
        public string CountryID_AbbrNameCN
        {
            get
            {
                if (this. CountryID == null)
                    return null;
                return  CountryID.AbbrNameCN;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_COUNTRYID_ABBRNAMEEN)]
        public string CountryID_AbbrNameEN
        {
            get
            {
                if (this. CountryID == null)
                    return null;
                return  CountryID.AbbrNameEN;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_COUNTRYID_FULLNAMECN)]
        public string CountryID_FullNameCn
        {
            get
            {
                if (this. CountryID == null)
                    return null;
                return  CountryID.FullNameCn;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_COUNTRYID_FULLNAMEEN)]
        public string CountryID_FullNameEn
        {
            get
            {
                if (this. CountryID == null)
                    return null;
                return  CountryID.FullNameEn;
            }
        }
		#endregion
      	
   
		#endregion


        #region "FKQuery"
		
        public static List<SystemProvinceWrapper> FindAllByOrderByAndFilterAndCountryID(string orderByColumnName, bool isDesc,   SystemCountryWrapper countryID,  PageQueryParams pageQueryParams)
        {
            return ConvertToWrapperList(businessProxy.FindAllByOrderByAndFilterAndCountryID(orderByColumnName, isDesc,   countryID.Entity, pageQueryParams));
        }

        public static List<SystemProvinceWrapper> FindAllByCountryID(SystemCountryWrapper countryID)
        {
            return ConvertToWrapperList(businessProxy.FindAllByCountryID(countryID.Entity));
        }
		



        #endregion








        #region Static Common Data Operation
		
		internal static List<SystemProvinceWrapper> ConvertToWrapperList(List<SystemProvinceEntity> entitylist)
        {
            List<SystemProvinceWrapper> list = new List<SystemProvinceWrapper>();
            foreach (SystemProvinceEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }

		internal static List<SystemProvinceWrapper> ConvertToWrapperList(IList<SystemProvinceEntity> entitylist)
        {
            List<SystemProvinceWrapper> list = new List<SystemProvinceWrapper>();
            foreach (SystemProvinceEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }
		
		internal static List<SystemProvinceEntity> ConvertToEntityList(List<SystemProvinceWrapper> wrapperlist)
        {
            List<SystemProvinceEntity> list = new List<SystemProvinceEntity>();
            foreach (SystemProvinceWrapper wrapper in wrapperlist)
            {
                list.Add(wrapper.entity);
            }
            return list;
        }

        internal static SystemProvinceWrapper ConvertEntityToWrapper(SystemProvinceEntity entity)
        {
            if (entity == null)
                return null;
				
            if (entity.Id == 0)
                return null;

            return new SystemProvinceWrapper(entity);
        }
		
		#endregion

    }//End Class
}// End Namespace

