// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using Spring.Context.Support;
using Common.Logging;
using Legendigital.Framework.Common.BaseFramework.Entity.Tables;
using Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables.Container;
using Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;

namespace Legendigital.Framework.Common.BaseFramework.Bussiness.Wrappers
{
    public partial class SystemEmailQueueWrapper
    {
        #region Member

		internal static readonly ISystemEmailQueueServiceProxy businessProxy = ((Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables.Container.BaseFrameworkServiceProxyContainer)(ContextRegistry.GetContext().GetObject("BaseFrameworkServiceProxyContainerIocID", typeof(Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables.Container.BaseFrameworkServiceProxyContainer)))).SystemEmailQueueServiceProxyInstance;
	 
	 
        internal SystemEmailQueueEntity entity;
		
		private static ILog logger = null;

        public static ILog Logger
        {
            get
            {
                if (logger == null)
                    logger = LogManager.GetLogger(typeof(SystemEmailQueueWrapper));
                return logger;
            }
        }

        #endregion

        #region Construtor
        public SystemEmailQueueWrapper() : this(new SystemEmailQueueEntity())
        {
            
        }

        internal SystemEmailQueueWrapper(SystemEmailQueueEntity entityObj)
        {
            entity = entityObj;
        }
		#endregion
		
		#region Equals 和 HashCode 方法覆盖
		public override bool Equals(object obj)
        {
            if (obj == null && entity!=null)
            {
                if (entity.QueueID == 0)
                    return true;

                return false;
            }
            return entity.Equals(obj);
        }

        public override int GetHashCode()
        {
            return entity.GetHashCode();
        }
		#endregion
		
        #region 公共常量

		public static readonly string CLASS_FULL_NAME = "Legendigital.Framework.Common.BaseFramework.Entity.Tables.SystemEmailQueueEntity";
		public static readonly string PROPERTY_NAME_QUEUEID = "QueueID";
		public static readonly string PROPERTY_NAME_TITLE = "Title";
		public static readonly string PROPERTY_NAME_BODY = "Body";
		public static readonly string PROPERTY_NAME_FROMADDRESS = "FromAddress";
		public static readonly string PROPERTY_NAME_FROMNAME = "FromName";
		public static readonly string PROPERTY_NAME_TOADDRESSS = "ToAddresss";
		public static readonly string PROPERTY_NAME_TONAMES = "ToNames";
		public static readonly string PROPERTY_NAME_CCADDRESSS = "CCAddresss";
		public static readonly string PROPERTY_NAME_CCNAMES = "CCNames";
		public static readonly string PROPERTY_NAME_BCCADDRESSS = "BCCAddresss";
		public static readonly string PROPERTY_NAME_BCCNAMES = "BCCNames";
		public static readonly string PROPERTY_NAME_EMAILTEMPLATEID = "EmailTemplateID";
		public static readonly string PROPERTY_NAME_STATUES = "Statues";
		public static readonly string PROPERTY_NAME_SENDRETRY = "SendRetry";
		public static readonly string PROPERTY_NAME_MAXRETRYTIME = "MaxRetryTime";
		public static readonly string PROPERTY_NAME_MAILLOG = "MailLog";
		public static readonly string PROPERTY_NAME_CREATEDATE = "CreateDate";
		public static readonly string PROPERTY_NAME_CREATEBY = "CreateBy";
		public static readonly string PROPERTY_NAME_SENDCONFIG = "SendConfig";
		public static readonly string PROPERTY_NAME_SENDDATE = "SendDate";
		public static readonly string PROPERTY_NAME_ORDERINDEX = "OrderIndex";
		
        #endregion


		#region Public Property
		/// <summary>
		/// 
		/// </summary>		
		public int QueueID
		{
			get
			{
				return entity.QueueID;
			}
			set
			{
				entity.QueueID = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string Title
		{
			get
			{
				return entity.Title;
			}
			set
			{
				entity.Title = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string Body
		{
			get
			{
				return entity.Body;
			}
			set
			{
				entity.Body = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string FromAddress
		{
			get
			{
				return entity.FromAddress;
			}
			set
			{
				entity.FromAddress = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string FromName
		{
			get
			{
				return entity.FromName;
			}
			set
			{
				entity.FromName = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string ToAddresss
		{
			get
			{
				return entity.ToAddresss;
			}
			set
			{
				entity.ToAddresss = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string ToNames
		{
			get
			{
				return entity.ToNames;
			}
			set
			{
				entity.ToNames = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string CCAddresss
		{
			get
			{
				return entity.CCAddresss;
			}
			set
			{
				entity.CCAddresss = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string CCNames
		{
			get
			{
				return entity.CCNames;
			}
			set
			{
				entity.CCNames = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string BCCAddresss
		{
			get
			{
				return entity.BCCAddresss;
			}
			set
			{
				entity.BCCAddresss = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string BCCNames
		{
			get
			{
				return entity.BCCNames;
			}
			set
			{
				entity.BCCNames = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public int EmailTemplateID
		{
			get
			{
				return entity.EmailTemplateID;
			}
			set
			{
				entity.EmailTemplateID = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string Statues
		{
			get
			{
				return entity.Statues;
			}
			set
			{
				entity.Statues = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public int? SendRetry
		{
			get
			{
				return entity.SendRetry;
			}
			set
			{
				entity.SendRetry = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public int? MaxRetryTime
		{
			get
			{
				return entity.MaxRetryTime;
			}
			set
			{
				entity.MaxRetryTime = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string MailLog
		{
			get
			{
				return entity.MailLog;
			}
			set
			{
				entity.MailLog = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public DateTime? CreateDate
		{
			get
			{
				return entity.CreateDate;
			}
			set
			{
				entity.CreateDate = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public int? CreateBy
		{
			get
			{
				return entity.CreateBy;
			}
			set
			{
				entity.CreateBy = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string SendConfig
		{
			get
			{
				return entity.SendConfig;
			}
			set
			{
				entity.SendConfig = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public DateTime? SendDate
		{
			get
			{
				return entity.SendDate;
			}
			set
			{
				entity.SendDate = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public int? OrderIndex
		{
			get
			{
				return entity.OrderIndex;
			}
			set
			{
				entity.OrderIndex = value;
			}
		}
		#endregion 





        #region "FKQuery"



        #endregion








        #region Static Common Data Operation
		
		internal static List<SystemEmailQueueWrapper> ConvertToWrapperList(List<SystemEmailQueueEntity> entitylist)
        {
            List<SystemEmailQueueWrapper> list = new List<SystemEmailQueueWrapper>();
            foreach (SystemEmailQueueEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }

		internal static List<SystemEmailQueueWrapper> ConvertToWrapperList(IList<SystemEmailQueueEntity> entitylist)
        {
            List<SystemEmailQueueWrapper> list = new List<SystemEmailQueueWrapper>();
            foreach (SystemEmailQueueEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }
		
		internal static List<SystemEmailQueueEntity> ConvertToEntityList(List<SystemEmailQueueWrapper> wrapperlist)
        {
            List<SystemEmailQueueEntity> list = new List<SystemEmailQueueEntity>();
            foreach (SystemEmailQueueWrapper wrapper in wrapperlist)
            {
                list.Add(wrapper.entity);
            }
            return list;
        }

        internal static SystemEmailQueueWrapper ConvertEntityToWrapper(SystemEmailQueueEntity entity)
        {
            if (entity == null)
                return null;
				
            if (entity.QueueID == 0)
                return null;

            return new SystemEmailQueueWrapper(entity);
        }
		
		#endregion

    }//End Class
}// End Namespace

