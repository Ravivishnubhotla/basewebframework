// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using Spring.Context.Support;
using Common.Logging;
using Legendigital.Framework.Common.Bussiness.NHibernate;
using Legendigital.Framework.Common.BaseFramework.Entity.Tables;
using Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables.Container;
using Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;

namespace Legendigital.Framework.Common.BaseFramework.Bussiness.Wrappers
{
    public partial class SystemShortMessageLogWrapper    //: BaseSpringNHibernateWrapper<SystemShortMessageLogEntity, ISystemShortMessageLogServiceProxy, SystemShortMessageLogWrapper,int>
    {
        #region Member

		internal static readonly ISystemShortMessageLogServiceProxy businessProxy = ((Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables.Container.BaseFrameworkServiceProxyContainer)(ContextRegistry.GetContext().GetObject("BaseFrameworkServiceProxyContainerIocID", typeof(Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables.Container.BaseFrameworkServiceProxyContainer)))).SystemShortMessageLogServiceProxyInstance;
		
		
		internal SystemShortMessageLogEntity Entity
        {
            get { return this.entity; }
        }
		
        #endregion

        #region Construtor
		public SystemShortMessageLogWrapper() : base(new SystemShortMessageLogEntity())
        {
            
        }

        internal SystemShortMessageLogWrapper(SystemShortMessageLogEntity entityObj)
            : base(entityObj)
        {
        }
		#endregion

        #region Process Column Name
        private static string ProcessColumnName(string columnName)
        {
            switch (columnName)
            {
              default:
                    return columnName;
            }
        }

        private static void ProcessQueryFilters(List<QueryFilter> filters)
        {
            foreach (QueryFilter queryFilter in filters)
            {
                queryFilter.FilterFieldName = ProcessColumnName(queryFilter.FilterFieldName);
            }
        }
		#endregion
		
      #region 公共常量

		public static readonly string CLASS_FULL_NAME = "Legendigital.Framework.Common.BaseFramework.Entity.Tables.SystemShortMessageLogEntity";
		public static readonly string PROPERTY_NAME_ID = "Id";
		public static readonly string PROPERTY_NAME_RECID = "RecID";
		public static readonly string PROPERTY_NAME_MESSAGEID = "MessageID";
		public static readonly string PROPERTY_NAME_STATUE = "Statue";
		
        #endregion
	
 
      	
	
	
		 
		
		
		
		


		#region Public Property
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public int Id
		{
			get
			{
				return entity.Id;
			}
			set
			{
				entity.Id = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public int? RecID
		{
			get
			{
				return entity.RecID;
			}
			set
			{
				entity.RecID = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public int? MessageID
		{
			get
			{
				return entity.MessageID;
			}
			set
			{
				entity.MessageID = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string Statue
		{
			get
			{
				return entity.Statue;
			}
			set
			{
				entity.Statue = value;
			}
		}
		#endregion 


		#region Query Property
		
		
      	
   
		#endregion


        #region "FKQuery"



        #endregion








        #region Static Common Data Operation
		
		internal static List<SystemShortMessageLogWrapper> ConvertToWrapperList(List<SystemShortMessageLogEntity> entitylist)
        {
            List<SystemShortMessageLogWrapper> list = new List<SystemShortMessageLogWrapper>();
            foreach (SystemShortMessageLogEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }

		internal static List<SystemShortMessageLogWrapper> ConvertToWrapperList(IList<SystemShortMessageLogEntity> entitylist)
        {
            List<SystemShortMessageLogWrapper> list = new List<SystemShortMessageLogWrapper>();
            foreach (SystemShortMessageLogEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }
		
		internal static List<SystemShortMessageLogEntity> ConvertToEntityList(List<SystemShortMessageLogWrapper> wrapperlist)
        {
            List<SystemShortMessageLogEntity> list = new List<SystemShortMessageLogEntity>();
            foreach (SystemShortMessageLogWrapper wrapper in wrapperlist)
            {
                list.Add(wrapper.entity);
            }
            return list;
        }

        internal static SystemShortMessageLogWrapper ConvertEntityToWrapper(SystemShortMessageLogEntity entity)
        {
            if (entity == null)
                return null;
				
            if (entity.Id == 0)
                return null;

            return new SystemShortMessageLogWrapper(entity);
        }
		
		#endregion

    }//End Class
}// End Namespace

