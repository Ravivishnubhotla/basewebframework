// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using Spring.Context.Support;
using Common.Logging;
using Legendigital.Framework.Common.BaseFramework.Entity.Tables;
using Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables.Container;
using Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;

namespace Legendigital.Framework.Common.BaseFramework.Bussiness.Wrappers
{
    public partial class SystemEmailTemplateWrapper
    {
        #region Member

		internal static readonly ISystemEmailTemplateServiceProxy businessProxy = ((Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables.Container.BaseFrameworkServiceProxyContainer)(ContextRegistry.GetContext().GetObject("BaseFrameworkServiceProxyContainerIocID", typeof(Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables.Container.BaseFrameworkServiceProxyContainer)))).SystemEmailTemplateServiceProxyInstance;
	 
	 
        internal SystemEmailTemplateEntity entity;
		
		private static ILog logger = null;

        public static ILog Logger
        {
            get
            {
                if (logger == null)
                    logger = LogManager.GetLogger(typeof(SystemEmailTemplateWrapper));
                return logger;
            }
        }

        #endregion

        #region Construtor
        public SystemEmailTemplateWrapper() : this(new SystemEmailTemplateEntity())
        {
            
        }

        internal SystemEmailTemplateWrapper(SystemEmailTemplateEntity entityObj)
        {
            entity = entityObj;
        }
		#endregion
		
		#region Equals 和 HashCode 方法覆盖
		public override bool Equals(object obj)
        {
            if (obj == null && entity!=null)
            {
                if (entity.EmailTemplateID == 0)
                    return true;

                return false;
            }
            return entity.Equals(obj);
        }

        public override int GetHashCode()
        {
            return entity.GetHashCode();
        }
		#endregion
		
        #region 公共常量

		public static readonly string CLASS_FULL_NAME = "Legendigital.Framework.Common.BaseFramework.Entity.Tables.SystemEmailTemplateEntity";
		public static readonly string PROPERTY_NAME_EMAILTEMPLATEID = "EmailTemplateID";
		public static readonly string PROPERTY_NAME_NAME = "Name";
		public static readonly string PROPERTY_NAME_CODE = "Code";
		public static readonly string PROPERTY_NAME_DESCRIPTION = "Description";
		public static readonly string PROPERTY_NAME_TEMPLATETYPE = "TemplateType";
		public static readonly string PROPERTY_NAME_TITLETEMPLATE = "TitleTemplate";
		public static readonly string PROPERTY_NAME_BODYTEMPLATE = "BodyTemplate";
		public static readonly string PROPERTY_NAME_ISHTMLEMAIL = "IsHtmlEmail";
		public static readonly string PROPERTY_NAME_ISENABLE = "IsEnable";
		public static readonly string PROPERTY_NAME_CREATEDATE = "CreateDate";
		public static readonly string PROPERTY_NAME_CREATEBY = "CreateBy";
		
        #endregion


		#region Public Property
		/// <summary>
		/// 
		/// </summary>		
		public int EmailTemplateID
		{
			get
			{
				return entity.EmailTemplateID;
			}
			set
			{
				entity.EmailTemplateID = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string Name
		{
			get
			{
				return entity.Name;
			}
			set
			{
				entity.Name = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string Code
		{
			get
			{
				return entity.Code;
			}
			set
			{
				entity.Code = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string Description
		{
			get
			{
				return entity.Description;
			}
			set
			{
				entity.Description = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string TemplateType
		{
			get
			{
				return entity.TemplateType;
			}
			set
			{
				entity.TemplateType = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string TitleTemplate
		{
			get
			{
				return entity.TitleTemplate;
			}
			set
			{
				entity.TitleTemplate = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string BodyTemplate
		{
			get
			{
				return entity.BodyTemplate;
			}
			set
			{
				entity.BodyTemplate = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public bool? IsHtmlEmail
		{
			get
			{
				return entity.IsHtmlEmail;
			}
			set
			{
				entity.IsHtmlEmail = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public bool? IsEnable
		{
			get
			{
				return entity.IsEnable;
			}
			set
			{
				entity.IsEnable = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public DateTime? CreateDate
		{
			get
			{
				return entity.CreateDate;
			}
			set
			{
				entity.CreateDate = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public int? CreateBy
		{
			get
			{
				return entity.CreateBy;
			}
			set
			{
				entity.CreateBy = value;
			}
		}
		#endregion 





        #region "FKQuery"



        #endregion








        #region Static Common Data Operation
		
		internal static List<SystemEmailTemplateWrapper> ConvertToWrapperList(List<SystemEmailTemplateEntity> entitylist)
        {
            List<SystemEmailTemplateWrapper> list = new List<SystemEmailTemplateWrapper>();
            foreach (SystemEmailTemplateEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }

		internal static List<SystemEmailTemplateWrapper> ConvertToWrapperList(IList<SystemEmailTemplateEntity> entitylist)
        {
            List<SystemEmailTemplateWrapper> list = new List<SystemEmailTemplateWrapper>();
            foreach (SystemEmailTemplateEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }
		
		internal static List<SystemEmailTemplateEntity> ConvertToEntityList(List<SystemEmailTemplateWrapper> wrapperlist)
        {
            List<SystemEmailTemplateEntity> list = new List<SystemEmailTemplateEntity>();
            foreach (SystemEmailTemplateWrapper wrapper in wrapperlist)
            {
                list.Add(wrapper.entity);
            }
            return list;
        }

        internal static SystemEmailTemplateWrapper ConvertEntityToWrapper(SystemEmailTemplateEntity entity)
        {
            if (entity == null)
                return null;
				
            if (entity.EmailTemplateID == 0)
                return null;

            return new SystemEmailTemplateWrapper(entity);
        }
		
		#endregion

    }//End Class
}// End Namespace

