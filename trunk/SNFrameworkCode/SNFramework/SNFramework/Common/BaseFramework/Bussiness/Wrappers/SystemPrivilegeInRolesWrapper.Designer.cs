// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using Spring.Context.Support;
using Common.Logging;
using Legendigital.Framework.Common.BaseFramework.Entity.Tables;
using Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables.Container;
using Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;

namespace Legendigital.Framework.Common.BaseFramework.Bussiness.Wrappers
{
    public partial class SystemPrivilegeInRolesWrapper
    {
        #region Member

		internal static readonly ISystemPrivilegeInRolesServiceProxy businessProxy = ((Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables.Container.BaseFrameworkServiceProxyContainer)(ContextRegistry.GetContext().GetObject("BaseFrameworkServiceProxyContainerIocID", typeof(Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables.Container.BaseFrameworkServiceProxyContainer)))).SystemPrivilegeInRolesServiceProxyInstance;
	 
	 
        internal SystemPrivilegeInRolesEntity entity;
		
		private static ILog logger = null;

        public static ILog Logger
        {
            get
            {
                if (logger == null)
                    logger = LogManager.GetLogger(typeof(SystemPrivilegeInRolesWrapper));
                return logger;
            }
        }

        #endregion

        #region Construtor
        public SystemPrivilegeInRolesWrapper() : this(new SystemPrivilegeInRolesEntity())
        {
            
        }

        internal SystemPrivilegeInRolesWrapper(SystemPrivilegeInRolesEntity entityObj)
        {
            entity = entityObj;
        }
		#endregion
		
		#region Equals 和 HashCode 方法覆盖
		public override bool Equals(object obj)
        {
            if (obj == null && entity!=null)
            {
                if (entity.PrivilegeRoleID == 0)
                    return true;

                return false;
            }
            return entity.Equals(obj);
        }

        public override int GetHashCode()
        {
            return entity.GetHashCode();
        }
		#endregion
		
      #region 公共常量

		public static readonly string CLASS_FULL_NAME = "Legendigital.Framework.Common.BaseFramework.Entity.Tables.SystemPrivilegeInRolesEntity";
		public static readonly string PROPERTY_NAME_PRIVILEGEROLEID = "PrivilegeRoleID";
		public static readonly string PROPERTY_NAME_ROLEID = "RoleID";
		public static readonly string PROPERTY_NAME_PRIVILEGEID = "PrivilegeID";
		public static readonly string PROPERTY_NAME_PRIVILEGEROLEVALUETYPE = "PrivilegeRoleValueType";
		public static readonly string PROPERTY_NAME_ENABLETYPE = "EnableType";
		public static readonly string PROPERTY_NAME_CREATETIME = "CreateTime";
		public static readonly string PROPERTY_NAME_UPDATETIME = "UpdateTime";
		public static readonly string PROPERTY_NAME_EXPIRYTIME = "ExpiryTime";
		public static readonly string PROPERTY_NAME_ENABLEPARAMETER = "EnableParameter";
		public static readonly string PROPERTY_NAME_PRIVILEGEROLEVALUE = "PrivilegeRoleValue";
		
        #endregion
	
 
		#region roleID字段外键查询字段
        public static readonly string PROPERTY_ROLEID_ALIAS_NAME = "RoleID_SystemPrivilegeInRolesEntity_Alias";
		public static readonly string PROPERTY_ROLEID_ROLEID = "RoleID_SystemPrivilegeInRolesEntity_Alias.RoleID";
		public static readonly string PROPERTY_ROLEID_ROLENAME = "RoleID_SystemPrivilegeInRolesEntity_Alias.RoleName";
		public static readonly string PROPERTY_ROLEID_ROLECODE = "RoleID_SystemPrivilegeInRolesEntity_Alias.RoleCode";
		public static readonly string PROPERTY_ROLEID_ROLEDESCRIPTION = "RoleID_SystemPrivilegeInRolesEntity_Alias.RoleDescription";
		public static readonly string PROPERTY_ROLEID_ROLEISSYSTEMROLE = "RoleID_SystemPrivilegeInRolesEntity_Alias.RoleIsSystemRole";
		public static readonly string PROPERTY_ROLEID_ROLETYPE = "RoleID_SystemPrivilegeInRolesEntity_Alias.RoleType";
		public static readonly string PROPERTY_ROLEID_CREATEBY = "RoleID_SystemPrivilegeInRolesEntity_Alias.CreateBy";
		public static readonly string PROPERTY_ROLEID_CREATEAT = "RoleID_SystemPrivilegeInRolesEntity_Alias.CreateAt";
		public static readonly string PROPERTY_ROLEID_LASTMODIFYBY = "RoleID_SystemPrivilegeInRolesEntity_Alias.LastModifyBy";
		public static readonly string PROPERTY_ROLEID_LASTMODIFYAT = "RoleID_SystemPrivilegeInRolesEntity_Alias.LastModifyAt";
		public static readonly string PROPERTY_ROLEID_LASTMODIFYCOMMENT = "RoleID_SystemPrivilegeInRolesEntity_Alias.LastModifyComment";
		#endregion
		#region privilegeID字段外键查询字段
        public static readonly string PROPERTY_PRIVILEGEID_ALIAS_NAME = "PrivilegeID_SystemPrivilegeInRolesEntity_Alias";
		public static readonly string PROPERTY_PRIVILEGEID_PRIVILEGEID = "PrivilegeID_SystemPrivilegeInRolesEntity_Alias.PrivilegeID";
		public static readonly string PROPERTY_PRIVILEGEID_OPERATIONID = "PrivilegeID_SystemPrivilegeInRolesEntity_Alias.OperationID";
		public static readonly string PROPERTY_PRIVILEGEID_RESOURCESID = "PrivilegeID_SystemPrivilegeInRolesEntity_Alias.ResourcesID";
		public static readonly string PROPERTY_PRIVILEGEID_PRIVILEGECNNAME = "PrivilegeID_SystemPrivilegeInRolesEntity_Alias.PrivilegeCnName";
		public static readonly string PROPERTY_PRIVILEGEID_PRIVILEGEENNAME = "PrivilegeID_SystemPrivilegeInRolesEntity_Alias.PrivilegeEnName";
		public static readonly string PROPERTY_PRIVILEGEID_DEFAULTVALUE = "PrivilegeID_SystemPrivilegeInRolesEntity_Alias.DefaultValue";
		public static readonly string PROPERTY_PRIVILEGEID_DESCRIPTION = "PrivilegeID_SystemPrivilegeInRolesEntity_Alias.Description";
		public static readonly string PROPERTY_PRIVILEGEID_PRIVILEGEORDER = "PrivilegeID_SystemPrivilegeInRolesEntity_Alias.PrivilegeOrder";
		public static readonly string PROPERTY_PRIVILEGEID_PRIVILEGETYPE = "PrivilegeID_SystemPrivilegeInRolesEntity_Alias.PrivilegeType";
		public static readonly string PROPERTY_PRIVILEGEID_CREATEBY = "PrivilegeID_SystemPrivilegeInRolesEntity_Alias.CreateBy";
		public static readonly string PROPERTY_PRIVILEGEID_CREATEAT = "PrivilegeID_SystemPrivilegeInRolesEntity_Alias.CreateAt";
		public static readonly string PROPERTY_PRIVILEGEID_LASTMODIFYBY = "PrivilegeID_SystemPrivilegeInRolesEntity_Alias.LastModifyBy";
		public static readonly string PROPERTY_PRIVILEGEID_LASTMODIFYAT = "PrivilegeID_SystemPrivilegeInRolesEntity_Alias.LastModifyAt";
		public static readonly string PROPERTY_PRIVILEGEID_LASTMODIFYCOMMENT = "PrivilegeID_SystemPrivilegeInRolesEntity_Alias.LastModifyComment";
		#endregion
      	
	
	
		 
		
		
		
		


		#region Public Property
		/// <summary>
		/// ??
		/// </summary>		
		public int PrivilegeRoleID
		{
			get
			{
				return entity.PrivilegeRoleID;
			}
			set
			{
				entity.PrivilegeRoleID = value;
			}
		}
		/// <summary>
		/// ??ID
		/// </summary>		
		public SystemRoleWrapper RoleID
		{
			get
			{
				return SystemRoleWrapper.ConvertEntityToWrapper(entity.RoleID) ;
			}
			set
			{
				entity.RoleID = ((value == null) ? null : value.entity);
			}
		}
		/// <summary>
		/// ??ID
		/// </summary>		
		public SystemPrivilegeWrapper PrivilegeID
		{
			get
			{
				return SystemPrivilegeWrapper.ConvertEntityToWrapper(entity.PrivilegeID) ;
			}
			set
			{
				entity.PrivilegeID = ((value == null) ? null : value.entity);
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string PrivilegeRoleValueType
		{
			get
			{
				return entity.PrivilegeRoleValueType;
			}
			set
			{
				entity.PrivilegeRoleValueType = value;
			}
		}
		/// <summary>
		/// ????
		/// </summary>		
		public string EnableType
		{
			get
			{
				return entity.EnableType;
			}
			set
			{
				entity.EnableType = value;
			}
		}
		/// <summary>
		/// ????
		/// </summary>		
		public DateTime CreateTime
		{
			get
			{
				return entity.CreateTime;
			}
			set
			{
				entity.CreateTime = value;
			}
		}
		/// <summary>
		/// ??????
		/// </summary>		
		public DateTime UpdateTime
		{
			get
			{
				return entity.UpdateTime;
			}
			set
			{
				entity.UpdateTime = value;
			}
		}
		/// <summary>
		/// ????
		/// </summary>		
		public DateTime ExpiryTime
		{
			get
			{
				return entity.ExpiryTime;
			}
			set
			{
				entity.ExpiryTime = value;
			}
		}
		/// <summary>
		/// ??????
		/// </summary>		
		public bool EnableParameter
		{
			get
			{
				return entity.EnableParameter;
			}
			set
			{
				entity.EnableParameter = value;
			}
		}
		/// <summary>
		/// ?????
		/// </summary>		
		public byte[] PrivilegeRoleValue
		{
			get
			{
				return entity.PrivilegeRoleValue;
			}
			set
			{
				entity.PrivilegeRoleValue = value;
			}
		}
		#endregion 





        #region "FKQuery"
		
        public static List<SystemPrivilegeInRolesWrapper> FindAllByOrderByAndFilterAndRoleID(string orderByColumnName, bool isDesc,   SystemRoleWrapper roleID,  PageQueryParams pageQueryParams)
        {
            return ConvertToWrapperList(businessProxy.FindAllByOrderByAndFilterAndRoleID(orderByColumnName, isDesc,   roleID.entity, pageQueryParams));
        }

        public static List<SystemPrivilegeInRolesWrapper> FindAllByRoleID(SystemRoleWrapper roleID)
        {
            return ConvertToWrapperList(businessProxy.FindAllByRoleID(roleID.entity));
        }
		
		
        public static List<SystemPrivilegeInRolesWrapper> FindAllByOrderByAndFilterAndPrivilegeID(string orderByColumnName, bool isDesc,   SystemPrivilegeWrapper privilegeID,  PageQueryParams pageQueryParams)
        {
            return ConvertToWrapperList(businessProxy.FindAllByOrderByAndFilterAndPrivilegeID(orderByColumnName, isDesc,   privilegeID.entity, pageQueryParams));
        }

        public static List<SystemPrivilegeInRolesWrapper> FindAllByPrivilegeID(SystemPrivilegeWrapper privilegeID)
        {
            return ConvertToWrapperList(businessProxy.FindAllByPrivilegeID(privilegeID.entity));
        }
		



        #endregion








        #region Static Common Data Operation
		
		internal static List<SystemPrivilegeInRolesWrapper> ConvertToWrapperList(List<SystemPrivilegeInRolesEntity> entitylist)
        {
            List<SystemPrivilegeInRolesWrapper> list = new List<SystemPrivilegeInRolesWrapper>();
            foreach (SystemPrivilegeInRolesEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }

		internal static List<SystemPrivilegeInRolesWrapper> ConvertToWrapperList(IList<SystemPrivilegeInRolesEntity> entitylist)
        {
            List<SystemPrivilegeInRolesWrapper> list = new List<SystemPrivilegeInRolesWrapper>();
            foreach (SystemPrivilegeInRolesEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }
		
		internal static List<SystemPrivilegeInRolesEntity> ConvertToEntityList(List<SystemPrivilegeInRolesWrapper> wrapperlist)
        {
            List<SystemPrivilegeInRolesEntity> list = new List<SystemPrivilegeInRolesEntity>();
            foreach (SystemPrivilegeInRolesWrapper wrapper in wrapperlist)
            {
                list.Add(wrapper.entity);
            }
            return list;
        }

        internal static SystemPrivilegeInRolesWrapper ConvertEntityToWrapper(SystemPrivilegeInRolesEntity entity)
        {
            if (entity == null)
                return null;
				
            if (entity.PrivilegeRoleID == 0)
                return null;

            return new SystemPrivilegeInRolesWrapper(entity);
        }
		
		#endregion

    }//End Class
}// End Namespace

