// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using Spring.Context.Support;
using Common.Logging;
using Legendigital.Framework.Common.BaseFramework.Entity.Tables;
using Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables.Container;
using Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;

namespace Legendigital.Framework.Common.BaseFramework.Bussiness.Wrappers
{
    public partial class SystemUserGroupRoleRelationWrapper
    {
        #region Member

		internal static readonly ISystemUserGroupRoleRelationServiceProxy businessProxy = ((Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables.Container.BaseFrameworkServiceProxyContainer)(ContextRegistry.GetContext().GetObject("BaseFrameworkServiceProxyContainerIocID", typeof(Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables.Container.BaseFrameworkServiceProxyContainer)))).SystemUserGroupRoleRelationServiceProxyInstance;
	 
	 
        internal SystemUserGroupRoleRelationEntity entity;
		
		private static ILog logger = null;

        public static ILog Logger
        {
            get
            {
                if (logger == null)
                    logger = LogManager.GetLogger(typeof(SystemUserGroupRoleRelationWrapper));
                return logger;
            }
        }

        #endregion

        #region Construtor
        public SystemUserGroupRoleRelationWrapper() : this(new SystemUserGroupRoleRelationEntity())
        {
            
        }

        internal SystemUserGroupRoleRelationWrapper(SystemUserGroupRoleRelationEntity entityObj)
        {
            entity = entityObj;
        }
		#endregion
		
		#region Equals 和 HashCode 方法覆盖
		public override bool Equals(object obj)
        {
            if (obj == null && entity!=null)
            {
                if (entity.UserGroupRoleID == 0)
                    return true;

                return false;
            }
            return entity.Equals(obj);
        }

        public override int GetHashCode()
        {
            return entity.GetHashCode();
        }
		#endregion
		
      #region 公共常量

		public static readonly string CLASS_FULL_NAME = "Legendigital.Framework.Common.BaseFramework.Entity.Tables.SystemUserGroupRoleRelationEntity";
		public static readonly string PROPERTY_NAME_USERGROUPROLEID = "UserGroupRoleID";
		public static readonly string PROPERTY_NAME_ROLEID = "RoleID";
		public static readonly string PROPERTY_NAME_USERGROUPID = "UserGroupID";
		
        #endregion
	
 
		#region roleID字段外键查询字段
        public const string PROPERTY_ROLEID_ALIAS_NAME = "RoleID_SystemUserGroupRoleRelationEntity_Alias";
		public const string PROPERTY_ROLEID_ROLEID = "RoleID_SystemUserGroupRoleRelationEntity_Alias.RoleID";
		public const string PROPERTY_ROLEID_ROLENAME = "RoleID_SystemUserGroupRoleRelationEntity_Alias.RoleName";
		public const string PROPERTY_ROLEID_ROLECODE = "RoleID_SystemUserGroupRoleRelationEntity_Alias.RoleCode";
		public const string PROPERTY_ROLEID_ROLEDESCRIPTION = "RoleID_SystemUserGroupRoleRelationEntity_Alias.RoleDescription";
		public const string PROPERTY_ROLEID_ROLEISSYSTEMROLE = "RoleID_SystemUserGroupRoleRelationEntity_Alias.RoleIsSystemRole";
		public const string PROPERTY_ROLEID_ROLETYPE = "RoleID_SystemUserGroupRoleRelationEntity_Alias.RoleType";
		public const string PROPERTY_ROLEID_CREATEBY = "RoleID_SystemUserGroupRoleRelationEntity_Alias.CreateBy";
		public const string PROPERTY_ROLEID_CREATEAT = "RoleID_SystemUserGroupRoleRelationEntity_Alias.CreateAt";
		public const string PROPERTY_ROLEID_LASTMODIFYBY = "RoleID_SystemUserGroupRoleRelationEntity_Alias.LastModifyBy";
		public const string PROPERTY_ROLEID_LASTMODIFYAT = "RoleID_SystemUserGroupRoleRelationEntity_Alias.LastModifyAt";
		public const string PROPERTY_ROLEID_LASTMODIFYCOMMENT = "RoleID_SystemUserGroupRoleRelationEntity_Alias.LastModifyComment";
		#endregion
		#region userGroupID字段外键查询字段
        public const string PROPERTY_USERGROUPID_ALIAS_NAME = "UserGroupID_SystemUserGroupRoleRelationEntity_Alias";
		public const string PROPERTY_USERGROUPID_GROUPID = "UserGroupID_SystemUserGroupRoleRelationEntity_Alias.GroupID";
		public const string PROPERTY_USERGROUPID_GROUPNAMECN = "UserGroupID_SystemUserGroupRoleRelationEntity_Alias.GroupNameCn";
		public const string PROPERTY_USERGROUPID_GROUPNAMEEN = "UserGroupID_SystemUserGroupRoleRelationEntity_Alias.GroupNameEn";
		public const string PROPERTY_USERGROUPID_GROUPDESCRIPTION = "UserGroupID_SystemUserGroupRoleRelationEntity_Alias.GroupDescription";
		public const string PROPERTY_USERGROUPID_CREATEBY = "UserGroupID_SystemUserGroupRoleRelationEntity_Alias.CreateBy";
		public const string PROPERTY_USERGROUPID_CREATEAT = "UserGroupID_SystemUserGroupRoleRelationEntity_Alias.CreateAt";
		public const string PROPERTY_USERGROUPID_LASTMODIFYBY = "UserGroupID_SystemUserGroupRoleRelationEntity_Alias.LastModifyBy";
		public const string PROPERTY_USERGROUPID_LASTMODIFYAT = "UserGroupID_SystemUserGroupRoleRelationEntity_Alias.LastModifyAt";
		public const string PROPERTY_USERGROUPID_LASTMODIFYCOMMENT = "UserGroupID_SystemUserGroupRoleRelationEntity_Alias.LastModifyComment";
		#endregion
      	
	
	
		 
		
		
		
		


		#region Public Property
		/// <summary>
		/// ??
		/// </summary>		
		public int UserGroupRoleID
		{
			get
			{
				return entity.UserGroupRoleID;
			}
			set
			{
				entity.UserGroupRoleID = value;
			}
		}
		/// <summary>
		/// ??ID
		/// </summary>		
		public SystemRoleWrapper RoleID
		{
			get
			{
				return SystemRoleWrapper.ConvertEntityToWrapper(entity.RoleID) ;
			}
			set
			{
				entity.RoleID = ((value == null) ? null : value.entity);
			}
		}
		/// <summary>
		/// ??ID
		/// </summary>		
		public SystemUserGroupWrapper UserGroupID
		{
			get
			{
				return SystemUserGroupWrapper.ConvertEntityToWrapper(entity.UserGroupID) ;
			}
			set
			{
				entity.UserGroupID = ((value == null) ? null : value.entity);
			}
		}
		#endregion 


		#region Query Property
		
		
		#region roleID字段外键查询字段
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_ROLEID_ROLEID)]
        public int? RoleID_RoleID
        {
            get
            {
                if (this. RoleID == null)
                    return null;
                return  RoleID.RoleID;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_ROLEID_ROLENAME)]
        public string RoleID_RoleName
        {
            get
            {
                if (this. RoleID == null)
                    return null;
                return  RoleID.RoleName;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_ROLEID_ROLECODE)]
        public string RoleID_RoleCode
        {
            get
            {
                if (this. RoleID == null)
                    return null;
                return  RoleID.RoleCode;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_ROLEID_ROLEDESCRIPTION)]
        public string RoleID_RoleDescription
        {
            get
            {
                if (this. RoleID == null)
                    return null;
                return  RoleID.RoleDescription;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_ROLEID_ROLEISSYSTEMROLE)]
        public bool? RoleID_RoleIsSystemRole
        {
            get
            {
                if (this. RoleID == null)
                    return null;
                return  RoleID.RoleIsSystemRole;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_ROLEID_ROLETYPE)]
        public string RoleID_RoleType
        {
            get
            {
                if (this. RoleID == null)
                    return null;
                return  RoleID.RoleType;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_ROLEID_CREATEBY)]
        public int? RoleID_CreateBy
        {
            get
            {
                if (this. RoleID == null)
                    return null;
                return  RoleID.CreateBy;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_ROLEID_CREATEAT)]
        public DateTime? RoleID_CreateAt
        {
            get
            {
                if (this. RoleID == null)
                    return null;
                return  RoleID.CreateAt;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_ROLEID_LASTMODIFYBY)]
        public int? RoleID_LastModifyBy
        {
            get
            {
                if (this. RoleID == null)
                    return null;
                return  RoleID.LastModifyBy;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_ROLEID_LASTMODIFYAT)]
        public DateTime? RoleID_LastModifyAt
        {
            get
            {
                if (this. RoleID == null)
                    return null;
                return  RoleID.LastModifyAt;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_ROLEID_LASTMODIFYCOMMENT)]
        public string RoleID_LastModifyComment
        {
            get
            {
                if (this. RoleID == null)
                    return null;
                return  RoleID.LastModifyComment;
            }
        }
		#endregion
		#region userGroupID字段外键查询字段
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_USERGROUPID_GROUPID)]
        public int? UserGroupID_GroupID
        {
            get
            {
                if (this. UserGroupID == null)
                    return null;
                return  UserGroupID.GroupID;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_USERGROUPID_GROUPNAMECN)]
        public string UserGroupID_GroupNameCn
        {
            get
            {
                if (this. UserGroupID == null)
                    return null;
                return  UserGroupID.GroupNameCn;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_USERGROUPID_GROUPNAMEEN)]
        public string UserGroupID_GroupNameEn
        {
            get
            {
                if (this. UserGroupID == null)
                    return null;
                return  UserGroupID.GroupNameEn;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_USERGROUPID_GROUPDESCRIPTION)]
        public string UserGroupID_GroupDescription
        {
            get
            {
                if (this. UserGroupID == null)
                    return null;
                return  UserGroupID.GroupDescription;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_USERGROUPID_CREATEBY)]
        public int? UserGroupID_CreateBy
        {
            get
            {
                if (this. UserGroupID == null)
                    return null;
                return  UserGroupID.CreateBy;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_USERGROUPID_CREATEAT)]
        public DateTime? UserGroupID_CreateAt
        {
            get
            {
                if (this. UserGroupID == null)
                    return null;
                return  UserGroupID.CreateAt;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_USERGROUPID_LASTMODIFYBY)]
        public int? UserGroupID_LastModifyBy
        {
            get
            {
                if (this. UserGroupID == null)
                    return null;
                return  UserGroupID.LastModifyBy;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_USERGROUPID_LASTMODIFYAT)]
        public DateTime? UserGroupID_LastModifyAt
        {
            get
            {
                if (this. UserGroupID == null)
                    return null;
                return  UserGroupID.LastModifyAt;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_USERGROUPID_LASTMODIFYCOMMENT)]
        public string UserGroupID_LastModifyComment
        {
            get
            {
                if (this. UserGroupID == null)
                    return null;
                return  UserGroupID.LastModifyComment;
            }
        }
		#endregion
      	
   
		#endregion


        #region "FKQuery"
		
        public static List<SystemUserGroupRoleRelationWrapper> FindAllByOrderByAndFilterAndRoleID(string orderByColumnName, bool isDesc,   SystemRoleWrapper roleID,  PageQueryParams pageQueryParams)
        {
            return ConvertToWrapperList(businessProxy.FindAllByOrderByAndFilterAndRoleID(orderByColumnName, isDesc,   roleID.entity, pageQueryParams));
        }

        public static List<SystemUserGroupRoleRelationWrapper> FindAllByRoleID(SystemRoleWrapper roleID)
        {
            return ConvertToWrapperList(businessProxy.FindAllByRoleID(roleID.entity));
        }
		
		
        public static List<SystemUserGroupRoleRelationWrapper> FindAllByOrderByAndFilterAndUserGroupID(string orderByColumnName, bool isDesc,   SystemUserGroupWrapper userGroupID,  PageQueryParams pageQueryParams)
        {
            return ConvertToWrapperList(businessProxy.FindAllByOrderByAndFilterAndUserGroupID(orderByColumnName, isDesc,   userGroupID.entity, pageQueryParams));
        }

        public static List<SystemUserGroupRoleRelationWrapper> FindAllByUserGroupID(SystemUserGroupWrapper userGroupID)
        {
            return ConvertToWrapperList(businessProxy.FindAllByUserGroupID(userGroupID.entity));
        }
		



        #endregion








        #region Static Common Data Operation
		
		internal static List<SystemUserGroupRoleRelationWrapper> ConvertToWrapperList(List<SystemUserGroupRoleRelationEntity> entitylist)
        {
            List<SystemUserGroupRoleRelationWrapper> list = new List<SystemUserGroupRoleRelationWrapper>();
            foreach (SystemUserGroupRoleRelationEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }

		internal static List<SystemUserGroupRoleRelationWrapper> ConvertToWrapperList(IList<SystemUserGroupRoleRelationEntity> entitylist)
        {
            List<SystemUserGroupRoleRelationWrapper> list = new List<SystemUserGroupRoleRelationWrapper>();
            foreach (SystemUserGroupRoleRelationEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }
		
		internal static List<SystemUserGroupRoleRelationEntity> ConvertToEntityList(List<SystemUserGroupRoleRelationWrapper> wrapperlist)
        {
            List<SystemUserGroupRoleRelationEntity> list = new List<SystemUserGroupRoleRelationEntity>();
            foreach (SystemUserGroupRoleRelationWrapper wrapper in wrapperlist)
            {
                list.Add(wrapper.entity);
            }
            return list;
        }

        internal static SystemUserGroupRoleRelationWrapper ConvertEntityToWrapper(SystemUserGroupRoleRelationEntity entity)
        {
            if (entity == null)
                return null;
				
            if (entity.UserGroupRoleID == 0)
                return null;

            return new SystemUserGroupRoleRelationWrapper(entity);
        }
		
		#endregion

    }//End Class
}// End Namespace

