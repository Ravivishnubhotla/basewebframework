// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using Spring.Context.Support;
using Common.Logging;
using Legendigital.Framework.Common.Bussiness.NHibernate;
using Legendigital.Framework.Common.BaseFramework.Entity.Tables;
using Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables.Container;
using Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;

namespace Legendigital.Framework.Common.BaseFramework.Bussiness.Wrappers
{
    public partial class SystemIPLocationWrapper    //: BaseSpringNHibernateWrapper<SystemIPLocationEntity, ISystemIPLocationServiceProxy, SystemIPLocationWrapper,int>
    {
        #region Member

		internal static readonly ISystemIPLocationServiceProxy businessProxy = ((Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables.Container.BaseFrameworkServiceProxyContainer)(ContextRegistry.GetContext().GetObject("BaseFrameworkServiceProxyContainerIocID", typeof(Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables.Container.BaseFrameworkServiceProxyContainer)))).SystemIPLocationServiceProxyInstance;
		
		
		internal SystemIPLocationEntity Entity
        {
            get { return this.entity; }
        }
		
        #endregion

        #region Construtor
		public SystemIPLocationWrapper() : base(new SystemIPLocationEntity())
        {
            
        }

        internal SystemIPLocationWrapper(SystemIPLocationEntity entityObj)
            : base(entityObj)
        {
        }
		#endregion

        #region Process Column Name
        private static string ProcessColumnName(string columnName)
        {
            switch (columnName)
            {
              default:
                    return columnName;
            }
        }

        private static void ProcessQueryFilters(List<QueryFilter> filters)
        {
            foreach (QueryFilter queryFilter in filters)
            {
                queryFilter.FilterFieldName = ProcessColumnName(queryFilter.FilterFieldName);
            }
        }
		#endregion
		
      #region 公共常量

		public static readonly string CLASS_FULL_NAME = "Legendigital.Framework.Common.BaseFramework.Entity.Tables.SystemIPLocationEntity";
		public static readonly string PROPERTY_NAME_ID = "Id";
		public static readonly string PROPERTY_NAME_STARTIPNUM = "StartIPNum";
		public static readonly string PROPERTY_NAME_STARTIPTEXT = "StartIPText";
		public static readonly string PROPERTY_NAME_ENDIPNUM = "EndIPNum";
		public static readonly string PROPERTY_NAME_ENDIPTEXT = "EndIPText";
		public static readonly string PROPERTY_NAME_COUNTRY = "Country";
		public static readonly string PROPERTY_NAME_LOCAL = "Local";
		
        #endregion
	
 
      	
	
	
		 
		
		
		
		


		#region Public Property
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public int Id
		{
			get
			{
				return entity.Id;
			}
			set
			{
				entity.Id = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public decimal StartIPNum
		{
			get
			{
				return entity.StartIPNum;
			}
			set
			{
				entity.StartIPNum = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string StartIPText
		{
			get
			{
				return entity.StartIPText;
			}
			set
			{
				entity.StartIPText = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public decimal EndIPNum
		{
			get
			{
				return entity.EndIPNum;
			}
			set
			{
				entity.EndIPNum = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string EndIPText
		{
			get
			{
				return entity.EndIPText;
			}
			set
			{
				entity.EndIPText = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string Country
		{
			get
			{
				return entity.Country;
			}
			set
			{
				entity.Country = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string Local
		{
			get
			{
				return entity.Local;
			}
			set
			{
				entity.Local = value;
			}
		}
		#endregion 


		#region Query Property
		
		
      	
   
		#endregion


        #region "FKQuery"



        #endregion








        #region Static Common Data Operation
		
		internal static List<SystemIPLocationWrapper> ConvertToWrapperList(List<SystemIPLocationEntity> entitylist)
        {
            List<SystemIPLocationWrapper> list = new List<SystemIPLocationWrapper>();
            foreach (SystemIPLocationEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }

		internal static List<SystemIPLocationWrapper> ConvertToWrapperList(IList<SystemIPLocationEntity> entitylist)
        {
            List<SystemIPLocationWrapper> list = new List<SystemIPLocationWrapper>();
            foreach (SystemIPLocationEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }
		
		internal static List<SystemIPLocationEntity> ConvertToEntityList(List<SystemIPLocationWrapper> wrapperlist)
        {
            List<SystemIPLocationEntity> list = new List<SystemIPLocationEntity>();
            foreach (SystemIPLocationWrapper wrapper in wrapperlist)
            {
                list.Add(wrapper.entity);
            }
            return list;
        }

        internal static SystemIPLocationWrapper ConvertEntityToWrapper(SystemIPLocationEntity entity)
        {
            if (entity == null)
                return null;
				
            if (entity.Id == 0)
                return null;

            return new SystemIPLocationWrapper(entity);
        }
		
		#endregion

    }//End Class
}// End Namespace

