// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using Spring.Context.Support;
using Common.Logging;
using Legendigital.Framework.Common.Bussiness.NHibernate;
using Legendigital.Framework.Common.BaseFramework.Entity.Tables;
using Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables.Container;
using Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;

namespace Legendigital.Framework.Common.BaseFramework.Bussiness.Wrappers
{
    public partial class SystemCityWrapper   : BaseSpringNHibernateWrapper<SystemCityEntity, ISystemCityServiceProxy, SystemCityWrapper,int>
    {
        #region Member

		internal static readonly ISystemCityServiceProxy businessProxy = ((Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables.Container.BaseFrameworkServiceProxyContainer)(ContextRegistry.GetContext().GetObject("BaseFrameworkServiceProxyContainerIocID", typeof(Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables.Container.BaseFrameworkServiceProxyContainer)))).SystemCityServiceProxyInstance;
		
		
		internal SystemCityEntity Entity
        {
            get { return this.entity; }
        }
		
        #endregion

        #region Construtor
		public SystemCityWrapper() : base(new SystemCityEntity())
        {
            
        }

        internal SystemCityWrapper(SystemCityEntity entityObj)
            : base(entityObj)
        {
        }
		#endregion

        #region Process Column Name
        private static string ProcessColumnName(string columnName)
        {
            switch (columnName)
            {
		        case "ProvinceID_Id":
					return PROPERTY_PROVINCEID_ID;
		        case "ProvinceID_Name":
					return PROPERTY_PROVINCEID_NAME;
		        case "ProvinceID_AbbrName":
					return PROPERTY_PROVINCEID_ABBRNAME;
		        case "ProvinceID_SingleAbbrName":
					return PROPERTY_PROVINCEID_SINGLEABBRNAME;
		        case "ProvinceID_Code":
					return PROPERTY_PROVINCEID_CODE;
		        case "ProvinceID_CountryID":
					return PROPERTY_PROVINCEID_COUNTRYID;
              default:
                    return columnName;
            }
        }

        private static void ProcessQueryFilters(List<QueryFilter> filters)
        {
            foreach (QueryFilter queryFilter in filters)
            {
                queryFilter.FilterFieldName = ProcessColumnName(queryFilter.FilterFieldName);
            }
        }
		#endregion
		
      #region 公共常量

		public static readonly string CLASS_FULL_NAME = "Legendigital.Framework.Common.BaseFramework.Entity.Tables.SystemCityEntity";
		public static readonly string PROPERTY_NAME_ID = "Id";
		public static readonly string PROPERTY_NAME_NAME = "Name";
		public static readonly string PROPERTY_NAME_ABBRNAME = "AbbrName";
		public static readonly string PROPERTY_NAME_CODE = "Code";
		public static readonly string PROPERTY_NAME_PROVINCEID = "ProvinceID";
		public static readonly string PROPERTY_NAME_CAPITAL = "Capital";
		
        #endregion
	
 
		#region provinceID字段外键查询字段
        public const string PROPERTY_PROVINCEID_ALIAS_NAME = "ProvinceID_SystemCityEntity_Alias";
		public const string PROPERTY_PROVINCEID_ID = "ProvinceID_SystemCityEntity_Alias.Id";
		public const string PROPERTY_PROVINCEID_NAME = "ProvinceID_SystemCityEntity_Alias.Name";
		public const string PROPERTY_PROVINCEID_ABBRNAME = "ProvinceID_SystemCityEntity_Alias.AbbrName";
		public const string PROPERTY_PROVINCEID_SINGLEABBRNAME = "ProvinceID_SystemCityEntity_Alias.SingleAbbrName";
		public const string PROPERTY_PROVINCEID_CODE = "ProvinceID_SystemCityEntity_Alias.Code";
		public const string PROPERTY_PROVINCEID_COUNTRYID = "ProvinceID_SystemCityEntity_Alias.CountryID";
		#endregion
      	
	
	
		 
		
		
		
		


		#region Public Property
		/// <summary>
		/// 
		/// </summary>		
		public int Id
		{
			get
			{
				return entity.Id;
			}
			set
			{
				entity.Id = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string Name
		{
			get
			{
				return entity.Name;
			}
			set
			{
				entity.Name = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string AbbrName
		{
			get
			{
				return entity.AbbrName;
			}
			set
			{
				entity.AbbrName = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string Code
		{
			get
			{
				return entity.Code;
			}
			set
			{
				entity.Code = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public SystemProvinceWrapper ProvinceID
		{
			get
			{
				return SystemProvinceWrapper.ConvertEntityToWrapper(entity.ProvinceID) ;
			}
			set
			{
				entity.ProvinceID = ((value == null) ? null : value.Entity);
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public bool? Capital
		{
			get
			{
				return entity.Capital;
			}
			set
			{
				entity.Capital = value;
			}
		}
		#endregion 


		#region Query Property
		
		
		#region provinceID字段外键查询字段
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_PROVINCEID_ID)]
        public int? ProvinceID_Id
        {
            get
            {
                if (this. ProvinceID == null)
                    return null;
                return  ProvinceID.Id;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_PROVINCEID_NAME)]
        public string ProvinceID_Name
        {
            get
            {
                if (this. ProvinceID == null)
                    return null;
                return  ProvinceID.Name;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_PROVINCEID_ABBRNAME)]
        public string ProvinceID_AbbrName
        {
            get
            {
                if (this. ProvinceID == null)
                    return null;
                return  ProvinceID.AbbrName;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_PROVINCEID_SINGLEABBRNAME)]
        public string ProvinceID_SingleAbbrName
        {
            get
            {
                if (this. ProvinceID == null)
                    return null;
                return  ProvinceID.SingleAbbrName;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_PROVINCEID_CODE)]
        public string ProvinceID_Code
        {
            get
            {
                if (this. ProvinceID == null)
                    return null;
                return  ProvinceID.Code;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_PROVINCEID_COUNTRYID)]
        public SystemCountryWrapper ProvinceID_CountryID
        {
            get
            {
                if (this. ProvinceID == null)
                    return null;
                return  ProvinceID.CountryID;
            }
        }
		#endregion
      	
   
		#endregion


        #region "FKQuery"
		
        public static List<SystemCityWrapper> FindAllByOrderByAndFilterAndProvinceID(string orderByColumnName, bool isDesc,   SystemProvinceWrapper provinceID,  PageQueryParams pageQueryParams)
        {
            return ConvertToWrapperList(businessProxy.FindAllByOrderByAndFilterAndProvinceID(orderByColumnName, isDesc,   provinceID.Entity, pageQueryParams));
        }

        public static List<SystemCityWrapper> FindAllByProvinceID(SystemProvinceWrapper provinceID)
        {
            return ConvertToWrapperList(businessProxy.FindAllByProvinceID(provinceID.Entity));
        }
		



        #endregion








        #region Static Common Data Operation
		
		internal static List<SystemCityWrapper> ConvertToWrapperList(List<SystemCityEntity> entitylist)
        {
            List<SystemCityWrapper> list = new List<SystemCityWrapper>();
            foreach (SystemCityEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }

		internal static List<SystemCityWrapper> ConvertToWrapperList(IList<SystemCityEntity> entitylist)
        {
            List<SystemCityWrapper> list = new List<SystemCityWrapper>();
            foreach (SystemCityEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }
		
		internal static List<SystemCityEntity> ConvertToEntityList(List<SystemCityWrapper> wrapperlist)
        {
            List<SystemCityEntity> list = new List<SystemCityEntity>();
            foreach (SystemCityWrapper wrapper in wrapperlist)
            {
                list.Add(wrapper.entity);
            }
            return list;
        }

        internal static SystemCityWrapper ConvertEntityToWrapper(SystemCityEntity entity)
        {
            if (entity == null)
                return null;
				
            if (entity.Id == 0)
                return null;

            return new SystemCityWrapper(entity);
        }
		
		#endregion

    }//End Class
}// End Namespace

