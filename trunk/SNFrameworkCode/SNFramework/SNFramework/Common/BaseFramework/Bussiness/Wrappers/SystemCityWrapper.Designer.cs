// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using Spring.Context.Support;
using Common.Logging;
using Legendigital.Framework.Common.BaseFramework.Entity.Tables;
using Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables.Container;
using Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;

namespace Legendigital.Framework.Common.BaseFramework.Bussiness.Wrappers
{
    public partial class SystemCityWrapper
    {
        #region Member

		internal static readonly ISystemCityServiceProxy businessProxy = ((Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables.Container.BaseFrameworkServiceProxyContainer)(ContextRegistry.GetContext().GetObject("BaseFrameworkServiceProxyContainerIocID", typeof(Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables.Container.BaseFrameworkServiceProxyContainer)))).SystemCityServiceProxyInstance;
	 
	 
        internal SystemCityEntity entity;
		
		private static ILog logger = null;

        public static ILog Logger
        {
            get
            {
                if (logger == null)
                    logger = LogManager.GetLogger(typeof(SystemCityWrapper));
                return logger;
            }
        }

        #endregion

        #region Construtor
        public SystemCityWrapper() : this(new SystemCityEntity())
        {
            
        }

        internal SystemCityWrapper(SystemCityEntity entityObj)
        {
            entity = entityObj;
        }
		#endregion
		
		#region Equals 和 HashCode 方法覆盖
		public override bool Equals(object obj)
        {
            if (obj == null && entity!=null)
            {
                if (entity.Id == 0)
                    return true;

                return false;
            }
            return entity.Equals(obj);
        }

        public override int GetHashCode()
        {
            return entity.GetHashCode();
        }
		#endregion
		
        #region 公共常量

		public static readonly string CLASS_FULL_NAME = "Legendigital.Framework.Common.BaseFramework.Entity.Tables.SystemCityEntity";
		public static readonly string PROPERTY_NAME_ID = "Id";
		public static readonly string PROPERTY_NAME_NAME = "Name";
		public static readonly string PROPERTY_NAME_ABBRNAME = "AbbrName";
		public static readonly string PROPERTY_NAME_CODE = "Code";
		public static readonly string PROPERTY_NAME_PROVINCEID = "ProvinceID";
		public static readonly string PROPERTY_NAME_CAPITAL = "Capital";
		
        #endregion


		#region Public Property
		/// <summary>
		/// 
		/// </summary>		
		public int Id
		{
			get
			{
				return entity.Id;
			}
			set
			{
				entity.Id = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string Name
		{
			get
			{
				return entity.Name;
			}
			set
			{
				entity.Name = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string AbbrName
		{
			get
			{
				return entity.AbbrName;
			}
			set
			{
				entity.AbbrName = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string Code
		{
			get
			{
				return entity.Code;
			}
			set
			{
				entity.Code = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public SystemProvinceWrapper ProvinceID
		{
			get
			{
				return SystemProvinceWrapper.ConvertEntityToWrapper(entity.ProvinceID) ;
			}
			set
			{
				entity.ProvinceID = ((value == null) ? null : value.entity);
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public bool? Capital
		{
			get
			{
				return entity.Capital;
			}
			set
			{
				entity.Capital = value;
			}
		}
		#endregion 





        #region "FKQuery"
		
        public static List<SystemCityWrapper> FindAllByOrderByAndFilterAndProvinceID(string orderByColumnName, bool isDesc,   SystemProvinceWrapper provinceID,  PageQueryParams pageQueryParams)
        {
            return ConvertToWrapperList(businessProxy.FindAllByOrderByAndFilterAndProvinceID(orderByColumnName, isDesc,   provinceID.entity, pageQueryParams));
        }

        public static List<SystemCityWrapper> FindAllByProvinceID(SystemProvinceWrapper provinceID)
        {
            return ConvertToWrapperList(businessProxy.FindAllByProvinceID(provinceID.entity));
        }
		



        #endregion








        #region Static Common Data Operation
		
		internal static List<SystemCityWrapper> ConvertToWrapperList(List<SystemCityEntity> entitylist)
        {
            List<SystemCityWrapper> list = new List<SystemCityWrapper>();
            foreach (SystemCityEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }

		internal static List<SystemCityWrapper> ConvertToWrapperList(IList<SystemCityEntity> entitylist)
        {
            List<SystemCityWrapper> list = new List<SystemCityWrapper>();
            foreach (SystemCityEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }
		
		internal static List<SystemCityEntity> ConvertToEntityList(List<SystemCityWrapper> wrapperlist)
        {
            List<SystemCityEntity> list = new List<SystemCityEntity>();
            foreach (SystemCityWrapper wrapper in wrapperlist)
            {
                list.Add(wrapper.entity);
            }
            return list;
        }

        internal static SystemCityWrapper ConvertEntityToWrapper(SystemCityEntity entity)
        {
            if (entity == null)
                return null;
				
            if (entity.Id == 0)
                return null;

            return new SystemCityWrapper(entity);
        }
		
		#endregion

    }//End Class
}// End Namespace

