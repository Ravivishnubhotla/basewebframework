// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using Spring.Context.Support;
using Common.Logging;
using Legendigital.Framework.Common.Bussiness.NHibernate;
using Legendigital.Framework.Common.BaseFramework.Entity.Tables;
using Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables.Container;
using Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;

namespace Legendigital.Framework.Common.BaseFramework.Bussiness.Wrappers
{
    public partial class SystemAddressWrapper    //
    {
        #region Member

		internal static readonly ISystemAddressServiceProxy businessProxy = ((Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables.Container.BaseFrameworkServiceProxyContainer)(ContextRegistry.GetContext().GetObject("BaseFrameworkServiceProxyContainerIocID", typeof(Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables.Container.BaseFrameworkServiceProxyContainer)))).SystemAddressServiceProxyInstance;
		
		
		internal SystemAddressEntity Entity
        {
            get { return this.entity; }
        }
		
        #endregion

        #region Construtor
		public SystemAddressWrapper() : base(new SystemAddressEntity())
        {
            
        }

        internal SystemAddressWrapper(SystemAddressEntity entityObj)
            : base(entityObj)
        {
        }
		#endregion

        #region Process Column Name
        private static string ProcessColumnName(string columnName)
        {
            switch (columnName)
            {
              default:
                    return columnName;
            }
        }

        private static void ProcessQueryFilters(List<QueryFilter> filters)
        {
            foreach (QueryFilter queryFilter in filters)
            {
                queryFilter.FilterFieldName = ProcessColumnName(queryFilter.FilterFieldName);
            }
        }
		#endregion
		
      #region 公共常量

		public static readonly string CLASS_FULL_NAME = "Legendigital.Framework.Common.BaseFramework.Entity.Tables.SystemAddressEntity";
		public static readonly string PROPERTY_NAME_ID = "Id";
		public static readonly string PROPERTY_NAME_NAME = "Name";
		public static readonly string PROPERTY_NAME_TYPE = "Type";
		public static readonly string PROPERTY_NAME_DESCRIPTION = "Description";
		public static readonly string PROPERTY_NAME_COUNTRY = "Country";
		public static readonly string PROPERTY_NAME_PROVINCE = "Province";
		public static readonly string PROPERTY_NAME_CITY = "City";
		public static readonly string PROPERTY_NAME_ADDRESS1 = "Address1";
		public static readonly string PROPERTY_NAME_ADDRESS2 = "Address2";
		public static readonly string PROPERTY_NAME_ADDRESS3 = "Address3";
		public static readonly string PROPERTY_NAME_ZIPCODE = "ZipCode";
		public static readonly string PROPERTY_NAME_PARENTTYPE = "ParentType";
		public static readonly string PROPERTY_NAME_PARENTID = "ParentID";
		public static readonly string PROPERTY_NAME_LONGITUDE = "Longitude";
		public static readonly string PROPERTY_NAME_LATITUDE = "Latitude";
		public static readonly string PROPERTY_NAME_TIMEZONEID = "TimeZoneID";
		
        #endregion
	
 
      	
	
	
		 
		
		
		
		


		#region Public Property
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public int Id
		{
			get
			{
				return entity.Id;
			}
			set
			{
				entity.Id = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string Name
		{
			get
			{
				return entity.Name;
			}
			set
			{
				entity.Name = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string Type
		{
			get
			{
				return entity.Type;
			}
			set
			{
				entity.Type = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string Description
		{
			get
			{
				return entity.Description;
			}
			set
			{
				entity.Description = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string Country
		{
			get
			{
				return entity.Country;
			}
			set
			{
				entity.Country = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string Province
		{
			get
			{
				return entity.Province;
			}
			set
			{
				entity.Province = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string City
		{
			get
			{
				return entity.City;
			}
			set
			{
				entity.City = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string Address1
		{
			get
			{
				return entity.Address1;
			}
			set
			{
				entity.Address1 = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string Address2
		{
			get
			{
				return entity.Address2;
			}
			set
			{
				entity.Address2 = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string Address3
		{
			get
			{
				return entity.Address3;
			}
			set
			{
				entity.Address3 = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string ZipCode
		{
			get
			{
				return entity.ZipCode;
			}
			set
			{
				entity.ZipCode = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public string ParentType
		{
			get
			{
				return entity.ParentType;
			}
			set
			{
				entity.ParentType = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public int? ParentID
		{
			get
			{
				return entity.ParentID;
			}
			set
			{
				entity.ParentID = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public decimal? Longitude
		{
			get
			{
				return entity.Longitude;
			}
			set
			{
				entity.Longitude = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public decimal? Latitude
		{
			get
			{
				return entity.Latitude;
			}
			set
			{
				entity.Latitude = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		[DataMember]
		public int? TimeZoneID
		{
			get
			{
				return entity.TimeZoneID;
			}
			set
			{
				entity.TimeZoneID = value;
			}
		}
		#endregion 


		#region Query Property
		
		
      	
   
		#endregion


        #region "FKQuery"



        #endregion








        #region Static Common Data Operation
		
		internal static List<SystemAddressWrapper> ConvertToWrapperList(List<SystemAddressEntity> entitylist)
        {
            List<SystemAddressWrapper> list = new List<SystemAddressWrapper>();
            foreach (SystemAddressEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }

		internal static List<SystemAddressWrapper> ConvertToWrapperList(IList<SystemAddressEntity> entitylist)
        {
            List<SystemAddressWrapper> list = new List<SystemAddressWrapper>();
            foreach (SystemAddressEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }
		
		internal static List<SystemAddressEntity> ConvertToEntityList(List<SystemAddressWrapper> wrapperlist)
        {
            List<SystemAddressEntity> list = new List<SystemAddressEntity>();
            foreach (SystemAddressWrapper wrapper in wrapperlist)
            {
                list.Add(wrapper.entity);
            }
            return list;
        }

        internal static SystemAddressWrapper ConvertEntityToWrapper(SystemAddressEntity entity)
        {
            if (entity == null)
                return null;
				
            if (entity.Id == 0)
                return null;

            return new SystemAddressWrapper(entity);
        }
		
		#endregion

    }//End Class
}// End Namespace

