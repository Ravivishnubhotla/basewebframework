// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using Spring.Context.Support;
using Common.Logging;
using Legendigital.Framework.Common.Bussiness.NHibernate;
using Legendigital.Framework.Common.BaseFramework.Entity.Tables;
using Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables.Container;
using Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;

namespace Legendigital.Framework.Common.BaseFramework.Bussiness.Wrappers
{
    public partial class SystemDepartmentWrapper   
    {
        #region Member

		internal static readonly ISystemDepartmentServiceProxy businessProxy = ((Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables.Container.BaseFrameworkServiceProxyContainer)(ContextRegistry.GetContext().GetObject("BaseFrameworkServiceProxyContainerIocID", typeof(Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables.Container.BaseFrameworkServiceProxyContainer)))).SystemDepartmentServiceProxyInstance;
		
		
		internal SystemDepartmentEntity Entity
        {
            get { return this.entity; }
        }
		
        #endregion

        #region Construtor
		public SystemDepartmentWrapper() : base(new SystemDepartmentEntity())
        {
            
        }

        internal SystemDepartmentWrapper(SystemDepartmentEntity entityObj)
            : base(entityObj)
        {
        }
		#endregion

        #region Process Column Name
        private static string ProcessColumnName(string columnName)
        {
            switch (columnName)
            {
		        case "OrganizationID_Id":
					return PROPERTY_ORGANIZATIONID_ID;
		        case "OrganizationID_Name":
					return PROPERTY_ORGANIZATIONID_NAME;
		        case "OrganizationID_Code":
					return PROPERTY_ORGANIZATIONID_CODE;
		        case "OrganizationID_Description":
					return PROPERTY_ORGANIZATIONID_DESCRIPTION;
		        case "OrganizationID_IsMainOrganization":
					return PROPERTY_ORGANIZATIONID_ISMAINORGANIZATION;
		        case "OrganizationID_CreateBy":
					return PROPERTY_ORGANIZATIONID_CREATEBY;
		        case "OrganizationID_CreateAt":
					return PROPERTY_ORGANIZATIONID_CREATEAT;
		        case "OrganizationID_LastModifyBy":
					return PROPERTY_ORGANIZATIONID_LASTMODIFYBY;
		        case "OrganizationID_LastModifyAt":
					return PROPERTY_ORGANIZATIONID_LASTMODIFYAT;
		        case "OrganizationID_LastModifyComment":
					return PROPERTY_ORGANIZATIONID_LASTMODIFYCOMMENT;
              default:
                    return columnName;
            }
        }

        private static void ProcessQueryFilters(List<QueryFilter> filters)
        {
            foreach (QueryFilter queryFilter in filters)
            {
                queryFilter.FilterFieldName = ProcessColumnName(queryFilter.FilterFieldName);
            }
        }
		#endregion
		
      #region 公共常量

		public static readonly string CLASS_FULL_NAME = "Legendigital.Framework.Common.BaseFramework.Entity.Tables.SystemDepartmentEntity";
		public static readonly string PROPERTY_NAME_DEPARTMENTID = "DepartmentID";
		public static readonly string PROPERTY_NAME_PARENTDEPARTMENTID = "ParentDepartmentID";
		public static readonly string PROPERTY_NAME_DEPARTMENTNAMECN = "DepartmentNameCn";
		public static readonly string PROPERTY_NAME_DEPARTMENTNAMEEN = "DepartmentNameEn";
		public static readonly string PROPERTY_NAME_DEPARTMENTDECRIPTION = "DepartmentDecription";
		public static readonly string PROPERTY_NAME_DEPARTMENTSORTINDEX = "DepartmentSortIndex";
		public static readonly string PROPERTY_NAME_ORGANIZATIONID = "OrganizationID";
		public static readonly string PROPERTY_NAME_CREATEBY = "CreateBy";
		public static readonly string PROPERTY_NAME_CREATEAT = "CreateAt";
		public static readonly string PROPERTY_NAME_LASTMODIFYBY = "LastModifyBy";
		public static readonly string PROPERTY_NAME_LASTMODIFYAT = "LastModifyAt";
		public static readonly string PROPERTY_NAME_LASTMODIFYCOMMENT = "LastModifyComment";
		
        #endregion
	
 
		#region organizationID字段外键查询字段
        public const string PROPERTY_ORGANIZATIONID_ALIAS_NAME = "OrganizationID_SystemDepartmentEntity_Alias";
		public const string PROPERTY_ORGANIZATIONID_ID = "OrganizationID_SystemDepartmentEntity_Alias.Id";
		public const string PROPERTY_ORGANIZATIONID_NAME = "OrganizationID_SystemDepartmentEntity_Alias.Name";
		public const string PROPERTY_ORGANIZATIONID_CODE = "OrganizationID_SystemDepartmentEntity_Alias.Code";
		public const string PROPERTY_ORGANIZATIONID_DESCRIPTION = "OrganizationID_SystemDepartmentEntity_Alias.Description";
		public const string PROPERTY_ORGANIZATIONID_ISMAINORGANIZATION = "OrganizationID_SystemDepartmentEntity_Alias.IsMainOrganization";
		public const string PROPERTY_ORGANIZATIONID_CREATEBY = "OrganizationID_SystemDepartmentEntity_Alias.CreateBy";
		public const string PROPERTY_ORGANIZATIONID_CREATEAT = "OrganizationID_SystemDepartmentEntity_Alias.CreateAt";
		public const string PROPERTY_ORGANIZATIONID_LASTMODIFYBY = "OrganizationID_SystemDepartmentEntity_Alias.LastModifyBy";
		public const string PROPERTY_ORGANIZATIONID_LASTMODIFYAT = "OrganizationID_SystemDepartmentEntity_Alias.LastModifyAt";
		public const string PROPERTY_ORGANIZATIONID_LASTMODIFYCOMMENT = "OrganizationID_SystemDepartmentEntity_Alias.LastModifyComment";
		#endregion
      	
	
	
		 
		
		
		
		


		#region Public Property
		/// <summary>
		/// ??
		/// </summary>		
		public int DepartmentID
		{
			get
			{
				return entity.DepartmentID;
			}
			set
			{
				entity.DepartmentID = value;
			}
		}
		/// <summary>
		/// ???
		/// </summary>		
		public SystemDepartmentWrapper ParentDepartmentID
		{
			get
			{
				return SystemDepartmentWrapper.ConvertEntityToWrapper(entity.ParentDepartmentID) ;
			}
			set
			{
				entity.ParentDepartmentID = ((value == null) ? null : value.Entity);
			}
		}
		/// <summary>
		/// ?????
		/// </summary>		
		public string DepartmentNameCn
		{
			get
			{
				return entity.DepartmentNameCn;
			}
			set
			{
				entity.DepartmentNameCn = value;
			}
		}
		/// <summary>
		/// ?????
		/// </summary>		
		public string DepartmentNameEn
		{
			get
			{
				return entity.DepartmentNameEn;
			}
			set
			{
				entity.DepartmentNameEn = value;
			}
		}
		/// <summary>
		/// ????
		/// </summary>		
		public string DepartmentDecription
		{
			get
			{
				return entity.DepartmentDecription;
			}
			set
			{
				entity.DepartmentDecription = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public int? DepartmentSortIndex
		{
			get
			{
				return entity.DepartmentSortIndex;
			}
			set
			{
				entity.DepartmentSortIndex = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public SystemOrganizationWrapper OrganizationID
		{
			get
			{
				return SystemOrganizationWrapper.ConvertEntityToWrapper(entity.OrganizationID) ;
			}
			set
			{
				entity.OrganizationID = ((value == null) ? null : value.Entity);
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public int? CreateBy
		{
			get
			{
				return entity.CreateBy;
			}
			set
			{
				entity.CreateBy = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public DateTime? CreateAt
		{
			get
			{
				return entity.CreateAt;
			}
			set
			{
				entity.CreateAt = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public int? LastModifyBy
		{
			get
			{
				return entity.LastModifyBy;
			}
			set
			{
				entity.LastModifyBy = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public DateTime? LastModifyAt
		{
			get
			{
				return entity.LastModifyAt;
			}
			set
			{
				entity.LastModifyAt = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string LastModifyComment
		{
			get
			{
				return entity.LastModifyComment;
			}
			set
			{
				entity.LastModifyComment = value;
			}
		}
		#endregion 


		#region Query Property
		
		
		#region organizationID字段外键查询字段
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_ORGANIZATIONID_ID)]
        public int? OrganizationID_Id
        {
            get
            {
                if (this. OrganizationID == null)
                    return null;
                return  OrganizationID.Id;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_ORGANIZATIONID_NAME)]
        public string OrganizationID_Name
        {
            get
            {
                if (this. OrganizationID == null)
                    return null;
                return  OrganizationID.Name;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_ORGANIZATIONID_CODE)]
        public string OrganizationID_Code
        {
            get
            {
                if (this. OrganizationID == null)
                    return null;
                return  OrganizationID.Code;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_ORGANIZATIONID_DESCRIPTION)]
        public string OrganizationID_Description
        {
            get
            {
                if (this. OrganizationID == null)
                    return null;
                return  OrganizationID.Description;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_ORGANIZATIONID_ISMAINORGANIZATION)]
        public bool? OrganizationID_IsMainOrganization
        {
            get
            {
                if (this. OrganizationID == null)
                    return null;
                return  OrganizationID.IsMainOrganization;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_ORGANIZATIONID_CREATEBY)]
        public int? OrganizationID_CreateBy
        {
            get
            {
                if (this. OrganizationID == null)
                    return null;
                return  OrganizationID.CreateBy;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_ORGANIZATIONID_CREATEAT)]
        public DateTime? OrganizationID_CreateAt
        {
            get
            {
                if (this. OrganizationID == null)
                    return null;
                return  OrganizationID.CreateAt;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_ORGANIZATIONID_LASTMODIFYBY)]
        public int? OrganizationID_LastModifyBy
        {
            get
            {
                if (this. OrganizationID == null)
                    return null;
                return  OrganizationID.LastModifyBy;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_ORGANIZATIONID_LASTMODIFYAT)]
        public DateTime? OrganizationID_LastModifyAt
        {
            get
            {
                if (this. OrganizationID == null)
                    return null;
                return  OrganizationID.LastModifyAt;
            }
        }
		[NhibernateQueryPropertyAttribute(MappingColumnName = PROPERTY_ORGANIZATIONID_LASTMODIFYCOMMENT)]
        public string OrganizationID_LastModifyComment
        {
            get
            {
                if (this. OrganizationID == null)
                    return null;
                return  OrganizationID.LastModifyComment;
            }
        }
		#endregion
      	
   
		#endregion


        #region "FKQuery"
		
        public static List<SystemDepartmentWrapper> FindAllByOrderByAndFilterAndOrganizationID(string orderByColumnName, bool isDesc,   SystemOrganizationWrapper organizationID,  PageQueryParams pageQueryParams)
        {
            return ConvertToWrapperList(businessProxy.FindAllByOrderByAndFilterAndOrganizationID(orderByColumnName, isDesc,   organizationID.Entity, pageQueryParams));
        }

        public static List<SystemDepartmentWrapper> FindAllByOrganizationID(SystemOrganizationWrapper organizationID)
        {
            return ConvertToWrapperList(businessProxy.FindAllByOrganizationID(organizationID.Entity));
        }
		



        #endregion








        #region Static Common Data Operation
		
		internal static List<SystemDepartmentWrapper> ConvertToWrapperList(List<SystemDepartmentEntity> entitylist)
        {
            List<SystemDepartmentWrapper> list = new List<SystemDepartmentWrapper>();
            foreach (SystemDepartmentEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }

		internal static List<SystemDepartmentWrapper> ConvertToWrapperList(IList<SystemDepartmentEntity> entitylist)
        {
            List<SystemDepartmentWrapper> list = new List<SystemDepartmentWrapper>();
            foreach (SystemDepartmentEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }
		
		internal static List<SystemDepartmentEntity> ConvertToEntityList(List<SystemDepartmentWrapper> wrapperlist)
        {
            List<SystemDepartmentEntity> list = new List<SystemDepartmentEntity>();
            foreach (SystemDepartmentWrapper wrapper in wrapperlist)
            {
                list.Add(wrapper.entity);
            }
            return list;
        }

        internal static SystemDepartmentWrapper ConvertEntityToWrapper(SystemDepartmentEntity entity)
        {
            if (entity == null)
                return null;
				
            if (entity.DepartmentID == 0)
                return null;

            return new SystemDepartmentWrapper(entity);
        }
		
		#endregion

    }//End Class
}// End Namespace

