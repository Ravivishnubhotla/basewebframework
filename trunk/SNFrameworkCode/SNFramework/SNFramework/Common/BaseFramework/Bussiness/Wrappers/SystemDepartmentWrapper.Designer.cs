// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using Spring.Context.Support;
using Common.Logging;
using Legendigital.Framework.Common.BaseFramework.Entity.Tables;
using Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables.Container;
using Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;

namespace Legendigital.Framework.Common.BaseFramework.Bussiness.Wrappers
{
    public partial class SystemDepartmentWrapper
    {
        #region Member

		internal static readonly ISystemDepartmentServiceProxy businessProxy = ((Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables.Container.BaseFrameworkServiceProxyContainer)(ContextRegistry.GetContext().GetObject("BaseFrameworkServiceProxyContainerIocID", typeof(Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables.Container.BaseFrameworkServiceProxyContainer)))).SystemDepartmentServiceProxyInstance;
	 
	 
        internal SystemDepartmentEntity entity;
		
		private static ILog logger = null;

        public static ILog Logger
        {
            get
            {
                if (logger == null)
                    logger = LogManager.GetLogger(typeof(SystemDepartmentWrapper));
                return logger;
            }
        }

        #endregion

        #region Construtor
        public SystemDepartmentWrapper() : this(new SystemDepartmentEntity())
        {
            
        }

        internal SystemDepartmentWrapper(SystemDepartmentEntity entityObj)
        {
            entity = entityObj;
        }
		#endregion
		
		#region Equals 和 HashCode 方法覆盖
		public override bool Equals(object obj)
        {
            if (obj == null && entity!=null)
            {
                if (entity.DepartmentID == 0)
                    return true;

                return false;
            }
            return entity.Equals(obj);
        }

        public override int GetHashCode()
        {
            return entity.GetHashCode();
        }
		#endregion
		
      #region 公共常量

		public static readonly string CLASS_FULL_NAME = "Legendigital.Framework.Common.BaseFramework.Entity.Tables.SystemDepartmentEntity";
		public static readonly string PROPERTY_NAME_DEPARTMENTID = "DepartmentID";
		public static readonly string PROPERTY_NAME_PARENTDEPARTMENTID = "ParentDepartmentID";
		public static readonly string PROPERTY_NAME_DEPARTMENTNAMECN = "DepartmentNameCn";
		public static readonly string PROPERTY_NAME_DEPARTMENTNAMEEN = "DepartmentNameEn";
		public static readonly string PROPERTY_NAME_DEPARTMENTDECRIPTION = "DepartmentDecription";
		public static readonly string PROPERTY_NAME_DEPARTMENTSORTINDEX = "DepartmentSortIndex";
		public static readonly string PROPERTY_NAME_CREATEBY = "CreateBy";
		public static readonly string PROPERTY_NAME_CREATEAT = "CreateAt";
		public static readonly string PROPERTY_NAME_LASTMODIFYBY = "LastModifyBy";
		public static readonly string PROPERTY_NAME_LASTMODIFYAT = "LastModifyAt";
		public static readonly string PROPERTY_NAME_LASTMODIFYCOMMENT = "LastModifyComment";
		
        #endregion
	
 
      	
	
	
		 
		
		
		
		


		#region Public Property
		/// <summary>
		/// ??
		/// </summary>		
		public int DepartmentID
		{
			get
			{
				return entity.DepartmentID;
			}
			set
			{
				entity.DepartmentID = value;
			}
		}
		/// <summary>
		/// ???
		/// </summary>		
		public SystemDepartmentWrapper ParentDepartmentID
		{
			get
			{
				return SystemDepartmentWrapper.ConvertEntityToWrapper(entity.ParentDepartmentID) ;
			}
			set
			{
				entity.ParentDepartmentID = ((value == null) ? null : value.entity);
			}
		}
		/// <summary>
		/// ?????
		/// </summary>		
		public string DepartmentNameCn
		{
			get
			{
				return entity.DepartmentNameCn;
			}
			set
			{
				entity.DepartmentNameCn = value;
			}
		}
		/// <summary>
		/// ?????
		/// </summary>		
		public string DepartmentNameEn
		{
			get
			{
				return entity.DepartmentNameEn;
			}
			set
			{
				entity.DepartmentNameEn = value;
			}
		}
		/// <summary>
		/// ????
		/// </summary>		
		public string DepartmentDecription
		{
			get
			{
				return entity.DepartmentDecription;
			}
			set
			{
				entity.DepartmentDecription = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public int? DepartmentSortIndex
		{
			get
			{
				return entity.DepartmentSortIndex;
			}
			set
			{
				entity.DepartmentSortIndex = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public int? CreateBy
		{
			get
			{
				return entity.CreateBy;
			}
			set
			{
				entity.CreateBy = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public DateTime? CreateAt
		{
			get
			{
				return entity.CreateAt;
			}
			set
			{
				entity.CreateAt = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public int? LastModifyBy
		{
			get
			{
				return entity.LastModifyBy;
			}
			set
			{
				entity.LastModifyBy = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public DateTime? LastModifyAt
		{
			get
			{
				return entity.LastModifyAt;
			}
			set
			{
				entity.LastModifyAt = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string LastModifyComment
		{
			get
			{
				return entity.LastModifyComment;
			}
			set
			{
				entity.LastModifyComment = value;
			}
		}
		#endregion 





        #region "FKQuery"



        #endregion








        #region Static Common Data Operation
		
		internal static List<SystemDepartmentWrapper> ConvertToWrapperList(List<SystemDepartmentEntity> entitylist)
        {
            List<SystemDepartmentWrapper> list = new List<SystemDepartmentWrapper>();
            foreach (SystemDepartmentEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }

		internal static List<SystemDepartmentWrapper> ConvertToWrapperList(IList<SystemDepartmentEntity> entitylist)
        {
            List<SystemDepartmentWrapper> list = new List<SystemDepartmentWrapper>();
            foreach (SystemDepartmentEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }
		
		internal static List<SystemDepartmentEntity> ConvertToEntityList(List<SystemDepartmentWrapper> wrapperlist)
        {
            List<SystemDepartmentEntity> list = new List<SystemDepartmentEntity>();
            foreach (SystemDepartmentWrapper wrapper in wrapperlist)
            {
                list.Add(wrapper.entity);
            }
            return list;
        }

        internal static SystemDepartmentWrapper ConvertEntityToWrapper(SystemDepartmentEntity entity)
        {
            if (entity == null)
                return null;
				
            if (entity.DepartmentID == 0)
                return null;

            return new SystemDepartmentWrapper(entity);
        }
		
		#endregion

    }//End Class
}// End Namespace

