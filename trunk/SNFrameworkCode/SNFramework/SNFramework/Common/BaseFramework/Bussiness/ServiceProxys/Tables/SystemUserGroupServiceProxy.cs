// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.ServiceModel;
using System.Text;
using Legendigital.Framework.Common.Bussiness.Interfaces;
using Legendigital.Framework.Common.Data.Interfaces;
using Legendigital.Framework.Common.Bussiness.NHibernate;
using Legendigital.Framework.Common.BaseFramework.Data.Tables;
using Legendigital.Framework.Common.BaseFramework.Entity.Tables;
using Legendigital.Framework.Common.BaseFramework.Bussiness.Wrappers;
using Spring.Transaction.Interceptor;


namespace Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables
{
    [ServiceContract(Namespace = "http://Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables")]
    public interface ISystemUserGroupServiceProxy : IBaseSpringNHibernateEntityServiceProxy<SystemUserGroupEntity, int>, ISystemUserGroupServiceProxyDesigner
    {
        [OperationContract]
        List<SystemRoleEntity> GetAssignedRoleByUserGroup(SystemUserGroupEntity systemUserGroupEntity);
        [OperationContract]
        void PatchAssignUserGroupRoles(SystemUserGroupEntity systemUserGroupEntity, List<string> roleids);
    }

    public partial class SystemUserGroupServiceProxy : BaseSpringNHibernateEntityServiceProxy<SystemUserGroupEntity,int>, ISystemUserGroupServiceProxy
    {
        /// <summary>
        /// 获取用户分配的所有角色
        /// </summary>
        /// <param name="loginID">登陆ID</param>
        /// <returns></returns>
        public List<SystemRoleEntity> GetAssignedRoleByUserGroup(SystemUserGroupEntity entity)
        {
            List<SystemRoleEntity> list = this.DataObjectsContainerIocID.SystemUserGroupRoleRelationDataObjectInstance.GetAssignedRoleByUserGroup(entity);
            return list;
        }
        [Transaction(ReadOnly = false)]
        public void PatchAssignUserGroupRoles(SystemUserGroupEntity userGroupEntity, List<string> roleids)
        {
            //获取所有的角色
            List<SystemRoleEntity> allroles = this.DataObjectsContainerIocID.SystemRoleDataObjectInstance.FindAll();

            //遍历所有的role
            foreach (SystemRoleEntity roleEntity in allroles)
            {
                //查找是否存在对应关系
                SystemUserGroupRoleRelationEntity userGroupRoleRelationEntity = this.DataObjectsContainerIocID.SystemUserGroupRoleRelationDataObjectInstance.GetUserGroupRoleRelation(userGroupEntity, roleEntity);
                //检查是否需要保存
                if (roleids.Contains(roleEntity.RoleID.ToString()))
                {
                    //添加或修改对应关系
                    if (userGroupRoleRelationEntity == null)
                    {
                        userGroupRoleRelationEntity = new SystemUserGroupRoleRelationEntity();
                    }
                    userGroupRoleRelationEntity.RoleID = roleEntity;
                    userGroupRoleRelationEntity.UserGroupID = userGroupEntity;
                    this.DataObjectsContainerIocID.SystemUserGroupRoleRelationDataObjectInstance.SaveOrUpdate(userGroupRoleRelationEntity);
                }
                else
                {
                    //如果不需要保存则删除已存在的对应关系
                    if (userGroupRoleRelationEntity != null)
                    {
                        this.DataObjectsContainerIocID.SystemUserGroupRoleRelationDataObjectInstance.Delete(userGroupRoleRelationEntity);
                    }
                }
            }
        }
    }
}
