// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Globalization;
using System.IO;
using System.ServiceModel;
using System.Text;
using System.Web.Profile;
using Legendigital.Framework.Common.Bussiness.Interfaces;
using Legendigital.Framework.Common.Data.Interfaces;
using Legendigital.Framework.Common.Bussiness.NHibernate;
using Legendigital.Framework.Common.BaseFramework.Data.Tables;
using Legendigital.Framework.Common.BaseFramework.Entity.Tables;
using Spring.Transaction.Interceptor;


namespace Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables
{
    [ServiceContract(Namespace = "http://Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables")]
    public interface ISystemUserProfileServiceProxy : IBaseSpringNHibernateEntityServiceProxy<SystemUserProfileEntity>, ISystemUserProfileServiceProxyDesigner
    {
        [OperationContract]
        void DeleteProfiles(string[] usernames);
        void DeleteInactiveProfiles(ProfileAuthenticationOption authenticationOption, DateTime dateTime);
        List<SystemUserProfileEntity> GetAllInactiveProfiles(ProfileAuthenticationOption authenticationOption, DateTime inactiveSinceDate, int pageIndex, int pageSize, out int totalRecords);
        SettingsPropertyValueCollection GetPropertyValues(SettingsContext settingsContext, SettingsPropertyCollection settingsPropertyCollection);
        void SetPropertyValues(SettingsContext context, SettingsPropertyValueCollection settingsPropertyValueCollection);
        ProfileInfoCollection FindProfilesByUserName(ProfileAuthenticationOption profileAuthenticationOption, string usernameToMatch, int pageIndex, int pageSize, out int totalRecords);
        ProfileInfoCollection FindInactiveProfilesByUserName(ProfileAuthenticationOption profileAuthenticationOption, string usernameToMatch, DateTime inactiveSinceDate, int pageIndex, int pageSize, out int totalRecords);
        int GetNumberOfInactiveProfiles(ProfileAuthenticationOption profileAuthenticationOption, DateTime inactiveSinceDate);
    }




    public partial class SystemUserProfileServiceProxy : ISystemUserProfileServiceProxy
    {
        [Transaction(ReadOnly = false)]
        public void DeleteProfiles(string[] usernames)
        {
            List<SystemUserEntity> users =
                this.DataObjectsContainerIocID.SystemUserDataObjectInstance.FindUsersByNames(usernames);

            List<SystemUserProfileEntity> allProfiles = this.SelfDataObj.FindAllByUsers(users);

            foreach (SystemUserProfileEntity profileEntity in allProfiles)
            {
                this.SelfDataObj.Delete(profileEntity);
            }
        }
        [Transaction(ReadOnly = false)]
        public void DeleteInactiveProfiles(ProfileAuthenticationOption authenticationOption, DateTime userInactiveSinceDate)
        {
            List<SystemUserEntity> users = null;

            switch (authenticationOption)
            {
                case ProfileAuthenticationOption.All:
                    users = this.DataObjectsContainerIocID.SystemUserDataObjectInstance.FindAllInactiveProfiles(userInactiveSinceDate); 
                    break;
                case ProfileAuthenticationOption.Anonymous:
                    users = new List<SystemUserEntity>(); 
                    break;
                case ProfileAuthenticationOption.Authenticated:
                    users = this.DataObjectsContainerIocID.SystemUserDataObjectInstance.FindAllInactiveAuthenticatedProfiles(userInactiveSinceDate); 
                    break;
            }

            List<SystemUserProfileEntity> allProfiles = this.SelfDataObj.FindAllByUsers(users);

            foreach (SystemUserProfileEntity profileEntity in allProfiles)
            {
                this.SelfDataObj.Delete(profileEntity);
            }
        }

        public object GetUserProfileByUserIDAndPropertys(string loginID,SystemUserProfilePropertysEntity propertysEntity)
        {
            SystemUserEntity user = this.DataObjectsContainerIocID.SystemUserDataObjectInstance.GetUserByLoginID(loginID);

            return this.SelfDataObj.GetUserProfileByUserIDAndPropertys(user, propertysEntity);
        }

        public SystemUserProfileEntity GetUserProfileByUserID(string loginID)
        {
            SystemUserEntity user = this.DataObjectsContainerIocID.SystemUserDataObjectInstance.GetUserByLoginID(loginID);

            return this.SelfDataObj.GetUserProfileByUser(user);
        }


        public List<SystemUserProfileEntity> GetAllInactiveProfiles(ProfileAuthenticationOption authenticationOption, DateTime inactiveSinceDate, int pageIndex, int pageSize, out int totalRecords)
        {
            List<SystemUserEntity> users = null;
            totalRecords = 0;
            switch (authenticationOption)
            {
                case ProfileAuthenticationOption.All:
                    users = this.DataObjectsContainerIocID.SystemUserDataObjectInstance.FindAllInactiveProfiles(inactiveSinceDate, pageIndex, pageSize, out totalRecords);
                    break;
                case ProfileAuthenticationOption.Anonymous:
                    users = new List<SystemUserEntity>();
                    break;
                case ProfileAuthenticationOption.Authenticated:
                    users = this.DataObjectsContainerIocID.SystemUserDataObjectInstance.FindAllInactiveAuthenticatedProfiles(inactiveSinceDate, pageIndex, pageSize, out totalRecords);
                    break;
            }

            return this.SelfDataObj.FindAllByUsers(users);
        }

        private void ParseDataFromDB(string[] names, string values, byte[] buf, SettingsPropertyValueCollection properties)
        {
            if (((names != null) && (values != null)) && ((buf != null) && (properties != null)))
            {
                try
                {
                    for (int i = 0; i < (names.Length / 4); i++)
                    {
                        string str = names[i * 4];
                        SettingsPropertyValue value2 = properties[str];
                        if (value2 != null)
                        {
                            int startIndex = int.Parse(names[(i * 4) + 2], CultureInfo.InvariantCulture);
                            int length = int.Parse(names[(i * 4) + 3], CultureInfo.InvariantCulture);
                            if ((length == -1) && !value2.Property.PropertyType.IsValueType)
                            {
                                value2.PropertyValue = null;
                                value2.IsDirty = false;
                                value2.Deserialized = true;
                            }
                            if (((names[(i * 4) + 1] == "S") && (startIndex >= 0)) && ((length > 0) && (values.Length >= (startIndex + length))))
                            {
                                value2.SerializedValue = values.Substring(startIndex, length);
                            }
                            if (((names[(i * 4) + 1] == "B") && (startIndex >= 0)) && ((length > 0) && (buf.Length >= (startIndex + length))))
                            {
                                byte[] dst = new byte[length];
                                Buffer.BlockCopy(buf, startIndex, dst, 0, length);
                                value2.SerializedValue = dst;
                            }
                        }
                    }
                }
                catch
                {
                }
            }
        }

        public void SetPropertyValues(System.Configuration.SettingsContext sc, SettingsPropertyValueCollection properties)
        {
            string loginUserID = (string)sc["UserName"];
            bool userIsAuthenticated = (bool)sc["IsAuthenticated"];
            if (((loginUserID != null) && (loginUserID.Length >= 1)) && (properties.Count >= 1))
            {
                string allNames = string.Empty;
                string allValues = string.Empty;
                byte[] buf = null;
                PrepareDataForSaving(ref allNames, ref allValues, ref buf, true, properties, userIsAuthenticated);
                if (allNames.Length != 0)
                {
                    SystemUserProfileEntity p = new SystemUserProfileEntity();
                    p.UserID = this.DataObjectsContainerIocID.SystemUserDataObjectInstance.GetUserByLoginID(loginUserID);
                    p.PropertyValuesBinary = buf;
                    p.PropertyValuesString = allValues;
                    p.LastUpdatedDate = DateTime.Now;

                    if (GetUserProfileByUserID(loginUserID) == null)
                        selfDataObject.Save(p);
                    else
                        selfDataObject.Update(p);
                }
            }
        }

        public ProfileInfoCollection FindProfilesByUserName(ProfileAuthenticationOption profileAuthenticationOption, string usernameToMatch, int pageIndex, int pageSize, out int totalRecords)
        {
            ProfileInfoCollection infos = new ProfileInfoCollection();

            SystemUserEntity user =
                this.DataObjectsContainerIocID.SystemUserDataObjectInstance.GetUserByLoginID(usernameToMatch);

            SystemUserProfileEntity prof = GetUserProfileByUserID(usernameToMatch);

            infos.Add(new ProfileInfo(user.UserLoginID, false, user.LastActivityDate, prof.LastUpdatedDate, prof.PropertyValuesBinary.Length + prof.PropertyValuesString.Length));
            totalRecords = 1;

            return infos;
        }

        public ProfileInfoCollection FindInactiveProfilesByUserName(ProfileAuthenticationOption profileAuthenticationOption, string usernameToMatch, DateTime inactiveSinceDate, int pageIndex, int pageSize, out int totalRecords)
        {
            return FindInactiveProfilesByUserName(profileAuthenticationOption, usernameToMatch, DateTime.Now, 0, 0, out totalRecords);
        }

        public int GetNumberOfInactiveProfiles(ProfileAuthenticationOption profileAuthenticationOption, DateTime inactiveSinceDate)
        {
            return this.SelfDataObj.GetNumberOfInactiveProfiles(inactiveSinceDate);
        }

        public SettingsPropertyValueCollection GetPropertyValues(SettingsContext settingsContext, SettingsPropertyCollection properties)
        {

            SettingsPropertyValueCollection svc = new SettingsPropertyValueCollection();

            if (properties.Count == 0)
                return svc;

            string[] names = null;
            string values = null;

            //Create the default structure of the properties
            foreach (SettingsProperty prop in properties)
            {
                if (prop.SerializeAs == SettingsSerializeAs.ProviderSpecific)
                    if (prop.PropertyType.IsPrimitive || prop.PropertyType == typeof(string))
                        prop.SerializeAs = SettingsSerializeAs.String;
                    else
                        prop.SerializeAs = SettingsSerializeAs.Xml;

                svc.Add(new SettingsPropertyValue(prop));
            }

            SystemUserProfileEntity dbProperties = GetUserProfileByUserID((string)settingsContext["UserName"]);
            if (dbProperties != null)
            {
                values = dbProperties.PropertyValuesString;

                if (names != null && names.Length > 0)
                {
                    ParseDataFromDB(names, values, dbProperties.PropertyValuesBinary, svc);
                }
            }

            return svc;

        }

        void PrepareDataForSaving(ref string allNames, ref string allValues, ref byte[] buf, bool binarySupported, SettingsPropertyValueCollection properties, bool userIsAuthenticated)
        {
            StringBuilder builder = new StringBuilder();
            StringBuilder builder2 = new StringBuilder();
            MemoryStream stream = binarySupported ? new MemoryStream() : null;
            try
            {
                try
                {
                    bool flag = false;
                    foreach (SettingsPropertyValue value2 in properties)
                    {
                        if (value2.IsDirty && (userIsAuthenticated || ((bool)value2.Property.Attributes["AllowAnonymous"])))
                        {
                            flag = true;
                            break;
                        }
                    }
                    if (!flag)
                    {
                        return;
                    }
                    foreach (SettingsPropertyValue value3 in properties)
                    {
                        if ((!userIsAuthenticated && !((bool)value3.Property.Attributes["AllowAnonymous"])) || (!value3.IsDirty && value3.UsingDefaultValue))
                        {
                            continue;
                        }
                        int length = 0;
                        int position = 0;
                        string str = null;
                        if (value3.Deserialized && (value3.PropertyValue == null))
                        {
                            length = -1;
                        }
                        else
                        {
                            object serializedValue = value3.SerializedValue;
                            if (serializedValue == null)
                            {
                                length = -1;
                            }
                            else
                            {
                                if (!(serializedValue is string) && !binarySupported)
                                {
                                    serializedValue = Convert.ToBase64String((byte[])serializedValue);
                                }
                                if (serializedValue is string)
                                {
                                    str = (string)serializedValue;
                                    length = str.Length;
                                    position = builder2.Length;
                                }
                                else
                                {
                                    byte[] buffer = (byte[])serializedValue;
                                    position = (int)stream.Position;
                                    stream.Write(buffer, 0, buffer.Length);
                                    stream.Position = position + buffer.Length;
                                    length = buffer.Length;
                                }
                            }
                        }
                        builder.Append(value3.Name + ":" + ((str != null) ? "S" : "B") + ":" + position.ToString(CultureInfo.InvariantCulture) + ":" + length.ToString(CultureInfo.InvariantCulture) + ":");
                        if (str != null)
                        {
                            builder2.Append(str);
                        }
                    }
                    if (binarySupported)
                    {
                        buf = stream.ToArray();
                    }
                }
                finally
                {
                    if (stream != null)
                    {
                        stream.Close();
                    }
                }
            }
            catch
            {
                throw;
            }
            allNames = builder.ToString();
            allValues = builder2.ToString();
        }
    }
}
