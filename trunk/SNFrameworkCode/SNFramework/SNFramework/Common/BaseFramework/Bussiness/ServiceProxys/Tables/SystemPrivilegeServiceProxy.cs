// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.ServiceModel;
using System.Text;
using Legendigital.Framework.Common.BaseFramework.Bussiness.Wrappers;
using Legendigital.Framework.Common.Bussiness.Interfaces;
using Legendigital.Framework.Common.Data.Interfaces;
using Legendigital.Framework.Common.Bussiness.NHibernate;
using Legendigital.Framework.Common.BaseFramework.Data.Tables;
using Legendigital.Framework.Common.BaseFramework.Entity.Tables;
using Spring.Transaction.Interceptor;


namespace Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables
{
    [ServiceContract(Namespace = "http://Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables")]
    public interface ISystemPrivilegeServiceProxy : IBaseSpringNHibernateEntityServiceProxy<SystemPrivilegeEntity, int>, ISystemPrivilegeServiceProxyDesigner
    {
 
        [OperationContract]
        SystemPrivilegeEntity FindByPermissionCode(string permissionCode);

        void QuickGeneratePrivilege(SystemResourcesEntity entity);

        List<SystemPrivilegeEntity> TestFindResouceNameAndOPName(string resourceName, string opName);
    }

    public partial class SystemPrivilegeServiceProxy : BaseSpringNHibernateEntityServiceProxy<SystemPrivilegeEntity,int>, ISystemPrivilegeServiceProxy
    {
 

        public SystemPrivilegeEntity FindByPermissionCode(string permissionCode)
        {
            return this.DataObjectsContainerIocID.SystemPrivilegeDataObjectInstance.GetByCode(permissionCode);
        }

        public SystemPrivilegeEntity FindBySystemResourcesEntity(SystemResourcesEntity entity)
        {
            return this.DataObjectsContainerIocID.SystemPrivilegeDataObjectInstance.FindBySystemResourcesEntity(entity);
        }

        [Transaction(ReadOnly = false)]
        public void QuickGeneratePrivilege(SystemResourcesEntity resourcesEntity)
        {
            List<SystemOperationEntity> ops =
                this.DataObjectsContainerIocID.SystemOperationDataObjectInstance.
                    GetList_By_ResourceID_SystemResourcesEntity(resourcesEntity);

            int i = 1;

            foreach (SystemOperationEntity operationEntity in ops)
            {
                SystemPrivilegeEntity privilegeEntity = this.DataObjectsContainerIocID.SystemPrivilegeDataObjectInstance.FindBySystemOperation(operationEntity);

                if(privilegeEntity==null)
                {                    
                    privilegeEntity = new SystemPrivilegeEntity();
                    privilegeEntity.ResourcesID = resourcesEntity;
                    privilegeEntity.OperationID = operationEntity;
                }

                privilegeEntity.PrivilegeEnName = resourcesEntity.ResourcesNameEn + operationEntity.OperationNameEn;
                privilegeEntity.PrivilegeCnName = resourcesEntity.ResourcesNameCn + operationEntity.OperationNameCn;
                privilegeEntity.Description = "";
                privilegeEntity.PrivilegeOrder = i;

                this.DataObjectsContainerIocID.SystemPrivilegeDataObjectInstance.SaveOrUpdate(privilegeEntity);

                i++;

            }

        }

        public List<SystemPrivilegeEntity> TestFindResouceNameAndOPName(string resourceName, string opName)
        {
            return this.SelfDataObj.TestFindResouceNameAndOPName(resourceName, opName);
        }
    }
}
