// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using Legendigital.Framework.Common.BaseFramework.Bussiness.Wrappers;
using Legendigital.Framework.Common.Bussiness.Interfaces;
using Legendigital.Framework.Common.Data.Interfaces;
using Legendigital.Framework.Common.Bussiness.NHibernate;
using Legendigital.Framework.Common.BaseFramework.Data.Tables;
using Legendigital.Framework.Common.BaseFramework.Entity.Tables;
using System.ServiceModel;


namespace Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables
{
    [ServiceContract(Namespace = "http://Legendigital.Framework.Common.BaseFramework.Bussiness.ServiceProxys.Tables")]
    public interface ISystemApplicationServiceProxy : IBaseSpringNHibernateEntityServiceProxy<SystemApplicationEntity>, ISystemApplicationServiceProxyDesigner
    {
        [OperationContract]
        SystemApplicationWrapper CreateOrLoadApplication(string configValue);
        [OperationContract]
        List<SystemApplicationEntity> GetUserAvaiableApplications(SystemUserWrapper user);
    }

    public partial class SystemApplicationServiceProxy : ISystemApplicationServiceProxy
    {
        public SystemApplicationWrapper CreateOrLoadApplication(string configValue)
        {
            List<SystemApplicationEntity> listApplication = SelfDataObj.FindedApplicationsByName(configValue);
            if (listApplication.Count > 0)
                return new SystemApplicationWrapper(listApplication[0]);
            else
            {
                var app = new SystemApplicationEntity()
                {
                    SystemApplicationName = configValue,
                    SystemApplicationDescription = configValue,
                    SystemApplicationUrl = "#",
                    SystemApplicationIsSystemApplication = true
                };
                this.SelfDataObj.Save(app);
                return new SystemApplicationWrapper(app);
            }
        }

        public List<SystemApplicationEntity> GetUserAvaiableApplications(SystemUserWrapper user)
        {
            //获取用户分配的角色.
            List<SystemRoleEntity> userAssignedRole =
                this.DataObjectsContainerIocID.SystemUserRoleRelationDataObjectInstance.GetUserAssignedRoles(user.entity);

            //获取角色分配的的应用程序.
            return this.DataObjectsContainerIocID.SystemRoleApplicationDataObjectInstance.GetUserAssignedApplications(userAssignedRole);
        }
    }
}
