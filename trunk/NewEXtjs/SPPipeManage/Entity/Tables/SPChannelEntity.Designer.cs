// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;

namespace LD.SPPipeManage.Entity.Tables
{
	/// <summary>
	///	短行通道
	/// </summary>
	public partial class SPChannelEntity : ICloneable
	{
        #region 公共常量

		public static readonly string CLASS_FULL_NAME = "LD.SPPipeManage.Entity.Tables.SPChannelEntity";
		public static readonly string PROPERTY_NAME_ID = "Id";
		public static readonly string PROPERTY_NAME_NAME = "Name";
		public static readonly string PROPERTY_NAME_DESCRIPTION = "Description";
		public static readonly string PROPERTY_NAME_AREA = "Area";
		public static readonly string PROPERTY_NAME_OPERATOR = "Operator";
		public static readonly string PROPERTY_NAME_CHANNELCODE = "ChannelCode";
		public static readonly string PROPERTY_NAME_FUZZYCOMMAND = "FuzzyCommand";
		public static readonly string PROPERTY_NAME_ACCURATECOMMAND = "AccurateCommand";
		public static readonly string PROPERTY_NAME_PORT = "Port";
		public static readonly string PROPERTY_NAME_CHANNELTYPE = "ChannelType";
		public static readonly string PROPERTY_NAME_PRICE = "Price";
		public static readonly string PROPERTY_NAME_RATE = "Rate";
		public static readonly string PROPERTY_NAME_STATUS = "Status";
		public static readonly string PROPERTY_NAME_CREATETIME = "CreateTime";
		public static readonly string PROPERTY_NAME_CREATEBY = "CreateBy";
		
        #endregion
	
        #region 私有成员变量

		private bool _isChanged;		
		private bool _isDeleted;
		
		private int _id;
		private string _name;
		private string _description;
		private string _area;
		private string _operator;
		private string _channelCode;
		private string _fuzzyCommand;
		private string _accurateCommand;
		private string _port;
		private string _channelType;
		private decimal? _price;
		private int? _rate;
		private int? _status;
		private DateTime? _createTime;
		private int? _createBy;
		
		#endregion

		#region 构造函数
		/// <summary>
		/// 默认构造函数
		/// </summary>
		public SPChannelEntity()
		{
			_id = 0;
			_name = null;
			_description = null;
			_area = null;
			_operator = null;
			_channelCode = null;
			_fuzzyCommand = null;
			_accurateCommand = null;
			_port = null;
			_channelType = null;
			_price = null;
			_rate = null;
			_status = null;
			_createTime = null;
			_createBy = null;
		}
		#endregion

		#region 全构造函数
		/// <summary>
		/// 全构造函数
		/// </summary>
		public SPChannelEntity( int id, string name, string description, string area, string operatorp, string channelCode, string fuzzyCommand, string accurateCommand, string port, string channelType, decimal? price, int? rate, int? status, DateTime? createTime, int? createBy)
		{
			_id = id;
			_name = name;
			_description = description;
			_area = area;
			_operator = operatorp;
			_channelCode = channelCode;
			_fuzzyCommand = fuzzyCommand;
			_accurateCommand = accurateCommand;
			_port = port;
			_channelType = channelType;
			_price = price;
			_rate = rate;
			_status = status;
			_createTime = createTime;
			_createBy = createBy;
		}
		#endregion     
	
	    #region 公共属性

		/// <summary>
		/// 主键
		/// </summary>
		
		public virtual int Id
		{
			get { return _id; }

			set	
			{
				_isChanged |= (_id != value); _id = value;
			}
		}

		/// <summary>
		/// 名称
		/// </summary>
		
		public virtual string Name
		{
			get { return _name; }

			set	
			{

				if( value != null && value.Length > 400)
					throw new ArgumentOutOfRangeException("Invalid value for Name", value, value.ToString());
				_isChanged |= (_name != value); _name = value;
			}
		}

		/// <summary>
		/// 描述
		/// </summary>
		
		public virtual string Description
		{
			get { return _description; }

			set	
			{

				if( value != null && value.Length > 4000)
					throw new ArgumentOutOfRangeException("Invalid value for Description", value, value.ToString());
				_isChanged |= (_description != value); _description = value;
			}
		}

		/// <summary>
		/// 支持区域
		/// </summary>
		
		public virtual string Area
		{
			get { return _area; }

			set	
			{

				if( value != null && value.Length > 4000)
					throw new ArgumentOutOfRangeException("Invalid value for Area", value, value.ToString());
				_isChanged |= (_area != value); _area = value;
			}
		}

		/// <summary>
		/// 运营商
		/// </summary>
		
		public virtual string Operator
		{
			get { return _operator; }

			set	
			{

				if( value != null && value.Length > 400)
					throw new ArgumentOutOfRangeException("Invalid value for Operator", value, value.ToString());
				_isChanged |= (_operator != value); _operator = value;
			}
		}

		/// <summary>
		/// 通道编号
		/// </summary>
		
		public virtual string ChannelCode
		{
			get { return _channelCode; }

			set	
			{

				if( value != null && value.Length > 400)
					throw new ArgumentOutOfRangeException("Invalid value for ChannelCode", value, value.ToString());
				_isChanged |= (_channelCode != value); _channelCode = value;
			}
		}

		/// <summary>
		/// 模糊指令
		/// </summary>
		
		public virtual string FuzzyCommand
		{
			get { return _fuzzyCommand; }

			set	
			{

				if( value != null && value.Length > 400)
					throw new ArgumentOutOfRangeException("Invalid value for FuzzyCommand", value, value.ToString());
				_isChanged |= (_fuzzyCommand != value); _fuzzyCommand = value;
			}
		}

		/// <summary>
		/// 精准指令
		/// </summary>
		
		public virtual string AccurateCommand
		{
			get { return _accurateCommand; }

			set	
			{

				if( value != null && value.Length > 400)
					throw new ArgumentOutOfRangeException("Invalid value for AccurateCommand", value, value.ToString());
				_isChanged |= (_accurateCommand != value); _accurateCommand = value;
			}
		}

		/// <summary>
		/// 端口号
		/// </summary>
		
		public virtual string Port
		{
			get { return _port; }

			set	
			{

				if( value != null && value.Length > 400)
					throw new ArgumentOutOfRangeException("Invalid value for Port", value, value.ToString());
				_isChanged |= (_port != value); _port = value;
			}
		}

		/// <summary>
		/// 通道类型
		/// </summary>
		
		public virtual string ChannelType
		{
			get { return _channelType; }

			set	
			{

				if( value != null && value.Length > 400)
					throw new ArgumentOutOfRangeException("Invalid value for ChannelType", value, value.ToString());
				_isChanged |= (_channelType != value); _channelType = value;
			}
		}

		/// <summary>
		/// 价格
		/// </summary>
		
		public virtual decimal? Price
		{
			get { return _price; }

			set	
			{
				_isChanged |= (_price != value); _price = value;
			}
		}

		/// <summary>
		/// 分成比例
		/// </summary>
		
		public virtual int? Rate
		{
			get { return _rate; }

			set	
			{
				_isChanged |= (_rate != value); _rate = value;
			}
		}

		/// <summary>
		/// 状态
		/// </summary>
		
		public virtual int? Status
		{
			get { return _status; }

			set	
			{
				_isChanged |= (_status != value); _status = value;
			}
		}

		/// <summary>
		/// 创建时间
		/// </summary>
		
		public virtual DateTime? CreateTime
		{
			get { return _createTime; }

			set	
			{
				_isChanged |= (_createTime != value); _createTime = value;
			}
		}

		/// <summary>
		/// 创建人
		/// </summary>
		
		public virtual int? CreateBy
		{
			get { return _createBy; }

			set	
			{
				_isChanged |= (_createBy != value); _createBy = value;
			}
		}
		/// <summary>
		/// 返回对象是否被改变。
		/// </summary>
		public virtual bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public virtual bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 

        #region 公共方法
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public virtual void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion

		#region Equals 和 HashCode 方法覆盖
		/// <summary>
		/// local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals( object obj )
		{
			if( this == obj ) return true;
			
			if( ( obj == null ) || ( obj.GetType() != this.GetType() ) ) return false;
			
			SPChannelEntity castObj = (SPChannelEntity)obj;
			
			return ( castObj != null ) && ( this._id == castObj.Id );
		}
		
		/// <summary>
		/// local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			
			int hash = 57; 
			hash = 27 * hash * _id.GetHashCode();

			return hash; 
		}
		#endregion
	
		#region ICloneable methods
		
		public virtual object Clone()
		{
			return this.MemberwiseClone();
		}
		
		#endregion
	
	}
}
