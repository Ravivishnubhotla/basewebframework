// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using NHibernate.Criterion;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;
using LD.SPPipeManage.Entity.Tables;
using Legendigital.Framework.Common.Data.NHibernate;


namespace LD.SPPipeManage.Data.Tables
{
    public partial class SPSendRequestInfoDataObject : BaseNHibernateDataObject<SPSendRequestInfoEntity>
    {
				#region Expression Query Property (标准查询字段)
		public static readonly Property PROPERTY_ID = Property.ForName(SPSendRequestInfoEntity.PROPERTY_NAME_ID);
		public static readonly Property PROPERTY_TOURL = Property.ForName(SPSendRequestInfoEntity.PROPERTY_NAME_TOURL);
		public static readonly Property PROPERTY_DATAID = Property.ForName(SPSendRequestInfoEntity.PROPERTY_NAME_DATAID);
		public static readonly Property PROPERTY_ISSUCCESS = Property.ForName(SPSendRequestInfoEntity.PROPERTY_NAME_ISSUCCESS);
		public static readonly Property PROPERTY_ERRORCODE = Property.ForName(SPSendRequestInfoEntity.PROPERTY_NAME_ERRORCODE);
		public static readonly Property PROPERTY_ERRORMESSAGE = Property.ForName(SPSendRequestInfoEntity.PROPERTY_NAME_ERRORMESSAGE);
		public static readonly Property PROPERTY_SENDPARANS = Property.ForName(SPSendRequestInfoEntity.PROPERTY_NAME_SENDPARANS);
      
		#region 子类集合字段查询字段
	
		#endregion

		#endregion

		
		public override string[] PkPropertyName
        {
            get { return new string[] { "Id" }; }
        }
		
		public override Type GetFieldTypeByFieldName(string fieldName)
        {
			switch (fieldName)
            {
                case "Id":
                    return typeof (int);
                case "ToUrl":
                    return typeof (int);
                case "DataID":
                    return typeof (int);
                case "IsSuccess":
                    return typeof (bool);
                case "ErrorCode":
                    return typeof (string);
                case "ErrorMessage":
                    return typeof (string);
                case "SendParans":
                    return typeof (string);
          }
			return typeof(string);
        }
		
		
		
		
		
    }
}
