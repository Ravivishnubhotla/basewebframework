// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using NHibernate.Criterion;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;
using LD.SPPipeManage.Entity.Tables;
using Legendigital.Framework.Common.Data.NHibernate;


namespace LD.SPPipeManage.Data.Tables
{
    public partial class SPMonitoringRequestDataObject : BaseNHibernateDataObject<SPMonitoringRequestEntity>
    {
				#region Expression Query Property (标准查询字段)
		public static readonly Property PROPERTY_ID = Property.ForName(SPMonitoringRequestEntity.PROPERTY_NAME_ID);
		public static readonly Property PROPERTY_RECIEVEDCONTENT = Property.ForName(SPMonitoringRequestEntity.PROPERTY_NAME_RECIEVEDCONTENT);
		public static readonly Property PROPERTY_RECIEVEDDATE = Property.ForName(SPMonitoringRequestEntity.PROPERTY_NAME_RECIEVEDDATE);
		public static readonly Property PROPERTY_RECIEVEDIP = Property.ForName(SPMonitoringRequestEntity.PROPERTY_NAME_RECIEVEDIP);
		public static readonly Property PROPERTY_RECIEVEDSENDURL = Property.ForName(SPMonitoringRequestEntity.PROPERTY_NAME_RECIEVEDSENDURL);
		public static readonly Property PROPERTY_CHANNELID = Property.ForName(SPMonitoringRequestEntity.PROPERTY_NAME_CHANNELID);
      
		#region 子类集合字段查询字段
	
		#endregion

		#endregion

		
		public override string[] PkPropertyName
        {
            get { return new string[] { "Id" }; }
        }
		
		public override Type GetFieldTypeByFieldName(string fieldName)
        {
			switch (fieldName)
            {
                case "Id":
                    return typeof (int);
                case "RecievedContent":
                    return typeof (string);
                case "RecievedDate":
                    return typeof (DateTime);
                case "RecievedIP":
                    return typeof (string);
                case "RecievedSendUrl":
                    return typeof (string);
                case "ChannelID":
                    return typeof (int);
          }
			return typeof(string);
        }
		

		
		
    }
}
