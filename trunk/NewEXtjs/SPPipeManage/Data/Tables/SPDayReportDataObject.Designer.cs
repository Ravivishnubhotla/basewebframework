// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using NHibernate.Criterion;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;
using LD.SPPipeManage.Entity.Tables;
using Legendigital.Framework.Common.Data.NHibernate;


namespace LD.SPPipeManage.Data.Tables
{
    public partial class SPDayReportDataObject : BaseNHibernateDataObject<SPDayReportEntity>
    {
				#region Expression Query Property (标准查询字段)
		public static readonly Property PROPERTY_REPORTID = Property.ForName(SPDayReportEntity.PROPERTY_NAME_REPORTID);
		public static readonly Property PROPERTY_REPORTDATE = Property.ForName(SPDayReportEntity.PROPERTY_NAME_REPORTDATE);
		public static readonly Property PROPERTY_UPTOTALCOUNT = Property.ForName(SPDayReportEntity.PROPERTY_NAME_UPTOTALCOUNT);
		public static readonly Property PROPERTY_UPSUCCESS = Property.ForName(SPDayReportEntity.PROPERTY_NAME_UPSUCCESS);
		public static readonly Property PROPERTY_UPINTERCEPT = Property.ForName(SPDayReportEntity.PROPERTY_NAME_UPINTERCEPT);
		public static readonly Property PROPERTY_DOWNTOTALCOUNT = Property.ForName(SPDayReportEntity.PROPERTY_NAME_DOWNTOTALCOUNT);
		public static readonly Property PROPERTY_DOWNSUCCESS = Property.ForName(SPDayReportEntity.PROPERTY_NAME_DOWNSUCCESS);
		public static readonly Property PROPERTY_DOWNINTERCEPT = Property.ForName(SPDayReportEntity.PROPERTY_NAME_DOWNINTERCEPT);
		public static readonly Property PROPERTY_DAYXMLFILENAME = Property.ForName(SPDayReportEntity.PROPERTY_NAME_DAYXMLFILENAME);
      
		#region 子类集合字段查询字段
	
		#endregion

		#endregion

		
		public override string[] PkPropertyName
        {
            get { return new string[] { "ReportID" }; }
        }
		
		public override Type GetFieldTypeByFieldName(string fieldName)
        {
			switch (fieldName)
            {
                case "ReportID":
                    return typeof (int);
                case "ReportDate":
                    return typeof (DateTime);
                case "UpTotalCount":
                    return typeof (int);
                case "UpSuccess":
                    return typeof (int);
                case "UpIntercept":
                    return typeof (int);
                case "DownTotalCount":
                    return typeof (int);
                case "DownSuccess":
                    return typeof (int);
                case "DownIntercept":
                    return typeof (int);
                case "DayXmlFileName":
                    return typeof (string);
          }
			return typeof(string);
        }
    }
}
