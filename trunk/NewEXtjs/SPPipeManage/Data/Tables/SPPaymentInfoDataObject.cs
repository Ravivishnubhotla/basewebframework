// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using NHibernate.Criterion;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;
using LD.SPPipeManage.Entity.Tables;
using Legendigital.Framework.Common.Data.NHibernate;

namespace LD.SPPipeManage.Data.Tables
{
    public partial class SPPaymentInfoDataObject
    {
        public List<SPPaymentInfoEntity> FindAllByOrderByAndCleintIDAndChanneLIDAndDateNoIntercept(SPChannelEntity channelId, SPClientEntity clientId, DateTime startDateTime, DateTime enddateTime, string sortFieldName, bool isDesc, int pageIndex, int pageSize, out int recordCount)
        {

            var queryBuilder = new NHibernateDynamicQueryGenerator<SPPaymentInfoEntity>();

            if (channelId != null)
                queryBuilder.AddWhereClause(PROPERTY_CHANNELID.Eq(channelId));

            if (clientId != null)
                queryBuilder.AddWhereClause(PROPERTY_CLIENTID.Eq(clientId));


            if (startDateTime==DateTime.MinValue)
                startDateTime = DateTime.Now;


            if (enddateTime == DateTime.MinValue)
                enddateTime = DateTime.Now;

            queryBuilder.AddWhereClause(PROPERTY_CREATEDATE.Ge(startDateTime.Date));

            queryBuilder.AddWhereClause(PROPERTY_CREATEDATE.Lt(enddateTime.AddDays(1).Date));

            queryBuilder.AddWhereClause(PROPERTY_ISINTERCEPT.Eq(false));

            AddDefaultOrderByToQueryGenerator(sortFieldName, isDesc, queryBuilder);

            queryBuilder.SetFirstResult((pageIndex - 1) * pageSize);

            queryBuilder.SetMaxResults(pageSize);

            return FindListByPageByQueryBuilder(queryBuilder, out recordCount);

        }

        public List<SPPaymentInfoEntity> FindAllDataTableByOrderByAndCleintIDAndChanneLIDAndDate(SPChannelEntity channelId, SPClientEntity clientId, DateTime startDateTime, DateTime enddateTime, string dataType, string sortFieldName, bool isDesc, int pageIndex, int pageSize, out int recordCount)
        {
            var queryBuilder = new NHibernateDynamicQueryGenerator<SPPaymentInfoEntity>();

            if (channelId != null)
                queryBuilder.AddWhereClause(PROPERTY_CHANNELID.Eq(channelId));

            if (clientId != null)
                queryBuilder.AddWhereClause(PROPERTY_CLIENTID.Eq(clientId));


            if (startDateTime == DateTime.MinValue)
                startDateTime = DateTime.Now;


            if (enddateTime == DateTime.MinValue)
                enddateTime = DateTime.Now;

            queryBuilder.AddWhereClause(PROPERTY_CREATEDATE.Ge(startDateTime.Date));

            queryBuilder.AddWhereClause(PROPERTY_CREATEDATE.Lt(enddateTime.AddDays(1).Date));

            switch (dataType)
            {
                case "All":
                    break;
                case "Intercept":
                    queryBuilder.AddWhereClause(PROPERTY_ISINTERCEPT.Eq(true));
                    break;
                case "Down":
                    queryBuilder.AddWhereClause(PROPERTY_ISINTERCEPT.Eq(false));
                    break;
                case "DownSycn":
                    queryBuilder.AddWhereClause(PROPERTY_ISINTERCEPT.Eq(false));
                    queryBuilder.AddWhereClause(PROPERTY_SUCESSSTOSEND.Eq(true));
                    break;
            }

            AddDefaultOrderByToQueryGenerator(sortFieldName, isDesc, queryBuilder);

            queryBuilder.SetFirstResult((pageIndex - 1) * pageSize);

            queryBuilder.SetMaxResults(pageSize);

            return FindListByPageByQueryBuilder(queryBuilder, out recordCount);        








        }
    }
}
