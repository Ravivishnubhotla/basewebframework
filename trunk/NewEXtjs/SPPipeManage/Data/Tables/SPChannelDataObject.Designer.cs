// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using NHibernate.Criterion;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;
using LD.SPPipeManage.Entity.Tables;
using Legendigital.Framework.Common.Data.NHibernate;


namespace LD.SPPipeManage.Data.Tables
{
    public partial class SPChannelDataObject : BaseNHibernateDataObject<SPChannelEntity>
    {
				#region Expression Query Property (标准查询字段)
		public static readonly Property PROPERTY_ID = Property.ForName(SPChannelEntity.PROPERTY_NAME_ID);
		public static readonly Property PROPERTY_NAME = Property.ForName(SPChannelEntity.PROPERTY_NAME_NAME);
		public static readonly Property PROPERTY_DESCRIPTION = Property.ForName(SPChannelEntity.PROPERTY_NAME_DESCRIPTION);
		public static readonly Property PROPERTY_AREA = Property.ForName(SPChannelEntity.PROPERTY_NAME_AREA);
		public static readonly Property PROPERTY_OPERATOR = Property.ForName(SPChannelEntity.PROPERTY_NAME_OPERATOR);
		public static readonly Property PROPERTY_CHANNELCODE = Property.ForName(SPChannelEntity.PROPERTY_NAME_CHANNELCODE);
		public static readonly Property PROPERTY_FUZZYCOMMAND = Property.ForName(SPChannelEntity.PROPERTY_NAME_FUZZYCOMMAND);
		public static readonly Property PROPERTY_ACCURATECOMMAND = Property.ForName(SPChannelEntity.PROPERTY_NAME_ACCURATECOMMAND);
		public static readonly Property PROPERTY_PORT = Property.ForName(SPChannelEntity.PROPERTY_NAME_PORT);
		public static readonly Property PROPERTY_CHANNELTYPE = Property.ForName(SPChannelEntity.PROPERTY_NAME_CHANNELTYPE);
		public static readonly Property PROPERTY_PRICE = Property.ForName(SPChannelEntity.PROPERTY_NAME_PRICE);
		public static readonly Property PROPERTY_RATE = Property.ForName(SPChannelEntity.PROPERTY_NAME_RATE);
		public static readonly Property PROPERTY_STATUS = Property.ForName(SPChannelEntity.PROPERTY_NAME_STATUS);
		public static readonly Property PROPERTY_CREATETIME = Property.ForName(SPChannelEntity.PROPERTY_NAME_CREATETIME);
		public static readonly Property PROPERTY_CREATEBY = Property.ForName(SPChannelEntity.PROPERTY_NAME_CREATEBY);
		public static readonly Property PROPERTY_OKMESSAGE = Property.ForName(SPChannelEntity.PROPERTY_NAME_OKMESSAGE);
		public static readonly Property PROPERTY_FAILEDMESSAGE = Property.ForName(SPChannelEntity.PROPERTY_NAME_FAILEDMESSAGE);
      
		#region 子类集合字段查询字段
	
		#endregion

		#endregion

		
		public override string[] PkPropertyName
        {
            get { return new string[] { "Id" }; }
        }
		
		public override Type GetFieldTypeByFieldName(string fieldName)
        {
			switch (fieldName)
            {
                case "Id":
                    return typeof (int);
                case "Name":
                    return typeof (string);
                case "Description":
                    return typeof (string);
                case "Area":
                    return typeof (string);
                case "Operator":
                    return typeof (string);
                case "ChannelCode":
                    return typeof (string);
                case "FuzzyCommand":
                    return typeof (string);
                case "AccurateCommand":
                    return typeof (string);
                case "Port":
                    return typeof (string);
                case "ChannelType":
                    return typeof (string);
                case "Price":
                    return typeof (decimal);
                case "Rate":
                    return typeof (int);
                case "Status":
                    return typeof (int);
                case "CreateTime":
                    return typeof (DateTime);
                case "CreateBy":
                    return typeof (int);
                case "OkMessage":
                    return typeof (string);
                case "FailedMessage":
                    return typeof (string);
          }
			return typeof(string);
        }
		

		
		
    }
}
