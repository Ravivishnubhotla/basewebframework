// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Text;
using LD.SPPipeManage.Data.AdoNet;
using LD.SPPipeManage.Data.Tables.Container;
using Legendigital.Framework.Common.Bussiness.Interfaces;
using Legendigital.Framework.Common.Data.Interfaces;
using Legendigital.Framework.Common.Bussiness.NHibernate;
using LD.SPPipeManage.Data.Tables;
using LD.SPPipeManage.Entity.Tables;
using Legendigital.Framework.Common.Utility;
using Spring.Transaction.Interceptor;


namespace LD.SPPipeManage.Bussiness.ServiceProxys.Tables
{
	public interface ISPDayReportServiceProxy : IBaseSpringNHibernateEntityServiceProxy<SPDayReportEntity>
    {
	    void BulidReport(DateTime date);
	    string GetDbSize();
	    void ArchivesData(string archivesPath, DateTime startDate, DateTime endDate);
	    DataTable GetDayliyReport(DateTime dateTime);
    }

    internal class SPDayReportServiceProxy : BaseSpringNHibernateEntityServiceProxy<SPDayReportEntity>, ISPDayReportServiceProxy
    {
        [Transaction(ReadOnly=false)]
        public void BulidReport(DateTime date)
        {
            //Get all need to generate report's channle nad client ID.
            DataSet dsAllClientChannel = this.AdoNetDb.GetAllClientChannel();

            DataSet dsReportDate = this.AdoNetDb.GetAllNOReportData(date.Year, date.Month, date.Day);

            foreach (DataRow dataRow in dsAllClientChannel.Tables[0].Rows)
            {
                int channelID = (int)dataRow["ChannelID"];
                int clientID = (int)dataRow["ClientID"];

                int upTotalCount = GetUpTotalCount(date, channelID, clientID, dsReportDate);
                int interceptTotalCount = GetInterceptTotalCount(date, channelID, clientID, dsReportDate);
                int sendFailedTotalCount = GetSendFailedTotalCount(date, channelID, clientID, dsReportDate);


                SPDayReportEntity dayReportEntity = this.SelfDataObj.FindReportByChannelIDChannelIDAndDate(channelID, clientID, date);

                bool hasReport = false;


                if (dayReportEntity==null)
                {
                    hasReport = false;
                    dayReportEntity = new SPDayReportEntity();
                }
                else
                {
                    hasReport = true;
                }

                dayReportEntity.ChannelID = channelID;
                dayReportEntity.ClientID = clientID;
                if (hasReport)
                {
                    dayReportEntity.UpTotalCount += upTotalCount;
                    dayReportEntity.UpSuccess += upTotalCount;
                    dayReportEntity.InterceptTotalCount += upTotalCount;
                    dayReportEntity.InterceptSuccess += interceptTotalCount;
                    dayReportEntity.DownTotalCount += (upTotalCount - interceptTotalCount);
                    dayReportEntity.DownSuccess += (upTotalCount - interceptTotalCount-sendFailedTotalCount);
                }
                else
                {
                    dayReportEntity.UpTotalCount = upTotalCount;
                    dayReportEntity.UpSuccess = upTotalCount;
                    dayReportEntity.InterceptTotalCount = upTotalCount;
                    dayReportEntity.InterceptSuccess = interceptTotalCount;
                    dayReportEntity.DownTotalCount = (upTotalCount - interceptTotalCount);
                    dayReportEntity.DownSuccess = (upTotalCount - interceptTotalCount-sendFailedTotalCount);
                }        
                
                dayReportEntity.ReportDate = new DateTime(date.Year, date.Month, date.Day);

                this.SelfDataObj.SaveOrUpdate(dayReportEntity);



            }

            this.AdoNetDb.ClearAllReportedData(date);     
        }

        public string GetDbSize()
        {
            return this.AdoNetDb.GetDbSize();
        }

        [Transaction(ReadOnly = false)]
        public void ArchivesData(string archivesPath, DateTime startDate, DateTime endDate)
        {
            for (DateTime i = startDate; i < endDate.AddDays(1); i=i.AddDays(1))
            {
                ArchivesData(archivesPath, i);
            }
        }

        public DataTable GetDayliyReport(DateTime dateTime)
        {
            return this.AdoNetDb.GetDayliyReport(dateTime);
        }

        [Transaction(ReadOnly = false)]
        private void ArchivesData(string archivesPath, DateTime dateTime)
        {
            BulidReport(dateTime);

            DataSet ds = this.AdoNetDb.GetAllReportData(dateTime);

            if(ds.Tables[0].Rows.Count ==0)
                return;

            string fileName = GetFileName(archivesPath, dateTime);

            WriteDataSetToXml(archivesPath, Path.GetFileNameWithoutExtension(fileName)+".jpg", ds);

            WriteDataSetToXml(archivesPath, Path.GetFileNameWithoutExtension(fileName) + ".zip", ds);

            this.AdoNetDb.DeleteAllReportData(dateTime);
        }


        private int GetUpTotalCount(DateTime date, int channelID, int clientID, DataSet dsReportDate)
        {
            string filter = string.Format(" [CYear] = {0} and [CMonth] = {1} and [CDay] = {2} and [ChannelID] = {3} and [ClientID] = {4} ",
                                          date.Year, date.Month, date.Day, channelID, clientID);

            object upTotalCountResult = dsReportDate.Tables[0].Compute("Sum(TotalCount)", filter);

            if (upTotalCountResult == System.DBNull.Value)
                return 0;

            return Convert.ToInt32(upTotalCountResult);
        }

        private int GetInterceptTotalCount(DateTime date, int channelID, int clientID, DataSet dsReportDate)
        {

            string filter = string.Format(" [CYear] = {0} and [CMonth] = {1} and [CDay] = {2} and [ChannelID] = {3} and [ClientID] = {4}  and [IsIntercept] = 1 ",
                                          date.Year, date.Month, date.Day, channelID, clientID);

            object upTotalCountResult = dsReportDate.Tables[0].Compute("Sum(TotalCount)", filter);

            if (upTotalCountResult == System.DBNull.Value)
                return 0;

            return Convert.ToInt32(upTotalCountResult);
        }

        private int GetSendFailedTotalCount(DateTime date, int channelID, int clientID, DataSet dsReportDate)
        {
            string filter = string.Format(" [CYear] = {0} and [CMonth] = {1} and [CDay] = {2} and [ChannelID] = {3} and [ClientID] = {4}  and [IsIntercept] = 0 and [SucesssToSend] =0",
                                          date.Year, date.Month, date.Day, channelID, clientID);

            object upTotalCountResult = dsReportDate.Tables[0].Compute("Sum(TotalCount)", filter);

            if (upTotalCountResult == System.DBNull.Value)
                return 0;

            return Convert.ToInt32(upTotalCountResult);
        }

        private string GetFileName(string reportOutPutPath, DateTime date)
        {
            int i = 1;

            bool existFileName = false;

            string fileName = "";

            do
            {
                existFileName =
                    File.Exists(Path.Combine(reportOutPutPath, date.ToString("yyyyMMdd") + i.ToString("D3") + ".zip"));

                fileName = Path.Combine(reportOutPutPath, date.ToString("yyyyMMdd") + i.ToString("D3") + ".zip");

                i++;


            } while (existFileName);

            return fileName;
        }

        private void WriteDataSetToXml(string reportOutPutPath, string fileName, DataSet dsReportDate)
        {
            string filePath = Path.Combine(reportOutPutPath, fileName);

            if (File.Exists(filePath))
                File.Delete(filePath);

            MemoryStream ms = new MemoryStream();

            dsReportDate.WriteXml(ms);

            File.WriteAllBytes(filePath, CompressionUtil.CompressZipFile(ms.ToArray(), Path.GetFileNameWithoutExtension(fileName)+".xml"));
        }

        public DataObjectContainers DataObjectsContainerIocID { set; get; }
	
        public SPDayReportDataObject SelfDataObj
        {
            set
            {
                selfDataObject = value;
            }
            get
            {
                return (SPDayReportDataObject)selfDataObject;
            }
        }
		
        public AdoNetDataObject AdoNetDb { set; get; }
    }
}
