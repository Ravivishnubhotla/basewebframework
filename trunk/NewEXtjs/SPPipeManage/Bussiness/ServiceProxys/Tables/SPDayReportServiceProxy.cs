// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Text;
using Legendigital.Framework.Common.Bussiness.Interfaces;
using Legendigital.Framework.Common.Data.Interfaces;
using Legendigital.Framework.Common.Bussiness.NHibernate;
using LD.SPPipeManage.Data.Tables;
using LD.SPPipeManage.Entity.Tables;
using Legendigital.Framework.Common.Utility;
using Spring.Transaction.Interceptor;


namespace LD.SPPipeManage.Bussiness.ServiceProxys.Tables
{
	public interface ISPDayReportServiceProxy : IBaseSpringNHibernateEntityServiceProxy<SPDayReportEntity>
    {
	    void BulidReport(string reportOutPutPath, DateTime date);
    }

    internal partial class SPDayReportServiceProxy : ISPDayReportServiceProxy
    {
        [Transaction(ReadOnly=false)]
        public void BulidReport(string reportOutPutPath, DateTime date)
        {
            DataSet dsReportDate = this.AdoNetDb.GetAllReportData(date.Year, date.Month, date.Day);

            WriteDataSetToXml(reportOutPutPath, date.ToString("yyyyMMdd"+".bak"), dsReportDate);

            DataSet dsAll = this.AdoNetDb.GetAllCountData(date.Year, date.Month, date.Day);

            DataSet dsAllIsIntercept = this.AdoNetDb.GetAllIsInterceptCountData(date.Year, date.Month, date.Day);

            DataSet dsAllNoIsIntercept = this.AdoNetDb.GetAllNoIsInterceptCountData(date.Year, date.Month, date.Day);

            DataSet dsAllSuccessSend = this.AdoNetDb.GetAllSuccessSendCountData(date.Year, date.Month, date.Day);

            DataSet dsAllFailedSend = this.AdoNetDb.GetAllFailedSendCountData(date.Year, date.Month, date.Day);

            bool hasReport = false;


            foreach (DataRow dataRow in dsAll.Tables[0].Rows)
            {
                int channelID = (int)dataRow["ChannelID"];
                int clientID = (int)dataRow["ChannelID"];

                SPDayReportEntity dayReportEntity = this.SelfDataObj.FindReportByChannelIDChannelIDAndDate(channelID, clientID, date);

                if (dayReportEntity==null)
                {
                    hasReport = false;
                    dayReportEntity = new SPDayReportEntity();
                }
                else
                {
                    hasReport = true;
                }

                dayReportEntity.ChannelID = channelID;
                dayReportEntity.ClientID = clientID;
                if (hasReport)
                {
                    dayReportEntity.UpTotalCount += (int)dataRow["TotalCount"];
                    dayReportEntity.UpSuccess += (int)dataRow["TotalCount"];
                    dayReportEntity.InterceptTotalCount += GetTotalCountFromDataSet("TotalCount", dayReportEntity.ChannelID.Value, dayReportEntity.ClientID.Value, dsAllIsIntercept);
                    dayReportEntity.InterceptSuccess += GetTotalCountFromDataSet("TotalCount", dayReportEntity.ChannelID.Value, dayReportEntity.ClientID.Value, dsAllIsIntercept);
                    dayReportEntity.DownTotalCount += GetTotalCountFromDataSet("TotalCount", dayReportEntity.ChannelID.Value, dayReportEntity.ClientID.Value, dsAllNoIsIntercept);
                    dayReportEntity.DownSuccess += GetTotalCountFromDataSet("TotalCount", dayReportEntity.ChannelID.Value, dayReportEntity.ClientID.Value, dsAllSuccessSend);
                }
                else
                {
                    dayReportEntity.UpTotalCount = (int)dataRow["TotalCount"];
                    dayReportEntity.UpSuccess = (int)dataRow["TotalCount"];
                    dayReportEntity.InterceptTotalCount = GetTotalCountFromDataSet("TotalCount", dayReportEntity.ChannelID.Value, dayReportEntity.ClientID.Value, dsAllIsIntercept);
                    dayReportEntity.InterceptSuccess = GetTotalCountFromDataSet("TotalCount", dayReportEntity.ChannelID.Value, dayReportEntity.ClientID.Value, dsAllIsIntercept);
                    dayReportEntity.DownTotalCount = GetTotalCountFromDataSet("TotalCount", dayReportEntity.ChannelID.Value, dayReportEntity.ClientID.Value, dsAllNoIsIntercept);
                    dayReportEntity.DownSuccess = GetTotalCountFromDataSet("TotalCount", dayReportEntity.ChannelID.Value, dayReportEntity.ClientID.Value, dsAllSuccessSend);           
                }


                dayReportEntity.DayXmlFileName = "yyyyMMdd.zip";
                dayReportEntity.ReportDate = new DateTime(date.Year, date.Month, date.Day);

                this.SelfDataObj.SaveOrUpdate(dayReportEntity);
            }

            WriteDataSetToXml(reportOutPutPath, date.ToString("yyyyMMdd") + ".zip", dsReportDate);


            this.AdoNetDb.DeleteAllReportData(date);

        }

        private int GetTotalCountFromDataSet(string totalcount, int channelId, int clientId, DataSet ds)
        {
            DataRow[] drs =
                ds.Tables[0].Select(string.Format(" ChannelID = {0} and ClientID ={1} ", channelId.ToString(),
                                                  clientId.ToString()));
            if (drs.Length > 0)
                return (int) drs[0][totalcount];
            else
                return 0;
        }

        private void WriteDataSetToXml(string reportOutPutPath, string fileName, DataSet dsReportDate)
        {
            string filePath = Path.Combine(reportOutPutPath, fileName);

            if (File.Exists(filePath))
                File.Delete(filePath);

            MemoryStream ms = new MemoryStream();

            dsReportDate.WriteXml(ms);

            File.WriteAllBytes(filePath, CompressionUtil.CompressZipFile(ms.ToArray(), Path.GetFileNameWithoutExtension(fileName)+".xml"));
        }
    }
}
