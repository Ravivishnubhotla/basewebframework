// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using LD.SPPipeManage.Bussiness.Wrappers;
using Legendigital.Framework.Common.Bussiness.Interfaces;
using Legendigital.Framework.Common.Data.Interfaces;
using Legendigital.Framework.Common.Bussiness.NHibernate;
using LD.SPPipeManage.Data.Tables;
using LD.SPPipeManage.Entity.Tables;
using Spring.Transaction.Interceptor;


namespace LD.SPPipeManage.Bussiness.ServiceProxys.Tables
{
	public interface ISPInterceptRateServiceProxy : IBaseSpringNHibernateEntityServiceProxy<SPInterceptRateEntity>
    {
        SPInterceptRateEntity FindRateByChannelIdAndClinetId(int channelID, int clientID);
    }

    internal partial class SPInterceptRateServiceProxy : ISPInterceptRateServiceProxy
    {
        [Transaction(ReadOnly = false)]
        public SPInterceptRateEntity FindRateByChannelIdAndClinetId(int channelID, int clientID)
        {
            SPInterceptRateEntity spInterceptRateEntity = this.SelfDataObj.FindRateByChannelIdAndClinetId(channelID, clientID);

            if(spInterceptRateEntity==null)
            {
                spInterceptRateEntity = new SPInterceptRateEntity();
                spInterceptRateEntity.ChannelID = channelID;
                spInterceptRateEntity.ClientID = clientID;
                spInterceptRateEntity.InterceptCount = 0;
                spInterceptRateEntity.TotalCount = 0;
                spInterceptRateEntity.InterceptRate = 0;
                spInterceptRateEntity.LastSycnDate = System.DateTime.Now;
                this.SelfDataObj.Save(spInterceptRateEntity);

            }

            return spInterceptRateEntity;

        }

 
    }
}
