// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using LD.SPPipeManage.Bussiness.Wrappers;
using Legendigital.Framework.Common.Bussiness.Interfaces;
using Legendigital.Framework.Common.Data.Interfaces;
using Legendigital.Framework.Common.Bussiness.NHibernate;
using LD.SPPipeManage.Data.Tables;
using LD.SPPipeManage.Entity.Tables;


namespace LD.SPPipeManage.Bussiness.ServiceProxys.Tables
{
    public interface ISPClientChannelSettingServiceProxy : IBaseSpringNHibernateEntityServiceProxy<SPClientChannelSettingEntity>, ISPClientChannelSettingServiceProxyDesigner
    {
	    List<SPClientChannelSettingEntity> GetSettingByChannel(SPChannelEntity spChannelEntity);
        List<SPChannelEntity> GetChannelByClient(SPClientEntity spClientEntity);
    }

    internal partial class SPClientChannelSettingServiceProxy : ISPClientChannelSettingServiceProxy
    {
        public List<SPClientChannelSettingEntity> GetSettingByChannel(SPChannelEntity spChannelEntity)
        {
            return this.SelfDataObj.GetSettingByChannel(spChannelEntity);
        }

        public List<SPChannelEntity> GetChannelByClient(SPClientEntity spClientEntity)
        {
            List < SPClientChannelSettingEntity > list =
                this.SelfDataObj.GetSettingByClient(
                    spClientEntity);

            List<SPChannelEntity> clients = new List<SPChannelEntity>();

            foreach (SPClientChannelSettingEntity spClientChannelSettingEntity in list)
            {
                if(!clients.Contains(spClientChannelSettingEntity.ChannelID))
                {
                    clients.Add(spClientChannelSettingEntity.ChannelID);
                }
            }

            return clients;

        }
    }
}
