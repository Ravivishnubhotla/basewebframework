// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using Legendigital.Framework.Common.Bussiness.Interfaces;
using Legendigital.Framework.Common.Data.Interfaces;
using Legendigital.Framework.Common.Bussiness.NHibernate;
using LD.SPPipeManage.Data.Tables;
using LD.SPPipeManage.Entity.Tables;
using Spring.Transaction.Interceptor;


namespace LD.SPPipeManage.Bussiness.ServiceProxys.Tables
{
	public interface ISPClientPriceServiceProxy : IBaseSpringNHibernateEntityServiceProxy<SPClientPriceEntity> ,ISPClientPriceServiceProxyDesigner
    {
	    decimal GetClientPrice(int clientid);
	    decimal GetClientGroupPrice(int clientid, int clientGroupid);
	    void SetClientPrice(int clientid, decimal price);
	    void SetClientGroupPrice(int clientid, int clientGroupid, decimal price);
    }

    internal partial class SPClientPriceServiceProxy : ISPClientPriceServiceProxy
    {
        public decimal GetClientPrice(int clientid)
        {
            SPClientPriceEntity spClientPrice = this.SelfDataObj.GetClientPriceByClientID(clientid);

            if (spClientPrice == null)
                return decimal.Zero;

            if (!spClientPrice.Price.HasValue)
            {
                spClientPrice.Price = decimal.Zero;
            }

            return spClientPrice.Price.Value;
        }

        public decimal GetClientGroupPrice(int clientid, int clientGroupid)
        {
            SPClientPriceEntity spClientPrice = this.SelfDataObj.GetClientPriceByClientID(clientid, clientGroupid);

            if (spClientPrice == null)
                return decimal.Zero;

            if (!spClientPrice.Price.HasValue)
            {
                spClientPrice.Price = decimal.Zero;
            }

            return spClientPrice.Price.Value;
        }

        [Transaction(ReadOnly = false)]
        public void SetClientPrice(int clientid, decimal price)
        {
            SPClientPriceEntity spClientPrice = this.SelfDataObj.GetClientPriceByClientID(clientid);

            if(spClientPrice==null)
            {
                spClientPrice = new SPClientPriceEntity();
                spClientPrice.SPClientID = clientid;
                spClientPrice.Price = price;
                spClientPrice.SPClientGroupID = 0;
                this.SelfDataObj.Save(spClientPrice);
            }
            else
            {
                spClientPrice.Price = price;
                spClientPrice.SPClientGroupID = 0;
                this.SelfDataObj.Update(spClientPrice);
            }
        }

        [Transaction(ReadOnly = false)]
        public void SetClientGroupPrice(int clientid, int clientGroupid, decimal price)
        {
            SPClientPriceEntity spClientPrice = this.SelfDataObj.GetClientPriceByClientID(clientid, clientGroupid);


            if (spClientPrice == null)
            {
                spClientPrice = new SPClientPriceEntity();
                spClientPrice.SPClientID = clientid;
                spClientPrice.Price = price;
                spClientPrice.SPClientGroupID = clientGroupid;
                this.SelfDataObj.Save(spClientPrice);
            }
            else
            {
                spClientPrice.Price = price;
                spClientPrice.SPClientGroupID = clientGroupid;
                this.SelfDataObj.Update(spClientPrice);
            }
        }
    }
}
