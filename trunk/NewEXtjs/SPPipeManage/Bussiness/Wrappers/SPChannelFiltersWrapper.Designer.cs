// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using Spring.Context.Support;
using Common.Logging;
using LD.SPPipeManage.Entity.Tables;
using LD.SPPipeManage.Bussiness.ServiceProxys.Tables.Container;
using LD.SPPipeManage.Bussiness.ServiceProxys.Tables;

namespace LD.SPPipeManage.Bussiness.Wrappers
{
    public partial class SPChannelFiltersWrapper
    {
        #region Member

		internal static readonly ISPChannelFiltersServiceProxy businessProxy = ((LD.SPPipeManage.Bussiness.ServiceProxys.Tables.Container.ServiceProxyContainer)(ContextRegistry.GetContext().GetObject("ServiceProxyContainerIocID", typeof(LD.SPPipeManage.Bussiness.ServiceProxys.Tables.Container.ServiceProxyContainer)))).SPChannelFiltersServiceProxyInstance;
		//internal static readonly ISPChannelFiltersServiceProxy businessProxy = ((ServiceProxyContainer)(ContextRegistry.GetContext().GetObject("ServiceProxyContainerIocID"))).SPChannelFiltersServiceProxyInstance;

        internal SPChannelFiltersEntity entity;
		
		private static ILog logger = null;

        public static ILog Logger
        {
            get
            {
                if (logger == null)
                    logger = LogManager.GetLogger(typeof(SPChannelFiltersWrapper));
                return logger;
            }
        }

        #endregion

        #region Construtor
        public SPChannelFiltersWrapper() : this(new SPChannelFiltersEntity())
        {
            
        }

        internal SPChannelFiltersWrapper(SPChannelFiltersEntity entityObj)
        {
            entity = entityObj;
        }
		#endregion
		
		#region Equals 和 HashCode 方法覆盖
		public override bool Equals(object obj)
        {
            if (obj == null && entity!=null)
            {
                if (entity.Id == 0)
                    return true;

                return false;
            }
            return entity.Equals(obj);
        }

        public override int GetHashCode()
        {
            return entity.GetHashCode();
        }
		#endregion
		
        #region 公共常量

		public static readonly string CLASS_FULL_NAME = "LD.SPPipeManage.Entity.Tables.SPChannelFiltersEntity";
		public static readonly string PROPERTY_NAME_ID = "Id";
		public static readonly string PROPERTY_NAME_CHANNELID = "ChannelID";
		public static readonly string PROPERTY_NAME_PARAMSNAME = "ParamsName";
		public static readonly string PROPERTY_NAME_FILTERTYPE = "FilterType";
		public static readonly string PROPERTY_NAME_FILTERVALUE = "FilterValue";
		
        #endregion


		#region Public Property
		/// <summary>
		/// 
		/// </summary>		
		public int Id
		{
			get
			{
				return entity.Id;
			}
			set
			{
				entity.Id = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public int? ChannelID
		{
			get
			{
				return entity.ChannelID;
			}
			set
			{
				entity.ChannelID = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string ParamsName
		{
			get
			{
				return entity.ParamsName;
			}
			set
			{
				entity.ParamsName = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string FilterType
		{
			get
			{
				return entity.FilterType;
			}
			set
			{
				entity.FilterType = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string FilterValue
		{
			get
			{
				return entity.FilterValue;
			}
			set
			{
				entity.FilterValue = value;
			}
		}
		#endregion 





        #region "FKQuery"



        #endregion

        #region Static Common Data Operation
		
		internal static List<SPChannelFiltersWrapper> ConvertToWrapperList(List<SPChannelFiltersEntity> entitylist)
        {
            List<SPChannelFiltersWrapper> list = new List<SPChannelFiltersWrapper>();
            foreach (SPChannelFiltersEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }

		internal static List<SPChannelFiltersWrapper> ConvertToWrapperList(IList<SPChannelFiltersEntity> entitylist)
        {
            List<SPChannelFiltersWrapper> list = new List<SPChannelFiltersWrapper>();
            foreach (SPChannelFiltersEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }
		
		internal static List<SPChannelFiltersEntity> ConvertToEntityList(List<SPChannelFiltersWrapper> wrapperlist)
        {
            List<SPChannelFiltersEntity> list = new List<SPChannelFiltersEntity>();
            foreach (SPChannelFiltersWrapper wrapper in wrapperlist)
            {
                list.Add(wrapper.entity);
            }
            return list;
        }

        internal static SPChannelFiltersWrapper ConvertEntityToWrapper(SPChannelFiltersEntity entity)
        {
            if (entity == null)
                return null;
				
            if (entity.Id == 0)
                return null;

            return new SPChannelFiltersWrapper(entity);
        }
		
		#endregion

    }//End Class
}// End Namespace

