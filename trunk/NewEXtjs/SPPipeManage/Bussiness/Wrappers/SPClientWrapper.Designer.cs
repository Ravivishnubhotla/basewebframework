// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using Spring.Context.Support;
using Common.Logging;
using LD.SPPipeManage.Entity.Tables;
using LD.SPPipeManage.Bussiness.ServiceProxys.Tables.Container;
using LD.SPPipeManage.Bussiness.ServiceProxys.Tables;

namespace LD.SPPipeManage.Bussiness.Wrappers
{
    public partial class SPClientWrapper
    {
        #region Member

		internal static readonly ISPClientServiceProxy businessProxy = ((LD.SPPipeManage.Bussiness.ServiceProxys.Tables.Container.ServiceProxyContainer)(ContextRegistry.GetContext().GetObject("ServiceProxyContainerIocID", typeof(LD.SPPipeManage.Bussiness.ServiceProxys.Tables.Container.ServiceProxyContainer)))).SPClientServiceProxyInstance;
		//internal static readonly ISPClientServiceProxy businessProxy = ((ServiceProxyContainer)(ContextRegistry.GetContext().GetObject("ServiceProxyContainerIocID"))).SPClientServiceProxyInstance;

        internal SPClientEntity entity;
		
		private static ILog logger = null;

        public static ILog Logger
        {
            get
            {
                if (logger == null)
                    logger = LogManager.GetLogger(typeof(SPClientWrapper));
                return logger;
            }
        }

        #endregion

        #region Construtor
        public SPClientWrapper() : this(new SPClientEntity())
        {
            
        }

        internal SPClientWrapper(SPClientEntity entityObj)
        {
            entity = entityObj;
        }
		#endregion
		
		#region Equals 和 HashCode 方法覆盖
		public override bool Equals(object obj)
        {
            if (obj == null && entity!=null)
            {
                if (entity.Id == 0)
                    return true;

                return false;
            }
            return entity.Equals(obj);
        }

        public override int GetHashCode()
        {
            return entity.GetHashCode();
        }
		#endregion
		
        #region 公共常量

		public static readonly string CLASS_FULL_NAME = "LD.SPPipeManage.Entity.Tables.SPClientEntity";
		public static readonly string PROPERTY_NAME_ID = "Id";
		public static readonly string PROPERTY_NAME_NAME = "Name";
		public static readonly string PROPERTY_NAME_DESCRIPTION = "Description";
		public static readonly string PROPERTY_NAME_RECIEVEDATAURL = "RecieveDataUrl";
		public static readonly string PROPERTY_NAME_USERID = "UserID";
		public static readonly string PROPERTY_NAME_SYNCDATA = "SyncData";
		public static readonly string PROPERTY_NAME_OKMESSAGE = "OkMessage";
		public static readonly string PROPERTY_NAME_FAILEDMESSAGE = "FailedMessage";
		public static readonly string PROPERTY_NAME_SYNCTYPE = "SyncType";
		public static readonly string PROPERTY_NAME_SPCLIENTGROUPID = "SPClientGroupID";
		public static readonly string PROPERTY_NAME_ISDEFAULTCLIENT = "IsDefaultClient";
		public static readonly string PROPERTY_NAME_ALIAS = "Alias";
		
        #endregion


		#region Public Property
		/// <summary>
		/// 
		/// </summary>		
		public int Id
		{
			get
			{
				return entity.Id;
			}
			set
			{
				entity.Id = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string Name
		{
			get
			{
				return entity.Name;
			}
			set
			{
				entity.Name = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string Description
		{
			get
			{
				return entity.Description;
			}
			set
			{
				entity.Description = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string RecieveDataUrl
		{
			get
			{
				return entity.RecieveDataUrl;
			}
			set
			{
				entity.RecieveDataUrl = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public int? UserID
		{
			get
			{
				return entity.UserID;
			}
			set
			{
				entity.UserID = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public bool? SyncData
		{
			get
			{
				return entity.SyncData;
			}
			set
			{
				entity.SyncData = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string OkMessage
		{
			get
			{
				return entity.OkMessage;
			}
			set
			{
				entity.OkMessage = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string FailedMessage
		{
			get
			{
				return entity.FailedMessage;
			}
			set
			{
				entity.FailedMessage = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string SyncType
		{
			get
			{
				return entity.SyncType;
			}
			set
			{
				entity.SyncType = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public SPClientGroupWrapper SPClientGroupID
		{
			get
			{
				return SPClientGroupWrapper.ConvertEntityToWrapper(entity.SPClientGroupID) ;
			}
			set
			{
				entity.SPClientGroupID = ((value == null) ? null : value.entity);
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public bool? IsDefaultClient
		{
			get
			{
				return entity.IsDefaultClient;
			}
			set
			{
				entity.IsDefaultClient = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string Alias
		{
			get
			{
				return entity.Alias;
			}
			set
			{
				entity.Alias = value;
			}
		}
		#endregion 





        #region "FKQuery"
		
        public static List<SPClientWrapper> FindAllByOrderByAndFilterAndSPClientGroupID(string orderByColumnName, bool isDesc, int pageIndex, int pageSize, SPClientGroupWrapper sPClientGroupID, out int recordCount)
        {
            return ConvertToWrapperList(businessProxy.FindAllByOrderByAndFilterAndSPClientGroupID(orderByColumnName, isDesc, pageIndex, pageSize, sPClientGroupID.entity, out recordCount));
        }

        public static List<SPClientWrapper> FindAllBySPClientGroupID(SPClientGroupWrapper sPClientGroupID)
        {
            return ConvertToWrapperList(businessProxy.FindAllBySPClientGroupID(sPClientGroupID.entity));
        }
		



        #endregion








        #region Static Common Data Operation
		
		internal static List<SPClientWrapper> ConvertToWrapperList(List<SPClientEntity> entitylist)
        {
            List<SPClientWrapper> list = new List<SPClientWrapper>();
            foreach (SPClientEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }

		internal static List<SPClientWrapper> ConvertToWrapperList(IList<SPClientEntity> entitylist)
        {
            List<SPClientWrapper> list = new List<SPClientWrapper>();
            foreach (SPClientEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }
		
		internal static List<SPClientEntity> ConvertToEntityList(List<SPClientWrapper> wrapperlist)
        {
            List<SPClientEntity> list = new List<SPClientEntity>();
            foreach (SPClientWrapper wrapper in wrapperlist)
            {
                list.Add(wrapper.entity);
            }
            return list;
        }

        internal static SPClientWrapper ConvertEntityToWrapper(SPClientEntity entity)
        {
            if (entity == null)
                return null;
				
            if (entity.Id == 0)
                return null;

            return new SPClientWrapper(entity);
        }
		
		#endregion

    }//End Class
}// End Namespace

