// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using Spring.Context.Support;
using Common.Logging;
using LD.SPPipeManage.Entity.Tables;
using LD.SPPipeManage.Bussiness.ServiceProxys.Tables.Container;
using LD.SPPipeManage.Bussiness.ServiceProxys.Tables;

namespace LD.SPPipeManage.Bussiness.Wrappers
{
    public partial class SPDayReportWrapper
    {
        #region Member

		internal static readonly ISPDayReportServiceProxy businessProxy = ((LD.SPPipeManage.Bussiness.ServiceProxys.Tables.Container.ServiceProxyContainer)(ContextRegistry.GetContext().GetObject("ServiceProxyContainerIocID", typeof(LD.SPPipeManage.Bussiness.ServiceProxys.Tables.Container.ServiceProxyContainer)))).SPDayReportServiceProxyInstance;
		//internal static readonly ISPDayReportServiceProxy businessProxy = ((ServiceProxyContainer)(ContextRegistry.GetContext().GetObject("ServiceProxyContainerIocID"))).SPDayReportServiceProxyInstance;

        internal SPDayReportEntity entity;
		
		private static ILog logger = null;

        public static ILog Logger
        {
            get
            {
                if (logger == null)
                    logger = LogManager.GetLogger(typeof(SPDayReportWrapper));
                return logger;
            }
        }

        #endregion

        #region Construtor
        public SPDayReportWrapper() : this(new SPDayReportEntity())
        {
            
        }

        internal SPDayReportWrapper(SPDayReportEntity entityObj)
        {
            entity = entityObj;
        }
		#endregion
		
		#region Equals 和 HashCode 方法覆盖
		public override bool Equals(object obj)
        {
            if (obj == null && entity!=null)
            {
                if (entity.ReportID == 0)
                    return true;

                return false;
            }
            return entity.Equals(obj);
        }

        public override int GetHashCode()
        {
            return entity.GetHashCode();
        }
		#endregion
		
        #region 公共常量

		public static readonly string CLASS_FULL_NAME = "LD.SPPipeManage.Entity.Tables.SPDayReportEntity";
		public static readonly string PROPERTY_NAME_REPORTID = "ReportID";
		public static readonly string PROPERTY_NAME_REPORTDATE = "ReportDate";
		public static readonly string PROPERTY_NAME_UPTOTALCOUNT = "UpTotalCount";
		public static readonly string PROPERTY_NAME_UPSUCCESS = "UpSuccess";
		public static readonly string PROPERTY_NAME_UPINTERCEPT = "UpIntercept";
		public static readonly string PROPERTY_NAME_DOWNTOTALCOUNT = "DownTotalCount";
		public static readonly string PROPERTY_NAME_DOWNSUCCESS = "DownSuccess";
		public static readonly string PROPERTY_NAME_DOWNINTERCEPT = "DownIntercept";
		public static readonly string PROPERTY_NAME_DAYXMLFILENAME = "DayXmlFileName";
		
        #endregion


		#region Public Property
		/// <summary>
		/// 
		/// </summary>		
		public int ReportID
		{
			get
			{
				return entity.ReportID;
			}
			set
			{
				entity.ReportID = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public DateTime? ReportDate
		{
			get
			{
				return entity.ReportDate;
			}
			set
			{
				entity.ReportDate = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public int? UpTotalCount
		{
			get
			{
				return entity.UpTotalCount;
			}
			set
			{
				entity.UpTotalCount = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public int? UpSuccess
		{
			get
			{
				return entity.UpSuccess;
			}
			set
			{
				entity.UpSuccess = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public int? UpIntercept
		{
			get
			{
				return entity.UpIntercept;
			}
			set
			{
				entity.UpIntercept = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public int? DownTotalCount
		{
			get
			{
				return entity.DownTotalCount;
			}
			set
			{
				entity.DownTotalCount = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public int? DownSuccess
		{
			get
			{
				return entity.DownSuccess;
			}
			set
			{
				entity.DownSuccess = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public int? DownIntercept
		{
			get
			{
				return entity.DownIntercept;
			}
			set
			{
				entity.DownIntercept = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string DayXmlFileName
		{
			get
			{
				return entity.DayXmlFileName;
			}
			set
			{
				entity.DayXmlFileName = value;
			}
		}
		#endregion 







        #region Static Common Data Operation
		
		internal static List<SPDayReportWrapper> ConvertToWrapperList(List<SPDayReportEntity> entitylist)
        {
            List<SPDayReportWrapper> list = new List<SPDayReportWrapper>();
            foreach (SPDayReportEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }

		internal static List<SPDayReportWrapper> ConvertToWrapperList(IList<SPDayReportEntity> entitylist)
        {
            List<SPDayReportWrapper> list = new List<SPDayReportWrapper>();
            foreach (SPDayReportEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }
		
		internal static List<SPDayReportEntity> ConvertToEntityList(List<SPDayReportWrapper> wrapperlist)
        {
            List<SPDayReportEntity> list = new List<SPDayReportEntity>();
            foreach (SPDayReportWrapper wrapper in wrapperlist)
            {
                list.Add(wrapper.entity);
            }
            return list;
        }

        internal static SPDayReportWrapper ConvertEntityToWrapper(SPDayReportEntity entity)
        {
            if (entity == null)
                return null;
				
            if (entity.ReportID == 0)
                return null;

            return new SPDayReportWrapper(entity);
        }
		
		#endregion

    }//End Class
}// End Namespace

