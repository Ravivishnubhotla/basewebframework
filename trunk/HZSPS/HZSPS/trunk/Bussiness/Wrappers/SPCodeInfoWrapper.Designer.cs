// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using Spring.Context.Support;
using Common.Logging;
using LD.SPPipeManage.Entity.Tables;
using LD.SPPipeManage.Bussiness.ServiceProxys.Tables.Container;
using LD.SPPipeManage.Bussiness.ServiceProxys.Tables;

namespace LD.SPPipeManage.Bussiness.Wrappers
{
    public partial class SPCodeInfoWrapper
    {
        #region Member

		internal static readonly ISPCodeInfoServiceProxy businessProxy = ((LD.SPPipeManage.Bussiness.ServiceProxys.Tables.Container.ServiceProxyContainer)(ContextRegistry.GetContext().GetObject("ServiceProxyContainerIocID", typeof(LD.SPPipeManage.Bussiness.ServiceProxys.Tables.Container.ServiceProxyContainer)))).SPCodeInfoServiceProxyInstance;
		//internal static readonly ISPCodeInfoServiceProxy businessProxy = ((ServiceProxyContainer)(ContextRegistry.GetContext().GetObject("ServiceProxyContainerIocID"))).SPCodeInfoServiceProxyInstance;

        internal SPCodeInfoEntity entity;
		
		private static ILog logger = null;

        public static ILog Logger
        {
            get
            {
                if (logger == null)
                    logger = LogManager.GetLogger(typeof(SPCodeInfoWrapper));
                return logger;
            }
        }

        #endregion

        #region Construtor
        public SPCodeInfoWrapper() : this(new SPCodeInfoEntity())
        {
            
        }

        internal SPCodeInfoWrapper(SPCodeInfoEntity entityObj)
        {
            entity = entityObj;
        }
		#endregion
		
		#region Equals 和 HashCode 方法覆盖
		public override bool Equals(object obj)
        {
            if (obj == null && entity!=null)
            {
                if (entity.Id == 0)
                    return true;

                return false;
            }
            return entity.Equals(obj);
        }

        public override int GetHashCode()
        {
            return entity.GetHashCode();
        }
		#endregion
		
        #region 公共常量

		public static readonly string CLASS_FULL_NAME = "LD.SPPipeManage.Entity.Tables.SPCodeInfoEntity";
		public static readonly string PROPERTY_NAME_ID = "Id";
		public static readonly string PROPERTY_NAME_CHANNELID = "ChannelID";
		public static readonly string PROPERTY_NAME_OPERATORTYPE = "OperatorType";
		public static readonly string PROPERTY_NAME_MO = "Mo";
		public static readonly string PROPERTY_NAME_CODETYPE = "CodeType";
		public static readonly string PROPERTY_NAME_SPCODE = "SPCode";
		public static readonly string PROPERTY_NAME_PROVINCE = "Province";
		public static readonly string PROPERTY_NAME_DISABLEAREA = "DisableArea";
		public static readonly string PROPERTY_NAME_DAYMONTHLIMIT = "DayMonthLimit";
		public static readonly string PROPERTY_NAME_ISLIMIT = "IsLimit";
		public static readonly string PROPERTY_NAME_ISENABLE = "IsEnable";
		public static readonly string PROPERTY_NAME_PRICE = "Price";
		public static readonly string PROPERTY_NAME_SENDTEXT = "SendText";
		public static readonly string PROPERTY_NAME_COMMENT = "Comment";
		public static readonly string PROPERTY_NAME_CREATEUSER = "CreateUser";
		public static readonly string PROPERTY_NAME_CREATETIME = "CreateTime";
		
        #endregion


		#region Public Property
		/// <summary>
		/// 
		/// </summary>		
		public int Id
		{
			get
			{
				return entity.Id;
			}
			set
			{
				entity.Id = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public SPChannelWrapper ChannelID
		{
			get
			{
				return SPChannelWrapper.ConvertEntityToWrapper(entity.ChannelID) ;
			}
			set
			{
				entity.ChannelID = ((value == null) ? null : value.entity);
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string OperatorType
		{
			get
			{
				return entity.OperatorType;
			}
			set
			{
				entity.OperatorType = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string Mo
		{
			get
			{
				return entity.Mo;
			}
			set
			{
				entity.Mo = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string CodeType
		{
			get
			{
				return entity.CodeType;
			}
			set
			{
				entity.CodeType = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string SPCode
		{
			get
			{
				return entity.SPCode;
			}
			set
			{
				entity.SPCode = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string Province
		{
			get
			{
				return entity.Province;
			}
			set
			{
				entity.Province = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string DisableArea
		{
			get
			{
				return entity.DisableArea;
			}
			set
			{
				entity.DisableArea = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string DayMonthLimit
		{
			get
			{
				return entity.DayMonthLimit;
			}
			set
			{
				entity.DayMonthLimit = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public bool IsLimit
		{
			get
			{
				return entity.IsLimit;
			}
			set
			{
				entity.IsLimit = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public bool IsEnable
		{
			get
			{
				return entity.IsEnable;
			}
			set
			{
				entity.IsEnable = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string Price
		{
			get
			{
				return entity.Price;
			}
			set
			{
				entity.Price = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string SendText
		{
			get
			{
				return entity.SendText;
			}
			set
			{
				entity.SendText = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public string Comment
		{
			get
			{
				return entity.Comment;
			}
			set
			{
				entity.Comment = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public int? CreateUser
		{
			get
			{
				return entity.CreateUser;
			}
			set
			{
				entity.CreateUser = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>		
		public DateTime? CreateTime
		{
			get
			{
				return entity.CreateTime;
			}
			set
			{
				entity.CreateTime = value;
			}
		}
		#endregion 





 

        #region Static Common Data Operation
		
		internal static List<SPCodeInfoWrapper> ConvertToWrapperList(List<SPCodeInfoEntity> entitylist)
        {
            List<SPCodeInfoWrapper> list = new List<SPCodeInfoWrapper>();
            foreach (SPCodeInfoEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }

		internal static List<SPCodeInfoWrapper> ConvertToWrapperList(IList<SPCodeInfoEntity> entitylist)
        {
            List<SPCodeInfoWrapper> list = new List<SPCodeInfoWrapper>();
            foreach (SPCodeInfoEntity lentity in entitylist)
            {
                list.Add(ConvertEntityToWrapper(lentity));
            }
            return list;
        }
		
		internal static List<SPCodeInfoEntity> ConvertToEntityList(List<SPCodeInfoWrapper> wrapperlist)
        {
            List<SPCodeInfoEntity> list = new List<SPCodeInfoEntity>();
            foreach (SPCodeInfoWrapper wrapper in wrapperlist)
            {
                list.Add(wrapper.entity);
            }
            return list;
        }

        internal static SPCodeInfoWrapper ConvertEntityToWrapper(SPCodeInfoEntity entity)
        {
            if (entity == null)
                return null;
				
            if (entity.Id == 0)
                return null;

            return new SPCodeInfoWrapper(entity);
        }
		
		#endregion

    }//End Class
}// End Namespace

