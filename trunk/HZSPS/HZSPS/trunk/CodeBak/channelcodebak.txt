using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Web;
using LD.SPPipeManage.Bussiness.Commons;
using LD.SPPipeManage.Bussiness.ServiceProxys.Tables;
using LD.SPPipeManage.Bussiness.UrlSender;
using LD.SPPipeManage.Entity.Tables;
using Legendigital.Framework.Common.Bussiness.NHibernate;

namespace LD.SPPipeManage.Bussiness.Wrappers
{
    public enum RequestErrorType
    {
        NoError,
        NoLinkID,
        RepeatLinkID,
        NoChannelClientSetting,
        DataSaveError,
        NoReportData
    }

    public class RequestError
    {
        public RequestErrorType ErrorType { get; set; }
        public string ErrorMessage { get; set; }
        public int ChannelID { get; set; }
        public int ClientID { get; set; }
    }


    [Serializable]
    public partial class SPChannelWrapper
    {
        #region Static Common Data Operation

        public static void Save(SPChannelWrapper obj)
        {
            businessProxy.Save(obj.entity);
        }

        public static void Update(SPChannelWrapper obj)
        {
            businessProxy.Update(obj.entity);
        }

        public static void SaveOrUpdate(SPChannelWrapper obj)
        {
            businessProxy.SaveOrUpdate(obj.entity);
        }

        public static void DeleteAll()
        {
            businessProxy.DeleteAll();
        }

        public static void DeleteByID(object id)
        {
            businessProxy.DeleteByID(id);
        }

        public static void PatchDeleteByIDs(object[] ids)
        {
            businessProxy.PatchDeleteByIDs(ids);
        }

        public static void Delete(SPChannelWrapper instance)
        {
            businessProxy.Delete(instance.entity);
        }

        public static void Refresh(SPChannelWrapper instance)
        {
            businessProxy.Refresh(instance.entity);
        }

        public static SPChannelWrapper FindById(object id)
        {
            return ConvertEntityToWrapper(businessProxy.FindById(id));
        }

        public static List<SPChannelWrapper> FindAll()
        {
            return ConvertToWrapperList(businessProxy.FindAll());
        }

        public static List<SPChannelWrapper> FindAll(int firstRow, int maxRows, out int recordCount)
        {
            List<SPChannelEntity> list = businessProxy.FindAll(firstRow, maxRows, out recordCount);
            return ConvertToWrapperList(list);
        }

        public static List<SPChannelWrapper> FindAllByOrderBy(string orderByColumnName, bool isDesc, int pageIndex,
                                                              int pageSize, out int recordCount)
        {
            return FindAllByOrderByAndFilter(new List<QueryFilter>(), orderByColumnName, isDesc, pageIndex, pageSize,
                                             out recordCount);
        }


        public static List<SPChannelWrapper> FindAllByOrderByAndFilter(List<QueryFilter> filters,
                                                                       string orderByColumnName, bool isDesc,
                                                                       int pageIndex, int pageSize, out int recordCount)
        {
            List<SPChannelWrapper> results = null;

            results = ConvertToWrapperList(
                businessProxy.FindAllByOrderByAndFilter(filters, orderByColumnName, isDesc,
                                                        (pageIndex - 1) * pageSize, pageSize, out recordCount));

            return results;
        }


        public static List<SPChannelWrapper> FindAllByOrderByAndFilter(List<QueryFilter> filters,
                                                                       string orderByFieldName, bool isDesc)
        {
            return ConvertToWrapperList(businessProxy.FindAllByOrderByAndFilter(filters, orderByFieldName, isDesc));
        }

        #endregion

        public static string[] fields = new[]
                                            {
                                                "cpid", "mid", "mobile", "port", "ywid", "msg", "linkid", "dest", "price",
                                                "extendfield1", "extendfield2", "extendfield3", "extendfield4",
                                                "extendfield5", "extendfield6", "extendfield7", "extendfield8",
                                                "extendfield9"
                                            };

        public ChannelStatus CStatus
        {
            get
            {
                switch (Status)
                {
                    case 0:
                        return ChannelStatus.Run;
                    case 1:
                        return ChannelStatus.Stop;
                    case 2:
                        return ChannelStatus.Disable;
                    default:
                        return ChannelStatus.Disable;
                }
            }
        }

        public string CStatusString
        {
            get
            {
                switch (CStatus)
                {
                    case ChannelStatus.Run:
                        return "运行";
                    case ChannelStatus.Stop:
                        return "暂停";
                    case ChannelStatus.Disable:
                        return "禁用";
                    default:
                        return "禁用";
                }
            }
        }

        public string InterfaceUrl
        {
            get
            {
                HttpContext context = HttpContext.Current;

                if (context == null)
                    return "";

                if (context.Request.Url.Port == 80)
                    return string.Format("{0}://{1}/SPSInterface/{2}Recieved.ashx", context.Request.Url.Scheme,
                                         context.Request.Url.Host, FuzzyCommand);

                return string.Format("{0}://{1}:{2}/SPSInterface/{3}Recieved.ashx", context.Request.Url.Scheme,
                                     context.Request.Url.Host,
                                     context.Request.Url.Port, FuzzyCommand);
            }
        }

        public string RequestReportTypeValue
        {
            get
            {
                if (string.IsNullOrEmpty(this.RequestTypeValues))
                    return "";

                string[] values = this.RequestTypeValues.Split('|');

                if (values.Length > 0)
                    return values[0];

                return "";
            }
        }

        public string RequestDataTypeValue
        {
            get
            {
                if (string.IsNullOrEmpty(this.RequestTypeValues))
                    return "";

                string[] values = this.RequestTypeValues.Split('|');

                if (values.Length > 1)
                    return values[1];

                return "";
            }
        }

        public string CodeList
        {
            get
            {
                List<SPClientChannelSettingWrapper> clientChannelSettings = GetAllClientChannelSetting();

                var sb = new StringBuilder();

                List<SPClientChannelSettingWrapper> sortedList = (from cc in clientChannelSettings
                                                                  orderby cc.OrderIndex descending
                                                                  select cc).ToList();

                foreach (SPClientChannelSettingWrapper channelSetting in sortedList)
                {
                    string interceptRate = "<font color='red'>0</font>";

                    string syncDataUrl = "";

                    if (!string.IsNullOrEmpty(channelSetting.SyncDataUrl))
                    {
                        syncDataUrl = " ,<font color='blue'>下家同步地址：" + channelSetting.SyncDataUrl + "</font>";
                    }

                    if (channelSetting.InterceptRate.HasValue && channelSetting.InterceptRate.Value > 0)
                    {
                        interceptRate = channelSetting.InterceptRate.Value.ToString();
                    }

                    string line = string.Format(
                        "名称 ‘{0}’ , 下家 ‘{2}’, 登陆ID ‘{6}’, 指令 '{7}' , 指令规则 '{1}', 扣率  {3},优先级  {5}, {4}<br/>", channelSetting.Name,
                        channelSetting.ChannelClientRuleMatch, channelSetting.ClientName,
                        interceptRate, syncDataUrl, channelSetting.OrderIndex, channelSetting.ClinetID.UserLoginID, channelSetting.ChannelClientCode);


                    sb.Append(line);
                }

                return sb.ToString();
            }
        }

        public string ParamsList
        {
            get
            {
                List<SPChannelParamsWrapper> clientChannelParams = GetAllEnableParams();

                var sb = new StringBuilder();

                foreach (SPChannelParamsWrapper paramsWrapper in clientChannelParams)
                {
                    sb.AppendFormat("参数 {0} - {2}：{1} ,<br/>", paramsWrapper.Name, paramsWrapper.Description,
                                    paramsWrapper.ParamsMappingName);
                }

                return sb.ToString();
            }
        }

        public static SPChannelWrapper GetChannelByPath(string fileName)
        {
            int id = 0;

            int.TryParse(fileName, out id);

            SPChannelWrapper channel = null;

            if (id != 0)
            {
                channel = FindById(id);
            }

            if (channel != null)
            {
                return channel;
            }

            return ConvertEntityToWrapper(businessProxy.FindByAlias(fileName));
        }

        public static Hashtable GetRequestValue(HttpContext requestContext)
        {
            Hashtable hb = new Hashtable();

            foreach (string key in requestContext.Request.Params.Keys)
            {
                hb.Add(key.ToLower(), requestContext.Request.Params[key.ToLower()]);
            }

            return hb;
        }

        public string GetRequsetValue(HttpContext requestContext, string fieldName)
        {
            return GetMappedParamValueFromRequest(GetRequestValue(requestContext), fieldName, GetFieldMappings());
        }

        public bool ProcessRequest(IHttpRequest httpGetPostRequest,
                           out RequestError error)
        {
            error = new RequestError();
            error.ErrorType = RequestErrorType.NoError;
            error.ErrorMessage = "";
            error.ChannelID = Id;

            Hashtable fieldMappings = GetFieldMappings();

            string cpid = GetMappedParamValueFromRequest(httpGetPostRequest.RequestParams, "cpid", fieldMappings);
            string mid = GetMappedParamValueFromRequest(httpGetPostRequest.RequestParams, "mid", fieldMappings);
            string mobile = GetMappedParamValueFromRequest(httpGetPostRequest.RequestParams, "mobile", fieldMappings);
            string port = GetMappedParamValueFromRequest(httpGetPostRequest.RequestParams, "port", fieldMappings);
            string ywid = GetMappedParamValueFromRequest(httpGetPostRequest.RequestParams, "ywid", fieldMappings);
            string msg = GetMappedParamValueFromRequest(httpGetPostRequest.RequestParams, "msg", fieldMappings);
            string linkid = GetMappedParamValueFromRequest(httpGetPostRequest.RequestParams, "linkid", fieldMappings);
            string dest = GetMappedParamValueFromRequest(httpGetPostRequest.RequestParams, "dest", fieldMappings);
            string price = GetMappedParamValueFromRequest(httpGetPostRequest.RequestParams, "price", fieldMappings);
            string extendfield1 = GetMappedParamValueFromRequest(httpGetPostRequest.RequestParams, "extendfield1", fieldMappings);
            string extendfield2 = GetMappedParamValueFromRequest(httpGetPostRequest.RequestParams, "extendfield2", fieldMappings);
            string extendfield3 = GetMappedParamValueFromRequest(httpGetPostRequest.RequestParams, "extendfield3", fieldMappings);
            string extendfield4 = GetMappedParamValueFromRequest(httpGetPostRequest.RequestParams, "extendfield4", fieldMappings);
            string extendfield5 = GetMappedParamValueFromRequest(httpGetPostRequest.RequestParams, "extendfield5", fieldMappings);
            string extendfield6 = GetMappedParamValueFromRequest(httpGetPostRequest.RequestParams, "extendfield6", fieldMappings);
            string extendfield7 = GetMappedParamValueFromRequest(httpGetPostRequest.RequestParams, "extendfield7", fieldMappings);
            string extendfield8 = GetMappedParamValueFromRequest(httpGetPostRequest.RequestParams, "extendfield8", fieldMappings);
            string extendfield9 = GetMappedParamValueFromRequest(httpGetPostRequest.RequestParams, "extendfield9", fieldMappings);


            if (string.IsNullOrEmpty(linkid) && IsAllowNullLinkID.HasValue && IsAllowNullLinkID.Value)
            {
                linkid = Guid.NewGuid().ToString();
            }

            if (string.IsNullOrEmpty(linkid))
            {
                error.ErrorType = RequestErrorType.NoLinkID;
                error.ErrorMessage = " 通道 ‘" + Name + "’ 请求失败：没有LinkID .";

                return false;
            }

            Hashtable exparams = GetEXParamsValue(httpGetPostRequest.RequestParams);

            PhoneAreaInfo phoneAreaInfo = GetPhoneAreaInfo(mobile);

            SPClientChannelSettingWrapper channelSetting = GetClientChannelSettingFromRequestValue(ywid ,cpid, phoneAreaInfo);

            if (channelSetting == null)
            {
                error.ErrorType = RequestErrorType.NoChannelClientSetting;
                error.ErrorMessage = "请求失败：通道‘" + Name + "’请求未能找到匹配的通道下家设置。";
                return false;
            }


            SPPaymentInfoWrapper paymentInfo = new SPPaymentInfoWrapper();

            paymentInfo.ChannelID = this;
            paymentInfo.ClientID = channelSetting.ClinetID;
            paymentInfo.ChannleClientID = channelSetting.Id;
            paymentInfo.Cpid = cpid;
            paymentInfo.Mid = mid;
            paymentInfo.MobileNumber = mobile;
            paymentInfo.Port = port;
            paymentInfo.Ywid = ywid;
            paymentInfo.Message = msg;
            paymentInfo.Linkid = linkid;
            paymentInfo.Dest = dest;
            paymentInfo.Price = price;
            paymentInfo.ExtendField1 = extendfield1;
            paymentInfo.ExtendField2 = extendfield2;
            paymentInfo.ExtendField3 = extendfield3;
            paymentInfo.ExtendField4 = extendfield4;
            paymentInfo.ExtendField5 = extendfield5;
            paymentInfo.ExtendField6 = extendfield6;
            paymentInfo.ExtendField7 = extendfield7;
            paymentInfo.ExtendField8 = extendfield8;
            paymentInfo.ExtendField9 = extendfield9;
            paymentInfo.Ip = httpGetPostRequest.RequestIp;
            paymentInfo.IsIntercept = channelSetting.CaculteIsIntercept();
            paymentInfo.CreateDate = DateTime.Now;
            paymentInfo.RequestContent = httpGetPostRequest.RequestData;

            if (phoneAreaInfo != null)
            {
                paymentInfo.Province = phoneAreaInfo.Province;
                paymentInfo.City = phoneAreaInfo.City;
            }


            paymentInfo.IsSycnData = false;

            UrlSendTask sendTask = null;

            if (!paymentInfo.IsIntercept.Value)
            {
                if (!string.IsNullOrEmpty(channelSetting.SyncDataUrl))
                {
                    paymentInfo.IsSycnData = true;
                    if (!string.IsNullOrEmpty(channelSetting.SyncType) && channelSetting.SyncType.Equals("2"))
                    {
                        paymentInfo.SucesssToSend = false;
                    }
                    else
                    {
                        paymentInfo.SucesssToSend = false;

                        sendTask = new UrlSendTask();

                        sendTask.SendUrl = channelSetting.BulidUrl(paymentInfo);
                        sendTask.OkMessage = channelSetting.OkMessage;



                        //paymentInfo.SucesssToSend = channelSetting.SendMsg(paymentInfo);
                    }
                }
                else
                {
                    paymentInfo.IsSycnData = false;
                    paymentInfo.SucesssToSend = false;
                }

            }
            else
            {
                paymentInfo.IsSycnData = false;
                paymentInfo.SucesssToSend = false;
            }

            try
            {
                PaymentInfoInsertErrorType errorType = PaymentInfoInsertErrorType.NoError;

                var uniqueKeyNames = new List<string>();

                List<SPChannelParamsWrapper> channelParams = GetAllEnableParams();

                foreach (SPChannelParamsWrapper spChannelParamsWrapper in channelParams)
                {
                    if (spChannelParamsWrapper.IsUnique.HasValue && spChannelParamsWrapper.IsUnique.Value)
                        uniqueKeyNames.Add(spChannelParamsWrapper.ParamsMappingName.ToLower());
                }

                if (!uniqueKeyNames.Contains("linkid"))
                {
                    uniqueKeyNames.Add("linkid");
                }

                bool result = paymentInfo.InsertPayment(uniqueKeyNames, out errorType);

                if (!result && errorType == PaymentInfoInsertErrorType.RepeatLinkID)
                {
                    error.ErrorType = RequestErrorType.RepeatLinkID;
                    error.ErrorMessage = " 通道 ‘" + Name + "’ 请求失败：重复的LinkID .";
                    error.ClientID = channelSetting.ClinetID.Id;
                    //SPFailedRequestWrapper.SaveFailedRequest(request, ip, query, " 通道 ‘" + Name + "’ 请求失败：重复的LinkID .",
                    //                                         Id, 0);

                    return false;
                }

                error.ErrorType = RequestErrorType.NoError;
                error.ErrorMessage = "";

                if (sendTask != null)
                {
                    sendTask.PaymentID = paymentInfo.Id;
                    ThreadPool.QueueUserWorkItem(UrlSender.UrlSender.SendRequest, sendTask);
                }

                return true;
            }
            catch (Exception ex)
            {
                error.ErrorType = RequestErrorType.DataSaveError;
                error.ErrorMessage = "请求失败：插入数据失败，错误信息：" + ex.Message;
                return false;
            }
        }

        private PhoneAreaInfo GetPhoneAreaInfo(string mobile)
        {
            PhoneAreaInfo phoneAreaInfo =  null;

            if (!string.IsNullOrEmpty(mobile) && mobile.Length > 7)
            {
                try
                {

                    try
                    {
                        phoneAreaInfo = PhoneCache.GetPhoneAreaByPhoneNumber(mobile);
                    }
                    catch (Exception)
                    {
                        phoneAreaInfo = SPPhoneAreaWrapper.GetPhoneCity(mobile.Substring(0, 7));
                    }

                }
                catch (Exception ex)
                {
                    Logger.Error(ex.Message);
                }
            }

            return phoneAreaInfo;
        }


        public List<SPChannelParamsWrapper> GetAllShowParams()
        {
            return SPChannelParamsWrapper.ConvertToWrapperList(businessProxy.GetAllShowParams(entity));
        }

        public List<SPChannelParamsWrapper> GetAllEnableParams()
        {
            return SPChannelParamsWrapper.ConvertToWrapperList(businessProxy.GetAllEnableParams(entity));
        }

        public Hashtable GetFieldMappings()
        {
            var mappingFields = new Hashtable();

            List<SPChannelParamsWrapper> spChannelParamsWrappers =
                SPChannelParamsWrapper.ConvertToWrapperList(businessProxy.GetAllEnableParams(entity));

            foreach (string field in fields)
            {
                string findFeild = field.ToLower();

                SPChannelParamsWrapper channelParamsWrapper =
                    spChannelParamsWrappers.Find(p => (p.ParamsMappingName.Equals(findFeild.ToLower())));

                if (channelParamsWrapper == null)
                {
                    //mappingFields.Add(findFeild.ToLower(), findFeild.ToLower());
                }
                else
                {
                    mappingFields.Add(findFeild.ToLower(), channelParamsWrapper.Name.ToLower());
                }
            }

            return mappingFields;
        }

        private Hashtable GetEXParamsValue(Hashtable hashtable)
        {
            return new Hashtable();
        }



        public List<SPClientChannelSettingWrapper> GetAllClientChannelSetting()
        {
            //return SPClientChannelSettingWrapper.GetSettingByChannel(this);
            List<SPClientChannelSettingWrapper> clientChannelSettingWrappers =
                SPClientChannelSettingWrapper.GetSettingByChannel(this);
            return clientChannelSettingWrappers.FindAll(p => (p.IsEnable));
        }

        private SPClientChannelSettingWrapper FindDefaultClientChannelSetting(List<SPClientChannelSettingWrapper> clientChannelSettings)
        {
            return (from cc in clientChannelSettings
                    where (string.IsNullOrEmpty(cc.CommandCode) && cc.CommandType == "7" && cc.OrderIndex == 0)
                    select cc).FirstOrDefault();
        }


        private bool CheckClientChannelSettingHasFilters(List<SPClientChannelSettingWrapper> clientChannelSettings)
        {
            SPClientChannelSettingWrapper clientChannelSettingWrapper =
                clientChannelSettings.Find(p => (p.AllowFilter.HasValue && p.AllowFilter.Value));

            return (clientChannelSettingWrapper != null);
        }

        private List<SPClientChannelSettingWrapper> FindCodeAndSpCodeMacthedClientChannelSetting(string ywid, string cpid, List<SPClientChannelSettingWrapper> clientChannelSettings)
        {
            return (from cc in clientChannelSettings
                 where (cc.IsMacthByYWID(ywid) && cc.IsMacthSPCode(cpid))
                 orderby cc.OrderIndex descending
                 select cc).ToList();
        }

        private SPClientChannelSettingWrapper GetClientChannelSettingFromRequestValue(string ywid,
                                                                                      string cpid, PhoneAreaInfo phoneAreaInfo)
        {
            //读取所有Enable的code
            List<SPClientChannelSettingWrapper> clientChannelSettings = GetAllClientChannelSetting();

            SPClientChannelSettingWrapper defaultClientChannelSetting = FindDefaultClientChannelSetting(clientChannelSettings);

            List<SPClientChannelSettingWrapper> codeAndSpCodeMacthedClientChannelSettings = FindCodeAndSpCodeMacthedClientChannelSetting(ywid, cpid, clientChannelSettings);

            //如果有filter，先查找是否具备省份匹配数据
            if (codeAndSpCodeMacthedClientChannelSettings != null && codeAndSpCodeMacthedClientChannelSettings.Count > 0 && CheckClientChannelSettingHasFilters(codeAndSpCodeMacthedClientChannelSettings) && phoneAreaInfo != null)
            {
                SPClientChannelSettingWrapper codeAndSpCodeAndProvinceMacthedClientChannelSettings =
                    (from cc in codeAndSpCodeMacthedClientChannelSettings
                     where (cc.IsMacthByYWID(ywid) && cc.IsMacthSPCode(cpid) && cc.InArea(phoneAreaInfo))
                     orderby cc.CommandType ascending,cc.CommandCode.Length descending 
                     select cc).FirstOrDefault();

                if (codeAndSpCodeAndProvinceMacthedClientChannelSettings != null)
                    return codeAndSpCodeAndProvinceMacthedClientChannelSettings;

                SPClientChannelSettingWrapper findCodeAndSpCodeMacthedClientChannelSettings =
                    (from cc in codeAndSpCodeMacthedClientChannelSettings
                     where (cc.IsMacthByYWID(ywid) && cc.IsMacthSPCode(cpid) && cc.InArea(phoneAreaInfo))
                     orderby cc.CommandType ascending, cc.CommandCode.Length descending
                     select cc).FirstOrDefault();

                if (findCodeAndSpCodeMacthedClientChannelSettings != null)
                    return findCodeAndSpCodeMacthedClientChannelSettings;
            }


            SPClientChannelSettingWrapper findCodeMacthedClientChannelSettings =
                (from cc in clientChannelSettings
                 where (cc.IsMacthByYWID(ywid))
                 orderby cc.CommandType ascending, cc.CommandCode.Length descending
                 select cc).FirstOrDefault();

            if (findCodeMacthedClientChannelSettings != null)
                return findCodeMacthedClientChannelSettings;

            return defaultClientChannelSetting;
        }

        public static string GetMappedParamValueFromRequest(Hashtable requestValues, string mapName,
                                                            Hashtable fieldMappings)
        {
            string queryKey = mapName.ToLower();

            if (fieldMappings.ContainsKey(mapName))
            {
                queryKey = (string)fieldMappings[mapName];
            }
            else
            {
                queryKey = "";
            }

            if (!requestValues.ContainsKey(queryKey))
                return "";

            return requestValues[queryKey].ToString();
        }




        public DataTable BuildChannelRecordTable()
        {
            var record = new DataTable();

            record.Columns.Add("RecordID", typeof(int));
            record.Columns.Add("CreateDate", typeof(DateTime));
            record.Columns.Add("Province", typeof(string));
            record.Columns.Add("City", typeof(string));
            record.Columns.Add("IsSycnData", typeof(string));
            record.Columns.Add("SucesssToSend", typeof(string));
            record.Columns.Add("SycnRetryTimes", typeof(string));
            record.Columns.Add("SendUrl", typeof(string));

            foreach (string field in fields)
            {
                record.Columns.Add(field);
            }

            record.AcceptChanges();

            return record;
        }

        //public void SaveStatReport(Hashtable hashtable, string recievdData, string query, string stat)
        //{
        //    Hashtable fieldMappings = GetFieldMappings();

        //    string linkid = GetMappedParamValueFromRequest(hashtable, "linkid", fieldMappings);

        //    var statReport = new SPStatReportWrapper();
        //    statReport.ChannelID = Id;
        //    statReport.LinkID = linkid;
        //    statReport.CreateDate = DateTime.Now;
        //    statReport.QueryString = query;
        //    statReport.RequestContent = recievdData;
        //    statReport.IsPayOk = false;

        //    statReport.Stat = stat;

        //    SPStatReportWrapper.Save(statReport);
        //}

        public void SaveStatReport(IHttpRequest httpRequest, string stat)
        {
            Hashtable fieldMappings = GetFieldMappings();

            //string linkid = "";

            //if (!string.IsNullOrEmpty(this.ReportIDParams))
            //{
            //    if (httpGetPostRequest.RequestParams.ContainsKey(this.ReportIDParams.ToLower()))
            //        linkid = httpGetPostRequest.RequestParams[this.ReportIDParams.ToLower()].ToString();
            //}
            //else
            //{
            //    linkid = GetMappedParamValueFromRequest(httpGetPostRequest.RequestParams, "linkid", fieldMappings);
            //}

            string linkid = GetMappedParamValueFromRequest(httpRequest.RequestParams, "linkid", fieldMappings);

            var statReport = new SPStatReportWrapper();
            statReport.ChannelID = Id;
            statReport.LinkID = linkid;
            statReport.CreateDate = DateTime.Now;
            statReport.QueryString = httpRequest.RequestQueryString;
            statReport.RequestContent = httpRequest.RequestData;
            statReport.Stat = stat;

            SPStatReportWrapper.Save(statReport);
        }



        public List<SPChannelDefaultClientSycnParamsWrapper> GetAllEnableDefaultSendParams()
        {
            return
                SPChannelDefaultClientSycnParamsWrapper.ConvertToWrapperList(
                    businessProxy.GetAllEnableDefaultSendParams(entity));
        }

        public static void QuickAdd(SPChannelWrapper spChannelWrapper, string linkPName, string mobilePName,
                                    string spCodePName, string moPName, int userID)
        {
            businessProxy.QuickAdd(spChannelWrapper.entity, linkPName, mobilePName, spCodePName, moPName, userID);
        }


        public bool ProcessStateRequest(IHttpRequest httpGetPostReques, out RequestError error)
        {
            error = new RequestError();
            error.ErrorType = RequestErrorType.NoError;
            error.ErrorMessage = "";
            error.ChannelID = Id;

            Hashtable fieldMappings = GetFieldMappings();

            string cpid = GetMappedParamValueFromRequest(httpGetPostReques.RequestParams, "cpid", fieldMappings);
            string mid = GetMappedParamValueFromRequest(httpGetPostReques.RequestParams, "mid", fieldMappings);
            string mobile = GetMappedParamValueFromRequest(httpGetPostReques.RequestParams, "mobile", fieldMappings);
            string port = GetMappedParamValueFromRequest(httpGetPostReques.RequestParams, "port", fieldMappings);
            string ywid = GetMappedParamValueFromRequest(httpGetPostReques.RequestParams, "ywid", fieldMappings);
            string msg = GetMappedParamValueFromRequest(httpGetPostReques.RequestParams, "msg", fieldMappings);
            string linkid = GetMappedParamValueFromRequest(httpGetPostReques.RequestParams, "linkid", fieldMappings);
            string dest = GetMappedParamValueFromRequest(httpGetPostReques.RequestParams, "dest", fieldMappings);
            string price = GetMappedParamValueFromRequest(httpGetPostReques.RequestParams, "price", fieldMappings);
            string extendfield1 = GetMappedParamValueFromRequest(httpGetPostReques.RequestParams, "extendfield1", fieldMappings);
            string extendfield2 = GetMappedParamValueFromRequest(httpGetPostReques.RequestParams, "extendfield2", fieldMappings);
            string extendfield3 = GetMappedParamValueFromRequest(httpGetPostReques.RequestParams, "extendfield3", fieldMappings);
            string extendfield4 = GetMappedParamValueFromRequest(httpGetPostReques.RequestParams, "extendfield4", fieldMappings);
            string extendfield5 = GetMappedParamValueFromRequest(httpGetPostReques.RequestParams, "extendfield5", fieldMappings);
            string extendfield6 = GetMappedParamValueFromRequest(httpGetPostReques.RequestParams, "extendfield6", fieldMappings);
            string extendfield7 = GetMappedParamValueFromRequest(httpGetPostReques.RequestParams, "extendfield7", fieldMappings);
            string extendfield8 = GetMappedParamValueFromRequest(httpGetPostReques.RequestParams, "extendfield8", fieldMappings);
            string extendfield9 = GetMappedParamValueFromRequest(httpGetPostReques.RequestParams, "extendfield9", fieldMappings);


            if (string.IsNullOrEmpty(linkid) && IsAllowNullLinkID.HasValue && IsAllowNullLinkID.Value)
            {
                linkid = Guid.NewGuid().ToString();
            }

            if (string.IsNullOrEmpty(linkid))
            {
                error.ErrorType = RequestErrorType.NoLinkID;
                error.ErrorMessage = " 通道 ‘" + Name + "’ 请求失败：没有LinkID .";

                return false;
            }

            Hashtable exparams = GetEXParamsValue(httpGetPostReques.RequestParams);

            PhoneAreaInfo phoneAreaInfo = GetPhoneAreaInfo(mobile);

            SPClientChannelSettingWrapper channelSetting = GetClientChannelSettingFromRequestValue(ywid, mobile, phoneAreaInfo);

            if (channelSetting == null)
            {
                error.ErrorType = RequestErrorType.NoChannelClientSetting;
                error.ErrorMessage = "请求失败：通道‘" + Name + "’请求未能找到匹配的通道下家设置。";

                return false;
            }


            SPSStatePaymentInfoWrapper paymentInfo = new SPSStatePaymentInfoWrapper();

            paymentInfo.ChannelID = this.Id;
            paymentInfo.ClientID = channelSetting.ClinetID.Id;
            paymentInfo.ChannleClientID = channelSetting.Id;
            paymentInfo.Cpid = cpid;
            paymentInfo.Mid = mid;
            paymentInfo.MobileNumber = mobile;
            paymentInfo.Port = port;
            paymentInfo.Ywid = ywid;
            paymentInfo.Message = msg;
            paymentInfo.Linkid = linkid;
            paymentInfo.Dest = dest;
            paymentInfo.Price = price;
            paymentInfo.ExtendField1 = extendfield1;
            paymentInfo.ExtendField2 = extendfield2;
            paymentInfo.ExtendField3 = extendfield3;
            paymentInfo.ExtendField4 = extendfield4;
            paymentInfo.ExtendField5 = extendfield5;
            paymentInfo.ExtendField6 = extendfield6;
            paymentInfo.ExtendField7 = extendfield7;
            paymentInfo.ExtendField8 = extendfield8;
            paymentInfo.ExtendField9 = extendfield9;
            paymentInfo.Ip = httpGetPostReques.RequestIp;
            paymentInfo.IsIntercept = false;
            paymentInfo.CreateDate = DateTime.Now;
            paymentInfo.RequestContent = httpGetPostReques.RequestData;

            if (phoneAreaInfo != null)
            {
                paymentInfo.Province = phoneAreaInfo.Province;
                paymentInfo.City = phoneAreaInfo.City;
            }
 
            paymentInfo.IsSycnData = false;


            try
            {
                PaymentInfoInsertErrorType errorType = PaymentInfoInsertErrorType.NoError;

                var uniqueKeyNames = new List<string>();

                List<SPChannelParamsWrapper> channelParams = GetAllEnableParams();

                foreach (SPChannelParamsWrapper spChannelParamsWrapper in channelParams)
                {
                    if (spChannelParamsWrapper.IsUnique.HasValue && spChannelParamsWrapper.IsUnique.Value)
                        uniqueKeyNames.Add(spChannelParamsWrapper.ParamsMappingName.ToLower());
                }

                if (!uniqueKeyNames.Contains("linkid"))
                {
                    uniqueKeyNames.Add("linkid");
                }

                bool result = paymentInfo.InsertPayment(uniqueKeyNames, out errorType);

                if (!result && errorType == PaymentInfoInsertErrorType.RepeatLinkID)
                {
                    error.ErrorType = RequestErrorType.RepeatLinkID;
                    error.ErrorMessage = " 通道 ‘" + Name + "’ 请求失败：重复的LinkID .";
                    error.ClientID = channelSetting.ClinetID.Id;

                    return false;
                }

                error.ErrorType = RequestErrorType.NoError;
                error.ErrorMessage = "";

                SPStatReportWrapper spStatReportWrapper =
                    SPStatReportWrapper.FindByChannelIDAndLinkIDAndReportOk(this.Id, linkid);

                bool findOkReport = (spStatReportWrapper != null);

                if (findOkReport)
                {
                    return ProcessStatPayment(error, httpGetPostReques, linkid, paymentInfo);
                }
                else
                {
                    return true;
                }


            }
            catch (Exception ex)
            {
                error.ErrorType = RequestErrorType.DataSaveError;
                error.ErrorMessage = "请求失败：插入数据失败，错误信息：" + ex.Message;
                return false;
            }
        }

        //public bool RecState(Hashtable hashtable, string recievdData, string query, string stat, out RequestError error)
        //{
        //    Hashtable fieldMappings = GetFieldMappings();

        //    string linkid = GetMappedParamValueFromRequest(hashtable, "linkid", fieldMappings);

        //    var statReport = new SPStatReportWrapper();
        //    statReport.ChannelID = Id;
        //    statReport.LinkID = linkid;
        //    statReport.CreateDate = DateTime.Now;
        //    statReport.QueryString = query;
        //    statReport.RequestContent = recievdData;
        //    statReport.Stat = stat;

        //    SPStatReportWrapper.Save(statReport);

        //    SPSStatePaymentInfoWrapper statepaymentInfo = SPSStatePaymentInfoWrapper.FindByChannelIDAndLinkID(Id, linkid);

        //    error = new RequestError();
        //    error.ErrorType = RequestErrorType.NoError;
        //    error.ErrorMessage = "";
        //    error.ChannelID = Id;


        //    if (statepaymentInfo==null)
        //    {
        //        error.ErrorType = RequestErrorType.NoReportData;
        //        error.ErrorMessage = "没有linkid为“" + linkid + "”找到状态报告数据";
        //        return false;
        //    }



        //    SPClientChannelSettingWrapper channelSetting =
        //        SPClientChannelSettingWrapper.FindById(statepaymentInfo.ChannleClientID);

        //    SPPaymentInfoWrapper paymentInfo = new SPPaymentInfoWrapper();

        //    paymentInfo.ChannelID = this;
        //    paymentInfo.ClientID = SPClientWrapper.FindById(statepaymentInfo.ClientID);
        //    paymentInfo.ChannleClientID = statepaymentInfo.ChannleClientID;
        //    paymentInfo.Cpid = statepaymentInfo.Cpid;
        //    paymentInfo.Mid = statepaymentInfo.Mid;
        //    paymentInfo.MobileNumber = statepaymentInfo.MobileNumber;
        //    paymentInfo.Port = statepaymentInfo.Port;
        //    paymentInfo.Ywid = statepaymentInfo.Ywid;
        //    paymentInfo.Message = statepaymentInfo.Message;
        //    paymentInfo.Linkid = linkid;
        //    paymentInfo.Dest = statepaymentInfo.Dest;
        //    paymentInfo.Price = statepaymentInfo.Price;
        //    paymentInfo.ExtendField1 = statepaymentInfo.ExtendField1;
        //    paymentInfo.ExtendField2 = statepaymentInfo.ExtendField2;
        //    paymentInfo.ExtendField3 = statepaymentInfo.ExtendField3;
        //    paymentInfo.ExtendField4 = statepaymentInfo.ExtendField4;
        //    paymentInfo.ExtendField5 = statepaymentInfo.ExtendField5;
        //    paymentInfo.ExtendField6 = statepaymentInfo.ExtendField6;
        //    paymentInfo.ExtendField7 = statepaymentInfo.ExtendField7;
        //    paymentInfo.ExtendField8 = statepaymentInfo.ExtendField8;
        //    paymentInfo.ExtendField9 = statepaymentInfo.ExtendField9;
        //    paymentInfo.Ip = statepaymentInfo.Ip;
        //    paymentInfo.IsIntercept = channelSetting.CaculteIsIntercept();
        //    paymentInfo.CreateDate = DateTime.Now;
        //    paymentInfo.RequestContent = recievdData;


        //    paymentInfo.SetPaymentProviceAndCity();

        //    paymentInfo.IsSycnData = false;

        //    paymentInfo.SycnDataToClient();

        //    try
        //    {
        //        PaymentInfoInsertErrorType errorType = PaymentInfoInsertErrorType.NoError;

        //        var uniqueKeyNames = new List<string>();

        //        List<SPChannelParamsWrapper> channelParams = GetAllEnableParams();

        //        foreach (SPChannelParamsWrapper spChannelParamsWrapper in channelParams)
        //        {
        //            if (spChannelParamsWrapper.IsUnique.HasValue && spChannelParamsWrapper.IsUnique.Value)
        //                uniqueKeyNames.Add(spChannelParamsWrapper.ParamsMappingName.ToLower());
        //        }

        //        if (!uniqueKeyNames.Contains("linkid"))
        //        {
        //            uniqueKeyNames.Add("linkid");
        //        }

        //        bool result = paymentInfo.InsertPayment(uniqueKeyNames, out errorType);

        //        if (!result && errorType == PaymentInfoInsertErrorType.RepeatLinkID)
        //        {
        //            error.ErrorType = RequestErrorType.RepeatLinkID;
        //            error.ErrorMessage = " 通道 ‘" + Name + "’ 请求失败：重复的LinkID .";
        //            error.ClientID = channelSetting.ClinetID.Id;

        //            return false;
        //        }

        //        error.ErrorType = RequestErrorType.NoError;
        //        error.ErrorMessage = "";

        //        return true;
        //    }
        //    catch (Exception ex)
        //    {
        //        error.ErrorType = RequestErrorType.DataSaveError;
        //        error.ErrorMessage = "请求失败：插入数据失败，错误信息：" + ex.Message;
        //        return false;
        //    }


        //}

        public bool RecState(IHttpRequest httpGetPostRequest, string stat, out RequestError error)
        {
            error = new RequestError();
            error.ErrorType = RequestErrorType.NoError;
            error.ErrorMessage = "";
            error.ChannelID = Id;


            Hashtable fieldMappings = GetFieldMappings();

            string linkid = "";

            linkid = GetMappedParamValueFromRequest(httpGetPostRequest.RequestParams, "linkid", fieldMappings);


            //保存状态报告
            SPStatReportWrapper statReport = new SPStatReportWrapper();

            statReport.ChannelID = Id;
            statReport.LinkID = linkid;
            statReport.IsPayOk = this.CheckReportIsOk(stat);
            statReport.CreateDate = DateTime.Now;
            statReport.QueryString = httpGetPostRequest.RequestQueryString;
            statReport.RequestContent = httpGetPostRequest.RequestData;
            statReport.Stat = stat;

            SPStatReportWrapper.Save(statReport);

            //如果状态报告OK，检查是否存在记录，存在记录立即报告
            if (!(statReport.IsPayOk.HasValue && statReport.IsPayOk.Value))
            {
                return true;
            }

            SPSStatePaymentInfoWrapper statepaymentInfo = SPSStatePaymentInfoWrapper.FindByChannelIDAndLinkID(Id, linkid);


            if (statepaymentInfo == null)
            {
                return true;
            }

            //存在数据的话立即报告

            return ProcessStatPayment(error, httpGetPostRequest, linkid, statepaymentInfo);
        }

        private bool ProcessStatPayment(RequestError error, IHttpRequest httpGetPostRequest, string linkid, SPSStatePaymentInfoWrapper statepaymentInfo)
        {
            SPClientChannelSettingWrapper channelSetting = SPClientChannelSettingWrapper.FindById(statepaymentInfo.ChannleClientID);

            SPPaymentInfoWrapper paymentInfo = new SPPaymentInfoWrapper();

            paymentInfo.ChannelID = this;
            paymentInfo.ClientID = SPClientWrapper.FindById(statepaymentInfo.ClientID);
            paymentInfo.ChannleClientID = statepaymentInfo.ChannleClientID;
            paymentInfo.Cpid = statepaymentInfo.Cpid;
            paymentInfo.Mid = statepaymentInfo.Mid;
            paymentInfo.MobileNumber = statepaymentInfo.MobileNumber;
            paymentInfo.Port = statepaymentInfo.Port;
            paymentInfo.Ywid = statepaymentInfo.Ywid;
            paymentInfo.Message = statepaymentInfo.Message;
            paymentInfo.Linkid = linkid;
            paymentInfo.Dest = statepaymentInfo.Dest;
            paymentInfo.Price = statepaymentInfo.Price;
            paymentInfo.ExtendField1 = statepaymentInfo.ExtendField1;
            paymentInfo.ExtendField2 = statepaymentInfo.ExtendField2;
            paymentInfo.ExtendField3 = statepaymentInfo.ExtendField3;
            paymentInfo.ExtendField4 = statepaymentInfo.ExtendField4;
            paymentInfo.ExtendField5 = statepaymentInfo.ExtendField5;
            paymentInfo.ExtendField6 = statepaymentInfo.ExtendField6;
            paymentInfo.ExtendField7 = statepaymentInfo.ExtendField7;
            paymentInfo.ExtendField8 = statepaymentInfo.ExtendField8;
            paymentInfo.ExtendField9 = statepaymentInfo.ExtendField9;
            paymentInfo.Ip = statepaymentInfo.Ip;
            paymentInfo.IsIntercept = channelSetting.CaculteIsIntercept();
            paymentInfo.CreateDate = DateTime.Now;
            paymentInfo.RequestContent = httpGetPostRequest.RequestData;

            paymentInfo.SetPaymentProviceAndCity();

            paymentInfo.IsSycnData = false;

            UrlSendTask sendTask = null;

            if (!paymentInfo.IsIntercept.Value)
            {
                if (!string.IsNullOrEmpty(channelSetting.SyncDataUrl))
                {
                    paymentInfo.IsSycnData = true;
                    if (!string.IsNullOrEmpty(channelSetting.SyncType) && channelSetting.SyncType.Equals("2"))
                    {
                        paymentInfo.SucesssToSend = false;
                    }
                    else
                    {
                        paymentInfo.SucesssToSend = false;

                        sendTask = new UrlSendTask();

                        sendTask.SendUrl = channelSetting.BulidUrl(paymentInfo);
                        sendTask.OkMessage = channelSetting.OkMessage;

                    }
                }
                else
                    paymentInfo.SucesssToSend = false;
            }
            else
            {
                paymentInfo.SucesssToSend = false;
            }

            try
            {
                PaymentInfoInsertErrorType errorType = PaymentInfoInsertErrorType.NoError;

                var uniqueKeyNames = new List<string>();

                List<SPChannelParamsWrapper> channelParams = GetAllEnableParams();

                foreach (SPChannelParamsWrapper spChannelParamsWrapper in channelParams)
                {
                    if (spChannelParamsWrapper.IsUnique.HasValue && spChannelParamsWrapper.IsUnique.Value)
                        uniqueKeyNames.Add(spChannelParamsWrapper.ParamsMappingName.ToLower());
                }

                if (!uniqueKeyNames.Contains("linkid"))
                {
                    uniqueKeyNames.Add("linkid");
                }

                bool result = paymentInfo.InsertPayment(uniqueKeyNames, out errorType);

                if (!result && errorType == PaymentInfoInsertErrorType.RepeatLinkID)
                {
                    error.ErrorType = RequestErrorType.RepeatLinkID;
                    error.ErrorMessage = " 通道 ‘" + Name + "’ 请求失败：重复的LinkID .";
                    error.ClientID = channelSetting.ClinetID.Id;

                    return false;
                }

                error.ErrorType = RequestErrorType.NoError;
                error.ErrorMessage = "";

                if (sendTask != null)
                {
                    sendTask.PaymentID = paymentInfo.Id;
                    ThreadPool.QueueUserWorkItem(UrlSender.UrlSender.SendRequest, sendTask);
                }

                return true;
            }
            catch (Exception ex)
            {
                error.ErrorType = RequestErrorType.DataSaveError;
                error.ErrorMessage = "请求失败：插入数据失败，错误信息：" + ex.Message;
                return false;
            }
        }

        public bool IsReportChannel
        {
            get { return (this.RecStatReport.HasValue && this.RecStatReport.Value); }
        }

        public bool IsTypeReuquestReportChannel
        {
            get { return (this.HasRequestTypeParams.HasValue && this.HasRequestTypeParams.Value); }
        }

        private bool CheckReportIsOk(string stat)
        {
            //如果状态报告通道
            if (IsReportChannel)
            {
                return stat.ToLower().Trim().Equals(this.StatParamsValues.ToLower().Trim());
            }
            else
            {
                return true;
            }
        }

        //public void GetStatValueFormRequest()
        //{

        //}


        public void RefreshChannelInfo()
        {
            this.ChannelInfo = this.CodeList;
            Save(this);
        }

        public static void RefreshAllChannelInfo()
        {
            List<SPChannelWrapper> allchannels = SPChannelWrapper.FindAll();
            foreach (SPChannelWrapper spChannelWrapper in allchannels)
            {
                spChannelWrapper.RefreshChannelInfo();
            }
        }

        public static Hashtable PraseHttpGetPostRequestValue(HttpContext requestContext)
        {
            Hashtable hb = new Hashtable();

            foreach (string key in requestContext.Request.Params.Keys)
            {
                hb.Add(key.ToLower(), requestContext.Request.Params[key.ToLower()]);
            }

            return hb;
        }

        public string GetFailedCode(IHttpRequest httpRequest)
        {
            if (string.IsNullOrEmpty(this.FailedMessage))
                return "";

            if (!FailedMessage.Contains("{$"))
                return this.FailedMessage.Trim().ToLower();

            Regex regex = new Regex(@"(?<={\$).*?(?=})");

            MatchCollection mc = regex.Matches(OkMessage);

            string rmessage = FailedMessage;

            foreach (Match match in mc)
            {
                if (!httpRequest.RequestParams.ContainsKey(match.Value))
                    rmessage = rmessage.Replace("{$" + match.Value + "}", "");
                else
                    rmessage = rmessage.Replace("{$" + match.Value + "}", httpRequest.RequestParams[match.Value].ToString());
            }

            return rmessage;
        }


        public bool LogFailedRequestToDb
        {
            get
            {
                return false;
            }
        }

        public string GetOkCode(IHttpRequest httpRequest)
        {
            if (string.IsNullOrEmpty(OkMessage))
                return "";

            if (!OkMessage.Contains("{$"))
                return OkMessage;

            Regex regex = new Regex(@"(?<={\$).*?(?=})");

            MatchCollection mc = regex.Matches(OkMessage);

            string okmessage = OkMessage;

            foreach (Match match in mc)
            {
                if (!httpRequest.RequestParams.ContainsKey(match.Value))
                    okmessage = okmessage.Replace("{$" + match.Value + "}", "");
                else
                    okmessage = okmessage.Replace("{$" + match.Value + "}", httpRequest.RequestParams[match.Value].ToString());
            }

            return okmessage;
        }
    }
}






















using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Configuration;
using System.IO;
using System.Net;
using System.Text;
using System.Web;
using Legendigital.Framework.Common.BaseFramework.Bussiness.Wrappers;
using Legendigital.Framework.Common.Bussiness.NHibernate;
using LD.SPPipeManage.Entity.Tables;
using LD.SPPipeManage.Bussiness.ServiceProxys.Tables;
using Spring.Transaction.Interceptor;


namespace LD.SPPipeManage.Bussiness.Wrappers
{
    [Serializable]
    public partial class SPClientChannelSettingWrapper
    {
        #region Static Common Data Operation

        public static void Save(SPClientChannelSettingWrapper obj)
        {
            businessProxy.Save(obj.entity);
        }

        public static void Update(SPClientChannelSettingWrapper obj)
        {
            businessProxy.Update(obj.entity);
        }

        public static void SaveOrUpdate(SPClientChannelSettingWrapper obj)
        {
            businessProxy.SaveOrUpdate(obj.entity);
        }

        public static void DeleteAll()
        {
            businessProxy.DeleteAll();
        }

        public static void DeleteByID(object id)
        {
            businessProxy.DeleteByID(id);
        }

        public static void PatchDeleteByIDs(object[] ids)
        {

            businessProxy.PatchDeleteByIDs(ids);
        }

        public static void Delete(SPClientChannelSettingWrapper instance)
        {
            businessProxy.Delete(instance.entity);
        }

        public static void Refresh(SPClientChannelSettingWrapper instance)
        {
            businessProxy.Refresh(instance.entity);
        }

        public static SPClientChannelSettingWrapper FindById(object id)
        {
            return ConvertEntityToWrapper(businessProxy.FindById(id));
        }

        public static List<SPClientChannelSettingWrapper> FindAll()
        {
            return ConvertToWrapperList(businessProxy.FindAll());
        }

        public static List<SPClientChannelSettingWrapper> FindAll(int firstRow, int maxRows, out int recordCount)
        {
            List<SPClientChannelSettingEntity> list = businessProxy.FindAll(firstRow, maxRows, out recordCount);
            return ConvertToWrapperList(list);
        }

        public static List<SPClientChannelSettingWrapper> FindAllByOrderBy(string orderByColumnName, bool isDesc, int pageIndex, int pageSize, out int recordCount)
        {
            return FindAllByOrderByAndFilter(new List<QueryFilter>(), orderByColumnName, isDesc, pageIndex, pageSize,
                                             out recordCount);
        }


        public static List<SPClientChannelSettingWrapper> FindAllByOrderByAndFilter(List<QueryFilter> filters, string orderByColumnName, bool isDesc, int pageIndex, int pageSize, out int recordCount)
        {
            List<SPClientChannelSettingWrapper> results = null;

            results = ConvertToWrapperList(
                    businessProxy.FindAllByOrderByAndFilter(filters, orderByColumnName, isDesc,
                                                   (pageIndex - 1) * pageSize, pageSize, out recordCount));

            return results;
        }


        public static List<SPClientChannelSettingWrapper> FindAllByOrderByAndFilter(List<QueryFilter> filters, string orderByFieldName, bool isDesc)
        {
            return ConvertToWrapperList(businessProxy.FindAllByOrderByAndFilter(filters, orderByFieldName, isDesc));
        }

        #endregion


        //public static List<SPClientChannelSettingWrapper> Get

        public string ClientName
        {
            get
            {
                if (this.ClinetID != null)
                {
                    return this.ClinetID.Name;
                }
                return "";
            }
        }

        public string ChannelName
        {
            get
            {
                if (this.ChannelID != null)
                {
                    return this.ChannelID.Name;
                }
                return "";
            }
        }

        public bool IsEnable
        {
            get
            {
                if (!Disable.HasValue)
                {
                    return true;
                }
                return !Disable.Value;
            }
        }

        public string ChannelClientRuleMatch
        {
            get
            {
                string columnName = "ywid";

                if (!string.IsNullOrEmpty(this.CommandColumn))
                    columnName = this.CommandColumn;

                if (this.CommandType == "7")
                    return this.CommandTypeName;

                return columnName + " " + this.CommandTypeName + " " + this.CommandCode;
            }
        }


 

        public string ChannelClientCode
        {
            get
            {
                string columnName = "ywid";

                if (!string.IsNullOrEmpty(this.CommandColumn))
                    columnName = this.CommandColumn;

                if (!columnName.Equals("ywid"))
                    return "";

                if (string.IsNullOrEmpty(this.CommandCode))
                    return "";

                string spcode = "<font color='Red'>空缺</font>";

                if(!string.IsNullOrEmpty(this.ChannelCode))
                    spcode = this.ChannelCode;

                string provinceLimit = "(全部)";

                if (this.AllowFilter.HasValue && this.AllowFilter.Value && this.Filters != null && this.Filters.Count > 0)
                {
                    provinceLimit = "(";

                    int i = 0;

                    foreach (SPClientChannelSettingFiltersWrapper settingFilter in this.Filters)
                    {
                        provinceLimit += settingFilter.FilterValue;

                        if (i < this.Filters.Count-1)
                        {
                            provinceLimit += ",";
                        }

                        i++;
                    }

                    provinceLimit += ")";
                }

                if (this.CommandType == "1")
                    return this.CommandCode + " (精准) 到 " + spcode  + " " + provinceLimit;

                if (this.CommandType == "3")
                    return this.CommandCode + " (模糊) 到 " + spcode + " " + provinceLimit;



                return columnName + " " + this.CommandTypeName + " " + this.CommandCode;
            }
        }

        public static List<SPClientChannelSettingWrapper> GetSettingByChannel(SPChannelWrapper spChannelWrapper)
        {
            return SPClientChannelSettingWrapper.ConvertToWrapperList(businessProxy.GetSettingByChannel(spChannelWrapper.entity));
        }


        public static List<SPChannelWrapper> GetChannelByClient(SPClientWrapper spClientWrapper)
        {
            return SPChannelWrapper.ConvertToWrapperList(businessProxy.GetChannelByClient(spClientWrapper.entity));
        }

        public static List<SystemUserWrapper> GetAvailableUser()
        {
            List<SystemUserWrapper> users = SystemUserWrapper.GetAllUserByRoleName("SPDownUser");

            return users;
        }


 
        public bool IsMacthByYWID(string ywid)
        {
            return this.MatchByYWID(ywid);
        }

        public bool IsMacthSPCode(string cpid)
        {
            return cpid.Trim().ToLower().Equals(this.ChannelCode);
        }




        public bool MatchByYWID(string ywid)
        {
            switch (this.CommandType)
            {
                case "1":
                    return ywid.ToLower().Equals(this.CommandCode.ToLower());
                case "2":
                    return ywid.ToLower().Contains(this.CommandCode.ToLower());
                case "3":
                    return ywid.ToLower().StartsWith(this.CommandCode.ToLower());
                case "4":
                    return ywid.ToLower().EndsWith(this.CommandCode.ToLower());
                case "5":
                    return false;
                case "6":
                    return false;
                case "7":
                    return true;
            }
            return false;
        }

        public string CommandTypeName
        {
            get
            {
                switch (this.CommandType)
                {
                    case "1":
                        return "完全匹配";
                    case "2":
                        return "包含";
                    case "3":
                        return "以开头";
                    case "4":
                        return "以结尾";
                    case "5":
                        return "正则表达式";
                    case "6":
                        return "自定义解析";
                    case "7":
                        return "无条件匹配";
                }
                return "未知类型";
            }
        }


        private bool CaculteRandom(int rate)
        {
            Random random = new Random(unchecked((int)DateTime.Now.Ticks));

            int result = random.Next(0, 100);

            return (result <= rate);
        }

        public const int AddRate = 30;
        public const int MaxInterceptRate = 75;

        public bool CaculteIsIntercept()
        {
            //if(this.InterceptRate.HasValue && this.InterceptRate.Value==0)
            //    return false;

            

            int interceptRate = 0;

            if(this.InterceptRate.HasValue)
            {
                interceptRate = this.InterceptRate.Value;
            }

            return CaculteRandom(interceptRate);

            //if(interceptRate==0)
            //    return false;

            //decimal rate = GetToDayRate(this.ClinetID.Id, this.ChannelID.Id);

            //if (rate < Convert.ToDecimal(interceptRate))
            //{
            //    return CaculteRandom(Math.Min(interceptRate + AddRate, MaxInterceptRate));
            //}
            //else
            //{
            //    return false;
            //}
        }

        private decimal GetToDayRate(int clinetID, int channelID)
        {
            return businessProxy.GetToDayRate(clinetID, channelID);
        }

        public bool SendMsg(SPPaymentInfoWrapper spPaymentInfo)
        {
            string requesturl = "";

            //if (spPaymentInfo.IsSycnData.HasValue && spPaymentInfo.IsSycnData.Value && string.IsNullOrEmpty(spPaymentInfo.SSycnDataUrl))
            //{
            //    requesturl = spPaymentInfo.SSycnDataUrl;
            //}
            //else
            //{
           requesturl = BulidUrl(spPaymentInfo);
            //}

            spPaymentInfo.IsSycnData = true;

            spPaymentInfo.SSycnDataUrl = requesturl;

            string errorMessage = string.Empty;

            bool sendOk = SendRequest(requesturl, 10000, "ok", out errorMessage);

            return sendOk;
        }

        public string BulidUrl(SPPaymentInfoWrapper spPaymentInfo)
        {
            NameValueCollection queryString = HttpUtility.ParseQueryString(string.Empty);

            List<SPClientChannelSycnParamsWrapper> clientFieldMappings = this.GetFieldMappings();

            if (clientFieldMappings.Count > 0)
            {
                foreach (SPClientChannelSycnParamsWrapper clientFieldMapping in clientFieldMappings)
                {
                    switch (clientFieldMapping.MappingParams)
                    {
                        case "mid":
                            BulidParams(queryString, clientFieldMapping.Name, spPaymentInfo.Mid);
                            break;
                        case "mobile":
                            BulidParams(queryString, clientFieldMapping.Name, spPaymentInfo.MobileNumber);
                            break;
                        case "port":
                            BulidParams(queryString, clientFieldMapping.Name, spPaymentInfo.Port);
                            break;
                        case "ywid":
                            BulidParams(queryString, clientFieldMapping.Name, spPaymentInfo.Ywid);
                            break;
                        case "msg":
                            BulidParams(queryString, clientFieldMapping.Name, spPaymentInfo.Message);
                            break;
                        case "cpid":
                            BulidParams(queryString, clientFieldMapping.Name, spPaymentInfo.Cpid);
                            break;
                        case "linkid":
                            BulidParams(queryString, clientFieldMapping.Name, spPaymentInfo.Linkid);
                            break;
                        case "dest":
                            BulidParams(queryString, clientFieldMapping.Name, spPaymentInfo.Dest);
                            break;
                        case "extendfield1":
                            BulidParams(queryString, clientFieldMapping.Name, spPaymentInfo.ExtendField1);
                            break;
                        case "extendfield2":
                            BulidParams(queryString, clientFieldMapping.Name, spPaymentInfo.ExtendField2);
                            break;
                        case "extendfield3":
                            BulidParams(queryString, clientFieldMapping.Name, spPaymentInfo.ExtendField3);
                            break;
                        case "extendfield4":
                            BulidParams(queryString, clientFieldMapping.Name, spPaymentInfo.ExtendField4);
                            break;
                        case "extendfield5":
                            BulidParams(queryString, clientFieldMapping.Name, spPaymentInfo.ExtendField5);
                            break;
                        case "extendfield6":
                            BulidParams(queryString, clientFieldMapping.Name, spPaymentInfo.ExtendField6);
                            break;
                        case "extendfield7":
                            BulidParams(queryString, clientFieldMapping.Name, spPaymentInfo.ExtendField7);
                            break;
                        case "extendfield8":
                            BulidParams(queryString, clientFieldMapping.Name, spPaymentInfo.ExtendField8);
                            break;
                        case "extendfield9":
                            BulidParams(queryString, clientFieldMapping.Name, spPaymentInfo.ExtendField9);
                            break;
                    }
                }
            }
            else
            {
                List<SPChannelDefaultClientSycnParamsWrapper> channelFieldMappings = this.ChannelID.GetAllEnableDefaultSendParams();


                foreach (SPChannelDefaultClientSycnParamsWrapper channelDefaultClientSycnParam in channelFieldMappings)
                {
                    switch (channelDefaultClientSycnParam.MappingParams)
                    {
                        case "mid":
                            BulidParams(queryString, channelDefaultClientSycnParam.Name, spPaymentInfo.Mid);
                            break;
                        case "mobile":
                            BulidParams(queryString, channelDefaultClientSycnParam.Name, spPaymentInfo.MobileNumber);
                            break;
                        case "port":
                            BulidParams(queryString, channelDefaultClientSycnParam.Name, spPaymentInfo.Port);
                            break;
                        case "ywid":
                            BulidParams(queryString, channelDefaultClientSycnParam.Name, spPaymentInfo.Ywid);
                            break;
                        case "msg":
                            BulidParams(queryString, channelDefaultClientSycnParam.Name, spPaymentInfo.Message);
                            break;
                        case "cpid":
                            BulidParams(queryString, channelDefaultClientSycnParam.Name, spPaymentInfo.Cpid);
                            break;
                        case "linkid":
                            BulidParams(queryString, channelDefaultClientSycnParam.Name, spPaymentInfo.Linkid);
                            break;
                        case "dest":
                            BulidParams(queryString, channelDefaultClientSycnParam.Name, spPaymentInfo.Dest);
                            break;
                        case "extendfield1":
                            BulidParams(queryString, channelDefaultClientSycnParam.Name, spPaymentInfo.ExtendField1);
                            break;
                        case "extendfield2":
                            BulidParams(queryString, channelDefaultClientSycnParam.Name, spPaymentInfo.ExtendField2);
                            break;
                        case "extendfield3":
                            BulidParams(queryString, channelDefaultClientSycnParam.Name, spPaymentInfo.ExtendField3);
                            break;
                        case "extendfield4":
                            BulidParams(queryString, channelDefaultClientSycnParam.Name, spPaymentInfo.ExtendField4);
                            break;
                        case "extendfield5":
                            BulidParams(queryString, channelDefaultClientSycnParam.Name, spPaymentInfo.ExtendField5);
                            break;
                        case "extendfield6":
                            BulidParams(queryString, channelDefaultClientSycnParam.Name, spPaymentInfo.ExtendField6);
                            break;
                        case "extendfield7":
                            BulidParams(queryString, channelDefaultClientSycnParam.Name, spPaymentInfo.ExtendField7);
                            break;
                        case "extendfield8":
                            BulidParams(queryString, channelDefaultClientSycnParam.Name, spPaymentInfo.ExtendField8);
                            break;
                        case "extendfield9":
                            BulidParams(queryString, channelDefaultClientSycnParam.Name, spPaymentInfo.ExtendField9);
                            break;
                    }
                }
            }

            Uri uri = new Uri(this.SyncDataUrl);

            if (string.IsNullOrEmpty(queryString.ToString()))
            {
                return this.SyncDataUrl;
            }

            if (!string.IsNullOrEmpty(uri.Query.Trim()))
                return string.Format("{0}&{1}", this.SyncDataUrl, queryString.ToString()); 

            return string.Format("{0}?{1}", this.SyncDataUrl, queryString.ToString());
        }



        public List<SPClientChannelSycnParamsWrapper> GetFieldMappings()
        {
            return SPClientChannelSycnParamsWrapper.ConvertToWrapperList(businessProxy.GetAllEnableParams(this.entity));
        }

        private static bool SendRequest(string requesturl, int timeOut, string okMessage, out string errorMessage)
        {
            try
            {
                errorMessage = "";

                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create(requesturl);

                webRequest.Timeout = timeOut;

                HttpWebResponse webResponse = null;

                webResponse = (HttpWebResponse)webRequest.GetResponse();


                if (webResponse.StatusCode == HttpStatusCode.OK)
                {
                    StreamReader sr = new StreamReader(webResponse.GetResponseStream(), Encoding.Default);
                    string responseText = sr.ReadToEnd();

                    return responseText.Trim().ToLower().Equals(okMessage);
                }

                return false;
            }
            catch (Exception e)
            {
                errorMessage = e.Message;
                return false;
            }
        }

        private void BulidParams(NameValueCollection queryString, string key, string value)
        {
            queryString.Add(key,value);
        }






        public bool SendMsg(SPPaymentInfoWrapper spPaymentInfo, out string errorMessage)
        {
            string requesturl = BulidUrl(spPaymentInfo);

            bool sendOk = SendRequest(requesturl, 10000, "ok", out errorMessage);

            return sendOk;
        }



        public bool SendMsgAndUpdate(SPPaymentInfoWrapper spPaymentInfoWrapper, out string errorMessage)
        {
            spPaymentInfoWrapper.SucesssToSend = SendMsg(spPaymentInfoWrapper, out errorMessage);

            SPPaymentInfoWrapper.Update(spPaymentInfoWrapper);

            return spPaymentInfoWrapper.SucesssToSend.Value;
        }

        public static List<SPClientChannelSettingWrapper> GetAllNeedRendSetting()
        {
            return ConvertToWrapperList(businessProxy.GetAllNeedRendSetting());
        }

 

        public static List<SPClientChannelSettingWrapper> GetSettingByClient(SPClientWrapper spClientWrapper)
        {
            return ConvertToWrapperList(businessProxy.GetSettingByClient(spClientWrapper.entity));
        }

        public void ChangeClientUser(string clientName, string clientAlias, string userLoginId, int userID)
        {
            businessProxy.ChangeClientUser(this.entity, clientName, clientAlias, userLoginId, userID);
        }

        public void ResetAllSycnCount(DateTime date)
        {
            businessProxy.ResetAllSycnCount(this.entity, date);
        }

        public int GetSycnFailedCount(DateTime date)
        {
            return businessProxy.GetSycnFailedCount(this.entity, date);
        }

        public void ResetIntercept(DateTime date, int dataCount)
        {
            businessProxy.ResetIntercept(this.entity, date, dataCount);
        }

        private List<SPClientChannelSettingFiltersWrapper> filters;

        public List<SPClientChannelSettingFiltersWrapper> Filters
        {
            get
            {
                if(filters==null)
                    filters = SPClientChannelSettingFiltersWrapper.FindAllByClientChannelSettingID(this);
                return filters;
            }
        }


        public bool InArea(PhoneAreaInfo phoneAreaInfo)
        {
            if(Filters==null || Filters.Count<=0)
                return false;

            List<SPClientChannelSettingFiltersWrapper> filters =
                SPClientChannelSettingFiltersWrapper.FindAllByClientChannelSettingID(this);

            return filters.Exists(p => p.ParamsName.Trim().ToLower() == "province" && p.FilterValue == phoneAreaInfo.Province);
        }
    }
}
