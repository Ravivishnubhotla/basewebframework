// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;


namespace Legendigital.Framework.Common.BaseFramework.Entity.Tables
{
	/// <summary>
	///	
	/// </summary>
	
	public partial class SystemConfigEntity : ICloneable
	{
        #region 公共常量

		public static readonly string CLASS_FULL_NAME = "Legendigital.Framework.Common.BaseFramework.Entity.Tables.SystemConfigEntity";
		public static readonly string PROPERTY_NAME_SYSTEMCONFIGID = "SystemConfigID";
		public static readonly string PROPERTY_NAME_CONFIGKEY = "ConfigKey";
		public static readonly string PROPERTY_NAME_CONFIGVALUE = "ConfigValue";
		public static readonly string PROPERTY_NAME_CONFIGDESCRIPTION = "ConfigDescription";
		public static readonly string PROPERTY_NAME_SORTINDEX = "SortIndex";
		
        #endregion
	
        #region 私有成员变量

		private bool _isChanged;		
		private bool _isDeleted;
		
		private int _systemConfigID;
		private string _configKey;
		private string _configValue;
		private string _configDescription;
		private int? _sortIndex;
		
		#endregion

		#region 构造函数
		/// <summary>
		/// 默认构造函数
		/// </summary>
		public SystemConfigEntity()
		{
			_systemConfigID = 0;
			_configKey = String.Empty;
			_configValue = String.Empty;
			_configDescription = null;
			_sortIndex = null;
		}
		#endregion

		#region 全构造函数
		/// <summary>
		/// 全构造函数
		/// </summary>
		public SystemConfigEntity( int systemConfigID, string configKey, string configValue, string configDescription, int? sortIndex)
		{
			_systemConfigID = systemConfigID;
			_configKey = configKey;
			_configValue = configValue;
			_configDescription = configDescription;
			_sortIndex = sortIndex;
		}
		#endregion     
	
	    #region 公共属性

		/// <summary>
		/// 
		/// </summary>
		
		public virtual int SystemConfigID
		{
			get { return _systemConfigID; }

			set	
			{
				_isChanged |= (_systemConfigID != value); _systemConfigID = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		
		public virtual string ConfigKey
		{
			get { return _configKey; }

			set	
			{

				if( value != null && value.Length > 400)
					throw new ArgumentOutOfRangeException("Invalid value for ConfigKey", value, value.ToString());
				_isChanged |= (_configKey != value); _configKey = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		
		public virtual string ConfigValue
		{
			get { return _configValue; }

			set	
			{

				if( value != null && value.Length > 400)
					throw new ArgumentOutOfRangeException("Invalid value for ConfigValue", value, value.ToString());
				_isChanged |= (_configValue != value); _configValue = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		
		public virtual string ConfigDescription
		{
			get { return _configDescription; }

			set	
			{

				if( value != null && value.Length > 4000)
					throw new ArgumentOutOfRangeException("Invalid value for ConfigDescription", value, value.ToString());
				_isChanged |= (_configDescription != value); _configDescription = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		
		public virtual int? SortIndex
		{
			get { return _sortIndex; }

			set	
			{
				_isChanged |= (_sortIndex != value); _sortIndex = value;
			}
		}
		/// <summary>
		/// 返回对象是否被改变。
		/// </summary>
		public virtual bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public virtual bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 

        #region 公共方法
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public virtual void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion

		#region Equals 和 HashCode 方法覆盖
		/// <summary>
		/// local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals( object obj )
		{
			if( this == obj ) return true;
			
			if( ( obj == null ) || ( obj.GetType() != this.GetType() ) ) return false;
			
			SystemConfigEntity castObj = (SystemConfigEntity)obj;
			
			return ( castObj != null ) && ( this._systemConfigID == castObj.SystemConfigID );
		}
		
		/// <summary>
		/// local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			
			int hash = 57; 
			hash = 27 * hash * _systemConfigID.GetHashCode();

			return hash; 
		}
		#endregion
	
		#region ICloneable methods
		
		public virtual object Clone()
		{
			return this.MemberwiseClone();
		}
		
		#endregion
	
	}
}
