// Generated by MyGeneration Version # (1.3.0.9)
using System;
using System.Collections.Generic;
using System.Text;
using Legendigital.Framework.Common.Data.NHibernate.Extend;
using NHibernate;
using NHibernate.Criterion;
using Legendigital.Framework.Common.Data.NHibernate.DynamicQuery;
using Legendigital.Framework.Common.BaseFramework.Entity.Tables;
using Legendigital.Framework.Common.Data.NHibernate;

namespace Legendigital.Framework.Common.BaseFramework.Data.Tables
{
    public partial class SystemPrivilegeDataObject
    {
        /// <summary>
        /// 根据类别名获取权限
        /// </summary>
        /// <param name="categoryName"></param>
        /// <returns></returns>
        public List<SystemPrivilegeEntity> GetAllPrivilegeForListPage(string categoryName)
        {
            NHibernateDynamicQueryGenerator<SystemPrivilegeEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            if (!string.IsNullOrEmpty(categoryName))
                dynamicQueryGenerator.AddWhereClause(PROPERTY_PRIVILEGECATEGORY.Eq(categoryName));

            dynamicQueryGenerator.AddOrderBy(PROPERTY_PRIVILEGECATEGORY.Asc());

            dynamicQueryGenerator.AddOrderBy(PROPERTY_PRIVILEGEORDER.Asc());

            return this.FindListByQueryBuilder(dynamicQueryGenerator);
        }
        /// <summary>
        /// 获取所有的权限类别
        /// </summary>
        /// <returns></returns>
        public List<string> GetAllCategoryNames()
        {
            NHibernateDynamicQueryGenerator<SystemPrivilegeEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            //Distinct PRIVILEGECATEGORY zi
            return this.FindListByProjection<string>(dynamicQueryGenerator, GetDistinctProperty(PROPERTY_PRIVILEGECATEGORY));
        }

        /// <summary>
        ///  通过权限代码获取权限
        /// </summary>
        /// <param name="permissionCode"></param>
        /// <returns></returns>
        public SystemPrivilegeEntity GetByCode(string permissionCode)
        {
            NHibernateDynamicQueryGenerator<SystemPrivilegeEntity> dynamicQueryGenerator = this.GetNewQueryBuilder();

            dynamicQueryGenerator.AddWhereClause(PROPERTY_PRIVILEGEENNAME.Eq(permissionCode));

            return this.FindSingleEntityByQueryBuilder(dynamicQueryGenerator);
        }

        public List<SystemPrivilegeEntity> GetAllPrivilegeByCategoryByUserID(string categoryName, SystemUserEntity userEntity)
        {
            string hql = string.Format("select rp.PrivilegeID from {1} rp where rp.RoleID in (select ur.RoleID from {0} ur where ur.UserID = :userID)", SystemUserRoleRelationEntity.CLASS_FULL_NAME, SystemPrivilegeInRolesEntity.CLASS_FULL_NAME);

            if(!string.IsNullOrEmpty(categoryName))
            {
                hql += " and (rp.PrivilegeID.PrivilegeCategory = :categoryName)";
            }


            var parameters = new NhibernateParameterCollection();

            parameters.AddParameter("userID", userEntity, NHibernateUtil.Entity(typeof(SystemUserEntity)));

            if (!string.IsNullOrEmpty(categoryName))
            {
                parameters.AddParameter("categoryName", categoryName, NHibernateUtil.Entity(typeof(string)));
            }

            return this.FindAllWithCustomQuery(hql, parameters);
        }

    }
}
